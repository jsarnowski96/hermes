[{"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\index.js":"1","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\App.js":"2","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Contact.js":"3","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\About.js":"4","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Home.js":"5","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Register.js":"6","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Sidebar.js":"7","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Dashboard.js":"8","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Login.js":"9","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\Project.js":"10","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\services\\i18n.js":"11","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\jwtSessionStorage.js":"12","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\languageLocalStorage.js":"13","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\CreateProject.js":"14","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\CreateTask.js":"15","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\ProjectList.js":"16","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\TeamList.js":"17","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\TaskList.js":"18","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CreateCompany.js":"19","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\CreateTeam.js":"20","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Repository\\CreateRepository.js":"21","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Role\\CreateRole.js":"22","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Repository\\RepositoryList.js":"23","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\UserList.js":"24","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Comment\\CreateComment.js":"25","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Comment\\CommentList.js":"26","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CompanyList.js":"27","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Role\\RoleList.js":"28","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\NotFound.js":"29","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Comment\\Comment.js":"30","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\Company.js":"31","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\Team.js":"32","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Repository\\Repository.js":"33","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Role\\Role.js":"34","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\config\\axios.js":"35","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\User.js":"36","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\UserAction.js":"37","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Recent.js":"38","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\Task.js":"39","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\CreateOrganization.js":"40","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\OrganizationList.js":"41","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\Organization.js":"42","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\CreateUser.js":"43"},{"size":461,"mtime":1614099401268,"results":"44","hashOfConfig":"45"},{"size":5678,"mtime":1615349327453,"results":"46","hashOfConfig":"45"},{"size":528,"mtime":1614260771385,"results":"47","hashOfConfig":"45"},{"size":518,"mtime":1614260781078,"results":"48","hashOfConfig":"45"},{"size":25951,"mtime":1615350504180,"results":"49","hashOfConfig":"45"},{"size":13643,"mtime":1615326978465,"results":"50","hashOfConfig":"45"},{"size":4813,"mtime":1615349157458,"results":"51","hashOfConfig":"45"},{"size":3707,"mtime":1615334923277,"results":"52","hashOfConfig":"45"},{"size":7744,"mtime":1615323412256,"results":"53","hashOfConfig":"45"},{"size":21325,"mtime":1615345029966,"results":"54","hashOfConfig":"45"},{"size":410,"mtime":1609945680158,"results":"55","hashOfConfig":"45"},{"size":1306,"mtime":1613677609779,"results":"56","hashOfConfig":"45"},{"size":434,"mtime":1613071751491,"results":"57","hashOfConfig":"45"},{"size":14303,"mtime":1615345029966,"results":"58","hashOfConfig":"45"},{"size":17865,"mtime":1615345029966,"results":"59","hashOfConfig":"45"},{"size":6968,"mtime":1615347146060,"results":"60","hashOfConfig":"45"},{"size":4100,"mtime":1615347196799,"results":"61","hashOfConfig":"45"},{"size":6731,"mtime":1615346641829,"results":"62","hashOfConfig":"45"},{"size":12009,"mtime":1615345029995,"results":"63","hashOfConfig":"45"},{"size":11775,"mtime":1615345030168,"results":"64","hashOfConfig":"45"},{"size":6837,"mtime":1615326978465,"results":"65","hashOfConfig":"45"},{"size":6779,"mtime":1615326979299,"results":"66","hashOfConfig":"45"},{"size":2847,"mtime":1615326979299,"results":"67","hashOfConfig":"45"},{"size":6078,"mtime":1615343849106,"results":"68","hashOfConfig":"45"},{"size":0,"mtime":1613661554197,"results":"69","hashOfConfig":"45"},{"size":0,"mtime":1613661568040,"results":"70","hashOfConfig":"45"},{"size":0,"mtime":1613659382797,"results":"71","hashOfConfig":"45"},{"size":0,"mtime":1613661720202,"results":"72","hashOfConfig":"45"},{"size":352,"mtime":1614260499342,"results":"73","hashOfConfig":"45"},{"size":1776,"mtime":1614266592568,"results":"74","hashOfConfig":"45"},{"size":1749,"mtime":1614266589578,"results":"75","hashOfConfig":"45"},{"size":23891,"mtime":1615347529006,"results":"76","hashOfConfig":"45"},{"size":1764,"mtime":1614266639720,"results":"77","hashOfConfig":"45"},{"size":1937,"mtime":1614266650129,"results":"78","hashOfConfig":"45"},{"size":278,"mtime":1614266571255,"results":"79","hashOfConfig":"45"},{"size":19720,"mtime":1615342002263,"results":"80","hashOfConfig":"45"},{"size":4044,"mtime":1615342745176,"results":"81","hashOfConfig":"45"},{"size":4110,"mtime":1615317493394,"results":"82","hashOfConfig":"45"},{"size":24793,"mtime":1615345029966,"results":"83","hashOfConfig":"45"},{"size":9543,"mtime":1615349561739,"results":"84","hashOfConfig":"45"},{"size":0,"mtime":1614966998394,"results":"85","hashOfConfig":"45"},{"size":0,"mtime":1614966979388,"results":"86","hashOfConfig":"45"},{"size":2045,"mtime":1615349373312,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1ldetr1",{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\index.js",[],["194","195"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\App.js",["196","197"],"import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport Sidebar from './Nav/Sidebar';\r\nimport About from './Nav/About';\r\nimport Contact from './Nav/Contact';\r\nimport Login from './Nav/Login';\r\nimport Register from './Nav/Register';\r\nimport Home from './Nav/Home';\r\n\r\nimport Dashboard from './Dashboard/Dashboard';\r\nimport Recent from './Dashboard/Recent';\r\nimport UserAction from './Dashboard/UserAction';\r\n\r\nimport Project from './Project/Project';\r\nimport Task from './Task/Task';\r\nimport Comment from './Comment/Comment';\r\nimport Company from './Company/Company';\r\nimport Team from './Team/Team';\r\nimport Repository from './Repository/Repository';\r\nimport Role from './Role/Role';\r\nimport User from './User/User';\r\nimport Organization from './Organization/Organization';\r\n\r\nimport ProjectList from './Project/ProjectList';\r\nimport TeamList from './Team/TeamList';\r\nimport CommentList from './Comment/CommentList';\r\nimport CompanyList from './Company/CompanyList';\r\nimport UserList from './User/UserList';\r\nimport RepositoryList from './Repository/RepositoryList';\r\nimport TaskList from './Task/TaskList';\r\nimport RoleList from './Role/RoleList';\r\nimport OrganizationList from './Organization/OrganizationList';\r\n\r\nimport CreateProject from './Project/CreateProject';\r\nimport CreateTask from './Task/CreateTask';\r\nimport CreateComment from './Comment/CreateComment';\r\nimport CreateCompany from './Company/CreateCompany';\r\nimport CreateTeam from './Team/CreateTeam';\r\nimport CreateRepository from './Repository/CreateRepository';\r\nimport CreateRole from './Role/CreateRole';\r\nimport CreateUser from './User/CreateUser';\r\nimport CreateOrganization from './Organization/CreateOrganization';\r\n\r\nimport NotFound from './NotFound';\r\n\r\nimport getLanguageFromLocalStorage from '../middleware/languageLocalStorage';\r\n\r\nimport '../assets/css/style.css';\r\nimport CreateTaskTranslation from './Task/CreateTask';\r\n\r\nclass App extends React.Component {    \r\n    constructor(props) {\r\n        super(props);\r\n        const {i18n} = this.props;\r\n        let lsLanguage = getLanguageFromLocalStorage();\r\n        if(i18n.language !== lsLanguage) {\r\n            i18n.changeLanguage(lsLanguage);\r\n        }\r\n        if(sessionStorage.getItem('renderLogoutBtn') === undefined || sessionStorage.getItem('renderLogoutBtn') === null) {\r\n            sessionStorage.setItem('renderLogoutBtn', false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <BrowserRouter>\r\n                <Sidebar />\r\n                <main>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route path=\"/login\" component={Login} />\r\n                        <Route path=\"/register\" component={Register} />\r\n                        <Route path=\"/about\" component={About} />\r\n                        <Route path=\"/contact\" component={Contact} />\r\n                        <Route path=\"/dashboard\" component={Dashboard} />\r\n                        <Route exact path=\"/recent\" component={Recent} />\r\n                        <Route exact path=\"/organization/details\" component={Organization} />\r\n                        <Route exact path=\"/organization/list\" component={OrganizationList} />\r\n                        <Route exact path=\"/organization/create\" component={CreateOrganization} />\r\n                        <Route exact path=\"/project/details\" component={Project} />\r\n                        <Route exact path=\"/project/list\" component={ProjectList} />\r\n                        <Route exact path=\"/project/create\" component={CreateProject} />\r\n                        <Route exact path=\"/team/details\" component={Team} />\r\n                        <Route exact path=\"/team/list\" component={TeamList} />\r\n                        <Route exact path=\"/team/create\" component={CreateTeam} />\r\n                        <Route exact path=\"/repository\" component={Repository} />\r\n                        <Route exact path=\"/repository/list\" component={RepositoryList} />\r\n                        <Route exact path=\"/repository/create\" component={CreateRepository} />\r\n                        <Route exact path=\"/comment\" component={Comment} />\r\n                        <Route exact path=\"/comment/list\" component={CommentList} />\r\n                        <Route exact path=\"/comment/create\" component={CreateComment} />\r\n                        <Route exact path=\"/role\" component={Role} />\r\n                        <Route exact path=\"/role/list\" component={RoleList} />\r\n                        <Route exact path=\"/role/create\" component={CreateRole} />\r\n                        <Route exact path=\"/company\" component={Company} />\r\n                        <Route exact path=\"/company/list\" component={CompanyList} />\r\n                        <Route exact path=\"/company/create\" component={CreateCompany} />\r\n                        <Route exact path=\"/task/list\" component={TaskList} />\r\n                        <Route exact path=\"/task/create\" component={CreateTask} />\r\n                        <Route exact path=\"/task/details\" component={Task} />\r\n                        <Route exact path=\"/user/profile\" component={User} />\r\n                        <Route exact path=\"/user/create\" component={CreateUser} />\r\n                        <Route exact path=\"/user/list\" component={UserList} />\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </main>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst AppTranslation = withTranslation('common')(App);\r\n\r\nexport default AppTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Contact.js",["198"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Contact extends React.Component {    \r\n    render() {\r\n        const {t} = this.props;\r\n        return(\r\n            <div className=\"\">\r\n                <hr /><h1 className=\"\">{t('content.contact.title')}</h1><hr />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ContactTranslation = withTranslation('common')(Contact);\r\n\r\nexport default ContactTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\About.js",["199"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass About extends React.Component {    \r\n    render() {\r\n        const {t} = this.props;\r\n        return(\r\n            <div className=\"\">\r\n                <hr /><h1 className=\"\">{t('content.about.title')}</h1><hr />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst AboutTranslation = withTranslation('common')(About);\r\n\r\nexport default AboutTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Home.js",["200"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Register.js",["201","202","203","204"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport '../../assets/css/register.css';\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                authenticated: true,\r\n                fields: {},\r\n                errors: {}\r\n            };\r\n        } else {\r\n            this.state = {\r\n                authenticated: false,\r\n                fields: {},\r\n                errors: {}\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['firstname']) {\r\n            isValid = false;\r\n            errors['firstname'] = t('misc.phrases.field') + ' \\'' + t('content.register.firstname') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['firstname'] !== undefined) {\r\n            if(!fields['firstname'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/;\r\n                isValid = false;\r\n                errors['firstname'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['lastname']) {\r\n            isValid = false;\r\n            errors['lastname'] = t('misc.phrases.field') + ' \\'' + t('content.register.lastname') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['lastname'] !== undefined) {\r\n            if(!fields['lastname'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/;\r\n                isValid = false;\r\n                errors['lastname'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['username']) {\r\n            isValid = false;\r\n            errors['username'] = t('misc.phrases.field') + ' \\'' + t('content.register.username') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['username'] !== undefined) {\r\n            if(!fields['username'].match(/^[a-zA-Z0-9\\-_.]+$/)) {\r\n                let regex = /^[a-zA-Z0-9\\-_.]+$/;\r\n                isValid = false;\r\n                errors['username'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['email']) {\r\n            isValid = false;\r\n            errors['email'] = t('misc.phrases.field') + ' \\'' + t('content.register.email') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['email'] != undefined) {\r\n            if(!fields['email'].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/) && !fields['email'].match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)) {\r\n                isValid = false;\r\n                errors['email'] = t('commonErrors.formValidation.emailNotValid');\r\n            }\r\n        }\r\n\r\n        if(!fields['phone']) {\r\n            isValid = false;\r\n            errors['phone'] = t('misc.phrases.field') + ' \\'' + t('content.register.phone') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['phone'] != undefined) {\r\n            if(!fields['phone'].match(/^\\+?([0-9]{2})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3}?[-. ]?([0-9]{3}))$/) && !fields['phone'].match(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})$/) && !fields['phone'].match(/^([0-9]{9})$/)) {\r\n                let regex1 = 'yy xxx xxx xxx';\r\n                let regex2 = 'xxx xxx xxx';\r\n                let regex3 = 'xxxxxxxxx';\r\n                isValid = false;\r\n                errors['phone'] = t('commonErrors.formValidation.incorrectPhoneNumberFormat') + '\\n\\n' + regex1 + ', ' + regex2 + ' ' + t('misc.phrases.or') + ' ' + regex3;\r\n            }\r\n        }\r\n\r\n        if(!fields['position']) {\r\n            isValid = false;\r\n            errors['position'] = t('misc.phrases.field') + ' \\'' + t('content.register.position') + '\\' ' +  t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['position'] !== undefined) {\r\n            if(!fields['position'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,30}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,30}$/;\r\n                isValid = false;\r\n                errors['position'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(fields['company'] !== undefined && fields['company'] !== '') {\r\n            if(!fields['company'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['company'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        // if(!fields['company']) {\r\n        //     isValid = false;\r\n        //     errors['company'] = t('misc.phrases.field') + ' \\'' + t('content.register.company') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        // }\r\n\r\n        if(!fields['password']) {\r\n            isValid = false;\r\n            errors['password'] = t('misc.phrases.field') + ' \\'' + t('content.register.password') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['password'] !== undefined) {\r\n            if(fields['password'].length < 6) {\r\n                isValid = false;\r\n                errors['password'] = t('commonErrors.formValidation.passwordTooShort');\r\n            }\r\n            if(fields['password'] !== fields['confirm']) {\r\n                isValid = false;\r\n                errors['password'] = t('commonErrors.formValidation.passwordsDoNotMatch');\r\n            }\r\n        }\r\n\r\n        if(!fields['confirm']) {\r\n            isValid = false;\r\n            errors['confirm'] = t('commonErrors.formValidation.confirmPasswordIsEmpty');\r\n        } else if(fields['confirm'] !== undefined) {\r\n            if(fields['confirm'] !== fields['password']) {\r\n                isValid = false;\r\n                errors['confirm'] = t('commonErrors.formValidation.passwordsDoNotMatch');\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/register', {\r\n                    firstname: fields['firstname'],\r\n                    lastname: fields['lastname'],\r\n                    username: fields['username'],\r\n                    email: fields['email'],\r\n                    phone: fields['phone'],\r\n                    position: fields['position'],\r\n                    company: fields['company'],\r\n                    password: fields['password']\r\n                }).then((response) => {\r\n                    console.log(response);\r\n                })\r\n                .catch(error => {\r\n                    let err = document.getElementById('serverResponse');\r\n                    if(error) {\r\n                        if(error.response.data.type === 'AccountDuplication') {\r\n                            err.innerHTML = t('content.register.errorMessages.dataValidation.userAlreadyExists');\r\n                            err.style.display = 'block';\r\n                        } else {\r\n                            err.innerHTML = error.response;\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                console.log(e);\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n        \r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        return(\r\n            <div className=\"card\">\r\n                <p className=\"card-title\">{t('content.register.title')}</p><hr className=\"card-hr\" />\r\n                <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                    <label htmlFor=\"firstname\">{t('content.register.firstname')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'firstname')} value={this.state.fields['firstname']} type=\"firstname\" className=\"\" name=\"firstname\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"firstname\"]}</span>\r\n                    <label htmlFor=\"lastname\">{t('content.register.lastname')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'lastname')} value={this.state.fields['lastname']} type=\"lastname\" className=\"\" name=\"lastname\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"lastname\"]}</span>\r\n                    <label htmlFor=\"username\">{t('content.register.username')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'username')} value={this.state.fields['username']} type=\"username\" className=\"\" name=\"username\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"username\"]}</span>\r\n                    <label htmlFor=\"email\">{t('content.register.email')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'email')} value={this.state.fields['email']} type=\"email\" className=\"\" name=\"email\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"email\"]}</span>\r\n                    <label htmlFor=\"phone\">{t('content.register.phone')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'phone')} value={this.state.fields['phone']} type=\"phone\" className=\"\" name=\"phone\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"phone\"]}</span>\r\n                    <label htmlFor=\"position\">{t('content.register.position')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'position')} value={this.state.fields['position']} type=\"position\" className=\"\" name=\"position\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"position\"]}</span>\r\n                    <label htmlFor=\"company\">{t('content.register.company')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'company')} value={this.state.fields['company']} type=\"company\" className=\"\" name=\"company\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"company\"]}</span>\r\n                    <label htmlFor=\"password\">{t('content.register.password')}</label>\r\n                    <input type=\"password\" onChange={this.onChange.bind(this, 'password')} value={this.state.fields['password']} className=\"\" id=\"password\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"password\"]}</span>\r\n                    <label htmlFor=\"confirm\">{t('content.register.confirm')}</label>\r\n                    <input type=\"password\" onChange={this.onChange.bind(this, 'confirm')} value={this.state.fields['confirm']} className=\"\" id=\"confirm\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"confirm\"]}</span>\r\n                    <div class=\"card-form-divider\">\r\n                        <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.register')}</button>\r\n                        <button type=\"reset\" onClick={this.resetForm} className=\"card-form-button\" >{t('misc.actionDescription.reset')}</button>\r\n                        <button type=\"button\" className=\"card-form-button\"><Link to=\"/\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                    </div>\r\n                    {this.state.authenticated ? (\r\n                        <span className=\"error-msg-span\" id=\"serverResponse\">Already authenticated</span>\r\n                    ) : (\r\n                        <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                    )}\r\n                </form>\r\n                <p className=\"card-form-reminder\">{t('content.register.loginTip')} <Link to=\"/login\">{t('content.register.loginLink')}</Link></p>\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nconst RegisterTranslation = withTranslation('common')(Register);\r\n\r\nexport default RegisterTranslation;\r\n\r\n// TODO: FIX FORM VALIDATION MESSAGES DISPLAY !!!","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Sidebar.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Dashboard.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Login.js",["205"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, setJwtDataInSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                authenticated: true,\r\n                redirected: false,\r\n                serverResponse: null,\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        } else {\r\n            if(this.props.location.state !== undefined && this.props.location.state !== null && this.props.location.state !== '' && this.props.location.state.redirected !== null && this.props.location.state.redirected !== undefined && this.props.location.state.authenticated !== null && this.props.location.state.authenticated !== undefined) {\r\n                this.state = {\r\n                    authenticated: this.props.location.state.authenticated,\r\n                    redirected: this.props.location.state.redirected,\r\n                    serverResponse: null,\r\n                    fields: {},\r\n                    errors: {}\r\n                }\r\n            } else {\r\n                this.state = {\r\n                    authenticated: null,\r\n                    redirected: false,\r\n                    serverResponse: null,\r\n                    fields: {},\r\n                    errors: {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['login']) {\r\n            isValid = false;\r\n            errors['login'] = t('misc.phrases.field') + ' \\'' + t('content.login.login') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['login'] !== undefined) {\r\n            if(!fields['login'].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/) && !fields['login'].match(/^[a-zA-Z0-9\\-_.]+$/)) {\r\n                isValid = false;\r\n                errors['login'] = t('content.login.errorMessages.loginNotValid');\r\n            }\r\n        }\r\n\r\n        if(!fields['password']) {\r\n            isValid = false;\r\n            errors['password'] = t('misc.phrases.field') + ' \\'' + t('content.login.password') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/auth/login', \r\n                {\r\n                    login: fields['login'],\r\n                    password: fields['password'],\r\n                }, \r\n                {\r\n                    auth: \r\n                    {\r\n                        username: fields['login'],\r\n                        password: fields['password']\r\n                    }\r\n            }).then((response) => {\r\n                if(response.data.user._id !== undefined && response.data.user._id !== '' && response.data.user._id !== null && response.data.refreshToken !== undefined && response.data.refreshToken !== '' && response.data.refreshToken !== null) {\r\n                    if(this.jwt === null || this.jwt === undefined) {\r\n                        setJwtDataInSessionStorage(response.data.user._id, response.data.refreshToken);\r\n                        this.jwt = getJwtDataFromSessionStorage();\r\n                    }\r\n\r\n                    if(this.state.authenticated !== true) {\r\n                        this.setState({ authenticated: true, redirected: false});\r\n                    }\r\n                    sessionStorage.setItem('renderLogoutBtn', true);\r\n                };\r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined) {\r\n                    this.setState({serverResponse: error.response.data.error, authenticated: false});\r\n                }\r\n            });\r\n            } catch(e) {\r\n                this.setState({serverResponse: e.message});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const{t} = this.props;\r\n\r\n        if(this.state.authenticated === true && this.jwt !== null) {\r\n            return(\r\n                <Redirect to=\r\n                   {{ \r\n                        pathname: '/dashboard'\r\n                   }} \r\n                />\r\n            )\r\n        } else {\r\n            return(\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">{t('content.login.title')}</p><hr className=\"card-hr\" />\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <label htmlFor=\"login\">{t('content.login.login')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'login')} value={this.state.fields['login']} type=\"login\" className=\"\" id=\"login\" name=\"login\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"login\"]}</span>\r\n                        <label htmlFor=\"password\">{t('content.login.password')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'password')} value={this.state.fields['password']} type=\"password\" className=\"\" id=\"password\" name=\"password\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"password\"]}</span>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.login')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                        {!this.state.authenticated && this.state.redirected ? (\r\n                            <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('commonErrors.unauthorized')}</span>\r\n                        ) : (\r\n                            this.state.serverResponse !== null ? (\r\n                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.login.errorMessages.dataValidation.' + this.state.serverResponse)}</span>\r\n                            ) : (\r\n                                <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                            )\r\n                        )}\r\n                    </form>\r\n                    <p className=\"card-form-reminder\">{t('content.login.registerTip')} <Link to=\"/register\">{t('content.login.registerLink')}</Link></p>\r\n                </div>\r\n            )\r\n        }\r\n    }    \r\n}\r\n\r\nconst LoginTranslation = withTranslation('common')(Login);\r\n\r\nexport default LoginTranslation;\r\n\r\n// TODO 18.01 - FIX REACT ROUTER/REDIRECT ISSUE WITH LOGIN/DASHBOARD\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\Project.js",["206","207"],"import React from 'react';\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport Select, { createFilter } from 'react-select';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Project extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                project: null,\r\n                categories: [],\r\n                teams: [],\r\n                statuses: ['To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                enableEdit: false,\r\n                allowSave: false,\r\n                serverResponse: null\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        }\r\n\r\n        this.getTeams();\r\n        this.getCategories();\r\n        this.getProject();\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        if(field === 'restricted_access') {\r\n            fields[field] = event.target.checked;\r\n        } else {\r\n            fields[field] = event.target.value;       \r\n        }\r\n\r\n        if(field === 'category') {\r\n            if(fields[field] === this.state.project[field].name) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        } else if(field === 'owner') {\r\n            if(fields[field] === this.state.project[field].username) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        } else {\r\n            if(fields[field] === this.state.project[field]) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        }\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    resetForm() {\r\n        let fields = this.state.fields;\r\n        fields['name'] = this.state.project.name;\r\n        fields['description'] = this.state.project.description;\r\n        fields['organization'] = this.state.project.organization.name;\r\n        fields['category'] = this.state.project.category.name;\r\n        fields['teams'] = this.state.project.teams;\r\n        fields['status'] = this.state.project.status;\r\n        fields['owner'] = this.state.project.owner.username;\r\n        fields['dueDate'] = moment(this.state.project.dueDate).format('YYYY-MM-DD');\r\n\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        this.setState({fields, errors: {}, allowSave: false, serverResponse: null});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['teams'] || fields['teams'] === 'none') {\r\n            isValid = false;\r\n            errors['teams'] = t('misc.phrases.field') + ' \\'' + t('content.team.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('content.project.actions.createProject.errorMessages.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getCategories() {\r\n        await axios.post('http://localhost:3300/category/list', { category_type: 'project'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage();\r\n                } else {\r\n                    this.setState({serverResponse: error.response.data.error});\r\n                }\r\n            });\r\n    }\r\n\r\n    async getTeams() {\r\n        try {\r\n            await axios.get('http://localhost:3300/team/list', {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                    this.setState({teams: response.data.teams});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                } else {\r\n                    this.setState({\r\n                        serverResponse: error.response.data.error\r\n                    })\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    async getProject() {\r\n        let fields = this.state.fields;\r\n        try {\r\n            await axios.post('http://localhost:3300/project/details', \r\n            {\r\n                userId: this.state.auth.userId,\r\n                projectId: this.props.location.state.projectId\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== undefined || response.data.project !== null) {\r\n                    this.setState({\r\n                        project: response.data.project\r\n                    })\r\n                    fields['name'] = this.state.project.name;\r\n                    fields['description'] = this.state.project.description;\r\n                    fields['category'] = this.state.project.category.name;\r\n                    fields['teams'] = this.state.project.teams;\r\n                    fields['organization'] = this.state.project.organization.name;\r\n                    fields['status'] = this.state.project.status;\r\n                    fields['owner'] = this.state.project.owner.username;\r\n                    fields['dueDate'] = moment(this.state.project.dueDate).format('YYYY-MM-DD');\r\n                    this.setState({fields});\r\n                }          \r\n            }, {headers: this.headers, withCredentials: true})\r\n            .catch(error => {\r\n                if(error) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: error.response.data.error\r\n                        })\r\n                    }\r\n                }\r\n            })    \r\n        } catch(e) {\r\n            this.setState({\r\n                serverResponse: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/project/update', {\r\n                    userId: this.state.auth.userId,\r\n                    projectId: this.state.project._id,\r\n                    projectObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.project !== null) {\r\n                        this.setState({\r\n                            project: response.data.project,\r\n                            serverResponse: t('content.project.actions.updateProject.actionResults.success')\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        this.setState({serverResponse: error.response.data.error});\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: e.message});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return( \r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">{t('content.project.fields.overview')}</p><hr className=\"card-hr\" />\r\n                    {this.state.project !== null ? (\r\n                        <form id=\"form\" onSubmit={this.onFormSubmit}>\r\n                            <table className=\"tab-table\">\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.name')}</th>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" disabled={!this.state.enableEdit} />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.description')}</th>\r\n                                    <td>\r\n                                        <textarea onChange={this.onChange.bind(this, 'description')} cols=\"40\" rows=\"20\" value={this.state.fields['description']} type=\"description\" id=\"description\" name=\"description\" disabled={!this.state.enableEdit}/>\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.category')}</th>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\" disabled={!this.state.enableEdit} >\r\n                                            <option selected value={this.state.project.category.name}>{this.state.project.category.name}</option>\r\n                                            {this.state.categories.length > 0 && (\r\n                                                this.state.categories.map((category, index) => {\r\n                                                    if(category._id !== this.state.project.category._id) {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.status')}</th>\r\n                                    <td>\r\n                                        <Select \r\n                                            options={this.state.statuses.map((status) => ({value: status, label: status}))} \r\n                                            value={this.state.fields['status']}\r\n                                            onChange={(value) => { \r\n                                                let fields = this.state.fields; \r\n                                                fields['status'] = value;\r\n                                                if(fields['status'] !== JSON.stringify(this.state.project.status)) {\r\n                                                    this.setState({allowSave: true})\r\n                                                }\r\n                                                this.setState({fields})}}\r\n                                            name=\"Status\"\r\n                                            defaultValue={this.state.fields['status']}\r\n                                            //filterOption={createFilter({stringify: option => `${option}`})}\r\n                                            placeholder={t('misc.actionDescription.setStatus')}\r\n                                            getOptionLabel={(option) => option} \r\n                                            getOptionValue={(option) => option}\r\n                                            noOptionsMessage={() => t('commonErrors.noStatusesAvailable')}\r\n                                            isDisabled={!this.state.enableEdit} />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.projectManager')}</th>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'owner')} value={this.state.fields['owner']} type=\"owner\" className=\"\" name=\"owner\" disabled={!this.state.enableEdit}/>\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"owner\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>    \r\n                                    <th>{t('content.project.fields.associatedTeams')}</th>\r\n                                    <td>\r\n                                        <Select \r\n                                            options={this.state.teams} \r\n                                            isMulti\r\n                                            value={this.state.fields['teams']}\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields;\r\n                                                fields['teams'] = value;\r\n                                                if(fields['teams'] !== this.state.project.teams) {\r\n                                                    this.setState({allowSave: true})\r\n                                                }\r\n                                                this.setState({fields});\r\n                                            }}\r\n                                            name=\"Teams\"\r\n                                            defaultValue={() => this.state.project.teams.map((team) => {return [team.name]})}\r\n                                            placeholder={t('misc.actionDescription.addTeam')}\r\n                                            getOptionLabel={(option) => option.name} \r\n                                            getOptionValue={(option) => option._id}\r\n                                            noOptionsMessage={() => t('commonErrors.noTeamsAvailable')}\r\n                                            isDisabled={!this.state.enableEdit} />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.dueDate')}</th>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                                            min=\"2021-02-01\" max=\"2022-12-31\" disabled={!this.state.enableEdit} />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </form>\r\n                    ) : (\r\n                        <h3>{t('content.project.actions.selectProject.errorMessages.dataValidation.ProjectNotFound')}</h3>\r\n                    )}\r\n                    <div class=\"card-form-divider\">\r\n                        <button className=\"card-form-button\"><Link to='/dashboard'>{t('misc.actionDescription.return')}</Link></button>\r\n                        <button className=\"card-form-button\" form=\"form\" type=\"submit\" hidden={!this.state.enableEdit} disabled={!this.state.allowSave}>{t('misc.actionDescription.save')}</button>\r\n                        <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit}))}} hidden={this.state.enableEdit}>{t('misc.actionDescription.edit')}</button>\r\n                        <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit})); this.resetForm()}} hidden={!this.state.enableEdit}>{t('misc.actionDescription.cancel')}</button>\r\n                    </div>\r\n                    {this.state.serverResponse !== null ? (\r\n                        this.state.project !== null ? (\r\n                            <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse}</span>\r\n                        ) : (\r\n                            <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.project.actions.updateProject.errorMessages.dataValidation.' + this.state.serverResponse)}</span>\r\n                        )\r\n                    ) : (\r\n                        <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                    )}\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst ProjectTranslation = withTranslation('common')(Project);\r\n\r\nexport default ProjectTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\services\\i18n.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\jwtSessionStorage.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\languageLocalStorage.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\CreateProject.js",["208"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateProject extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                categories: [],\r\n                teams: [],\r\n                statuses: [ 'To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: null\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getCategories();\r\n        this.getTeams();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        // document.getElementById('serverResponse').innerHTML = '';\r\n        document.getElementById('description').defaultValue = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        if(field === 'restricted_access') {\r\n            fields[field] = event.target.checked;\r\n        } else {\r\n            fields[field] = event.target.value;       \r\n        }\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['team'] || fields['team'] === 'none') {\r\n            isValid = false;\r\n            errors['team'] = t('misc.phrases.field') + ' \\'' + t('content.team.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getCategories() {\r\n        await axios.post('http://localhost:3300/category/list', { category_type: 'project'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                }\r\n                \r\n                this.setState({\r\n                    serverResponse: error.response.data.error\r\n                })\r\n            });\r\n    }\r\n\r\n    async getTeams() {\r\n        await axios.get('http://localhost:3300/team/list', {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response.data.teams.length > 0 && response.data.teams !== null) {\r\n                    this.setState({teams: response.data.teams});\r\n                } else {\r\n                    this.setState({teams: null});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if (error.response.data.error instanceof Error && (error.response.status === 404 || error.response.status === 406 || error.response.status === 500)) {\r\n                    this.setState({\r\n                        serverResponse: error.response.data.error\r\n                    });\r\n                }\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/project/create', {\r\n                    userId: this.state.auth.userId,\r\n                    projectObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.project !== null) {\r\n                        this.setState({project: response.data.project, serverResponse: t('content.project.actions.createProject.actionResults.success')});\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error) {\r\n                        this.setState({serverResponse: error.response.data.error});\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: e.message});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">{t('content.project.actions.createProject.actionTitle')}</p><hr className=\"card-hr\" />\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <label htmlFor=\"name\">{t('content.project.fields.name')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                        <label htmlFor=\"category\">{t('content.project.fields.category')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                            {this.state.categories.length > 0 && (\r\n                                this.state.categories.map((category, index) => {\r\n                                    if(index === 0) {\r\n                                        return <option value={category.name}>{category.name}</option>\r\n                                    } else {\r\n                                        return <option value={category.name}>{category.name}</option>\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span>\r\n                        <label htmlFor=\"description\">{t('content.project.fields.description')}</label>\r\n                        <textarea onChange={this.onChange.bind(this, 'description')} value={this.state.fields['description']} type=\"description\" id=\"description\" name=\"description\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span>\r\n                        <label htmlFor=\"team\">{t('content.project.fields.team')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'team')} value={this.state.fields['team']} type=\"team\" className=\"\" name=\"team\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectTeam')}</option>\r\n                            {this.state.teams.length > 0 && (\r\n                                this.state.teams.map((team, index) => {\r\n                                    if(index === 0) {\r\n                                        return <option value={team.name}>{team.name}</option>\r\n                                    } else {\r\n                                        return <option value={team.name}>{team.name}</option>\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"team\"]}</span>\r\n                        <label htmlFor=\"status\">{t('content.project.fields.status')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'status')} value={this.state.fields['status']} type=\"status\" className=\"\" name=\"status\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectStatus')}</option>\r\n                            {this.state.statuses.map((status, index) => {\r\n                                if(index === 0) {\r\n                                    return <option value={status}>{status}</option>\r\n                                } else {\r\n                                    return <option value={status}>{status}</option>\r\n                                }\r\n                            })}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span>\r\n                        <label htmlFor=\"dueDate\">{t('content.project.fields.dueDate')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                            min=\"2021-02-01\" max=\"2022-12-31\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span>\r\n                        <label htmlFor=\"restrictedAccess\">{t('content.project.fields.restrictedAccess')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'restrictedAccess')} value={this.state.fields['restrictedAccess']} type=\"checkbox\" className=\"\" name=\"restrictedAccess\" />\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                        {this.state.serverResponse !== null ? (\r\n                                this.state.project !== null ? (\r\n                                    <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse}</span>\r\n                                ) : (\r\n                                    <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.project.actions.createProject.errorMessages.dataValidation.' + this.state.serverResponse)}</span>\r\n                                )\r\n                            ) : (\r\n                                <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                            )}\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateProjectTranslation = withTranslation('common')(CreateProject);\r\n\r\nexport default CreateProjectTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\CreateTask.js",["209","210"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateTask extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                categories: [],\r\n                teams: [],\r\n                projects: [],\r\n                users: [],\r\n                statuses: [ 'To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: null\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getCategories();\r\n        this.getProjects();\r\n        this.getTeams();\r\n        this.getUsers();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('description').defaultValue = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;       \r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['projectId'] || fields['projectId'] === 'none') {\r\n            isValid = false;\r\n            errors['project'] = t('misc.phrases.field') + ' \\'' + t('content.task.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getTeams() {\r\n        try {\r\n            await axios.get('http://localhost:3300/team/list', {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                    this.setState({teams: response.data.teams});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                } else {\r\n                    this.setState({\r\n                        serverResponse: error.response.data.error\r\n                    })\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        try {\r\n            await axios.post('http://localhost:3300/user/list', \r\n            {\r\n            }, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.users.length > 0 && response.data.users !== null) {\r\n                    this.setState({users: response.data.users});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage();\r\n                } else {\r\n                    this.setState({serverResponse: error.response.data.error});\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    async getCategories() {\r\n        await axios.post('http://localhost:3300/category/list', { category_type: 'task'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                }\r\n                \r\n                this.setState({\r\n                    serverResponse: error.response.data.error\r\n                })\r\n            });\r\n    }\r\n\r\n    async getProjects() {\r\n        try {\r\n            axios.post('http://localhost:3300/project/list', \r\n            {\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== undefined && response.data.projects !== null && response.data.projects.length > 0) {\r\n                    this.setState({projects: response.data.projects});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: error.response.data.error\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/task/create', {\r\n                    userId: this.state.auth.userId,\r\n                    taskObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.task !== null) {\r\n                        this.setState({task: response.data.task, serverResponse: t('content.task.actions.createTask.actionResults.success')});\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error) {\r\n                        this.setState({serverResponse: error.response.data.error});\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: e.message});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">{t('content.task.actions.createTask.actionTitle')}</p><hr className=\"card-hr\" />\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <label htmlFor=\"name\">{t('content.task.fields.name')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                        <label htmlFor=\"category\">{t('content.task.fields.category')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                            {this.state.categories.length > 0 && (\r\n                                this.state.categories.map((category, index) => {\r\n                                    if(index === 0) {\r\n                                        return <option value={category.name}>{category.name}</option>\r\n                                    } else {\r\n                                        return <option value={category.name}>{category.name}</option>\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span>\r\n                        <label htmlFor=\"description\">{t('content.task.fields.description')}</label>\r\n                        <textarea onChange={this.onChange.bind(this, 'description')} value={this.state.fields['description']} type=\"description\" id=\"description\" name=\"description\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span>\r\n                        <label htmlFor=\"projectId\">{t('content.task.fields.project')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'projectId')} value={this.state.fields['projectId']} type=\"projectId\" className=\"\" name=\"projectId\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectProject')}</option>\r\n                            {this.state.projects.length > 0 && (\r\n                                this.state.projects.map((project, index) => {\r\n                                    if(index === 0) {\r\n                                        return <option value={project._id}>{project.name}</option>\r\n                                    } else {\r\n                                        return <option value={project._id}>{project.name}</option>\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"projectId\"]}</span>\r\n                        <label htmlFor=\"assigned_user\">{t('content.task.fields.assignedUser')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'assigned_user')} value={this.state.fields['assigned_user']} type=\"assigned_user\" className=\"\" name=\"assigned_user\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectUser')}</option>\r\n                            {this.state.users.length > 0 && (\r\n                                this.state.users.map((user, index) => {\r\n                                    if(index === 0) {\r\n                                        return <option value={user._id}>{user.username}</option>\r\n                                    } else {\r\n                                        return <option value={user._id}>{user.username}</option>\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"assigned_user\"]}</span>\r\n                        <label htmlFor=\"status\">{t('content.task.fields.assignedTeams')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'teams')} value={this.state.fields['teams']} type=\"teams\" className=\"\" name=\"teams\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectTeam')}</option>\r\n                            {this.state.teams.length > 0 && (\r\n                                this.state.teams.map((team, index) => {\r\n                                    if(index === 0) {\r\n                                        return <option value={team._id}>{team.name}</option>\r\n                                    } else {\r\n                                        return <option value={team._id}>{team.name}</option>\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span>\r\n                        <label htmlFor=\"status\">{t('content.task.fields.status')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'status')} value={this.state.fields['status']} type=\"status\" className=\"\" name=\"status\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectStatus')}</option>\r\n                            {this.state.statuses.map((status, index) => {\r\n                                if(index === 0) {\r\n                                    return <option value={status}>{status}</option>\r\n                                } else {\r\n                                    return <option value={status}>{status}</option>\r\n                                }\r\n                            })}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span>\r\n                        <label htmlFor=\"dueDate\">{t('content.task.fields.dueDate')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                            min=\"2021-02-01\" max=\"2022-12-31\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                        {this.state.serverResponse !== null ? (\r\n                                this.state.task !== null ? (\r\n                                    <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse}</span>\r\n                                ) : (\r\n                                    <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.task.actions.createTask.errorMessages.dataValidation.' + this.state.serverResponse)}</span>\r\n                                )\r\n                            ) : (\r\n                                <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                            )}\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateTaskTranslation = withTranslation('common')(CreateTask);\r\n\r\nexport default CreateTaskTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\ProjectList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\TeamList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\TaskList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CreateCompany.js",["211","212","213","214","215","216","217","218","219","220","221","222","223","224"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/register.css';\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateCompany extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        document.getElementById('description').defaultValue = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n        this.setState({fields});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.company.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.company.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['email']) {\r\n            isValid = false;\r\n            errors['email'] = t('misc.phrases.field') + ' \\'' + t('content.company.fields.email') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['email'] !== undefined) {\r\n            if(!fields['email'].match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/) && !fields['email'].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\r\n                let regex1 = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                let regex2 = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n                isValid = false;\r\n                errors['email'] = t('commonErrors.formValidation.emailNotValid') + '\\n\\n' + regex1 + ', ' + regex2;\r\n            }\r\n        }\r\n\r\n        if(!fields['phone']) {\r\n            isValid = false;\r\n            errors['phone'] = t('misc.phrases.field') + ' \\'' + t('content.company.fields.phone') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['phone'] !== undefined) {\r\n            if(!fields['phone'].match(/^\\+?([0-9]{2})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3}?[-. ]?([0-9]{3}))$/) && !fields['phone'].match(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})$/) && !fields['phone'].match(/^([0-9]{9})$/)) {\r\n                let regex1 = 'yy xxx xxx xxx';\r\n                let regex2 = 'xxx xxx xxx';\r\n                let regex3 = 'xxxxxxxxx';\r\n                isValid = false;\r\n                errors['phone'] = t('commonErrors.formValidation.incorrectPhoneNumberFormat') + '\\n\\n' + regex1 + ', ' + regex2 + ' ' + t('misc.phrases.or') + ' ' + regex3;\r\n            }\r\n        }\r\n\r\n        if(!fields['website']) {\r\n            isValid = false;\r\n            errors['website'] = t('misc.phrases.field') + '\\'' + t('content.company.fields.website') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['website'] !== undefined) {\r\n            if(!fields['website'].match(/[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&\\/\\/=]*)?/gi)) {\r\n                //let regex = /^\\((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?$/;\r\n                isValid = false;\r\n                errors['website'] = t('commonErrors.formValidation.InvalidUrlFormat');\r\n            }\r\n        }\r\n\r\n        if(fields['avatar_url'] !== undefined && fields['avatar_url'] !== '') {\r\n            if(!fields['avatar_url'].match(/[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&\\/\\/=]*)?/gi)) {\r\n                isValid = false;\r\n                errors['avatar_url'] = t('commonErrors.formValidation.InvalidUrlFormat');\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/company/create', {\r\n                    userId: this.state.auth.userId,\r\n                    companyObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.company !== null) {\r\n                        this.setState({\r\n                            company: response.data.company\r\n                        })\r\n                    }      \r\n                })\r\n                .catch((error) => {\r\n                    if(error) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage();\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: error.response.data.error\r\n                            })\r\n                        }\r\n                    }\r\n                })    \r\n            } catch(e) {\r\n                this.setState({\r\n                    serverResponse: e.message\r\n                })\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">{t('content.company.actions.createCompany.actionTitle')}</p><hr className=\"card-hr\" />\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <label htmlFor=\"name\">{t('content.company.fields.name')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                        <label htmlFor=\"description\">{t('content.company.fields.description')}</label>\r\n                        <textarea onChange={this.onChange.bind(this, 'description')} value={this.state.fields['description']} type=\"description\" id=\"description\" name=\"description\" rows=\"10\" cols=\"40\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span>\r\n                        <label htmlFor=\"email\">{t('content.company.fields.email')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'email')} value={this.state.fields['email']} type=\"email\" className=\"\" name=\"email\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"email\"]}</span>\r\n                        <label htmlFor=\"phone\">{t('content.company.fields.phone')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'phone')} value={this.state.fields['phone']} type=\"phone\" className=\"\" name=\"phone\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"phone\"]}</span>\r\n                        <label htmlFor=\"phone\">{t('content.company.fields.website')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'website')} value={this.state.fields['website']} type=\"website\" className=\"\" name=\"website\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"website\"]}</span>\r\n                        <label htmlFor=\"phone\">{t('content.company.fields.avatarUrl')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'avatar_url')} value={this.state.fields['avatar_url']} type=\"avatar_url\" className=\"\" name=\"avatar_url\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"avatar_url\"]}</span>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                        {this.state.serverResponse !== null ? (\r\n                            <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{this.state.serverResponse}</span>\r\n                        ) : (\r\n                            <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                        )}\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateCompanyTranslation = withTranslation('common')(CreateCompany);\r\n\r\nexport default CreateCompanyTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\CreateTeam.js",["225"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateTeam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                categories: [],\r\n                organizations: [],\r\n                team: null,\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: null\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getCategories();\r\n        this.getOrganizations();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        document.getElementById('description').defaultValue = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['organization'] || fields['organization'] === 'none') {\r\n            isValid = false;\r\n            errors['organization'] = t('misc.phrases.field') + ' \\'' + t('content.organization.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/)) {\r\n                let regex = /^.{1,500}$/;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getCategories() {\r\n        try {\r\n            await axios.post('http://localhost:3300/category/list', { category_type: 'team'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                }\r\n                \r\n                this.setState({\r\n                    serverResponse: error.response.data.error\r\n                })\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n        \r\n    }\r\n\r\n    async getOrganizations() {\r\n        try {\r\n            await axios.post('http://localhost:3300/organization/list', { company: 'Firma testowa #1'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                    this.setState({organizations: response.data.organizations});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                }\r\n                \r\n                this.setState({\r\n                    serverResponse: error.response.data.error\r\n                })\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/team/create', {\r\n                    userId: this.state.auth.userId,\r\n                    teamObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.team !== null) {\r\n                        this.setState({\r\n                            team: response.data.team, serverResponse: t('content.team.actions.createTeam.actionResults.success')\r\n                        })\r\n                    }  \r\n                })\r\n                .catch(error => {\r\n                    if(error) {\r\n                        this.setState({\r\n                            serverResponse: error.response.data.error\r\n                        })\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({\r\n                    serverResponse: e.message\r\n                })\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">{t('content.team.actions.createTeam.actionTitle')}</p><hr className=\"card-hr\" />\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <label htmlFor=\"name\">{t('content.team.fields.name')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                        <label htmlFor=\"description\">{t('content.team.fields.description')}</label>\r\n                        <textarea onChange={this.onChange.bind(this, 'description')} value={this.state.fields['description']} type=\"description\" id=\"description\" name=\"description\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span>\r\n                        <label htmlFor=\"category\">{t('content.category.title')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                            {this.state.categories.length > 0 && (\r\n                                this.state.categories.map((category, index) => {\r\n                                    return <option value={category.name}>{category.name}</option>\r\n                                })\r\n                            )}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span>\r\n                        <label htmlFor=\"organization\">{t('content.organization.title')}</label>\r\n                        <select onChange={this.onChange.bind(this, 'organization')} value={this.state.fields['organization']} type=\"organization\" className=\"\" name=\"organization\">\r\n                            <option selected value=\"none\">{t('misc.actionDescription.selectOrganization')}</option>\r\n                            {this.state.organizations.length > 0 && (\r\n                                this.state.organizations.map((organization, index) => {\r\n                                    return <option value={organization.name}>{organization.name}</option>\r\n                                })\r\n                            )}\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"organization\"]}</span>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                        {this.state.serverResponse !== null ? (\r\n                                this.state.team !== null ? (\r\n                                    <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse}</span>\r\n                                ) : (\r\n                                    <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.team.actions.createTeam.errorMessages.dataValidation.' + this.state.serverResponse)}</span>\r\n                                )\r\n                            ) : (\r\n                                <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                            )}\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateTeamTranslation = withTranslation('common')(CreateTeam);\r\n\r\nexport default CreateTeamTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Repository\\CreateRepository.js",["226"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/register.css';\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateRepository extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n\r\n        try {\r\n            axios.post('http://localhost:3300/repository/create', {\r\n                name: fields['name'],\r\n                category: fields['category'],\r\n                description: fields['description'],\r\n                userId: this.state.auth.userId,\r\n                dueDate: fields['dueDate']\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                let res = document.getElementById('serverResponse');\r\n                if(response.data.message === 'RepositoryCreateSuccess') {\r\n                    res.innerHTML = t('content.repositories.createRepository.actionResults.success');\r\n                    res.style.color = 'green';\r\n                } else if(response.data.message === 'RepositoryCreateFailure') {\r\n                    res.innerHTML = t('content.repositories.createRepository.actionResults.failure');\r\n                } else {\r\n                    res.innerHTML = response.data.message;\r\n                }\r\n                res.style.display = 'block';            \r\n            })\r\n            .catch(error => {\r\n                let sr = document.getElementById('serverResponse');\r\n                if(error) {\r\n                    if(error.response.data.message === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        sr.innerHTML = error;\r\n                        sr.style.display = 'block';\r\n                    }\r\n                }\r\n            }) \r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.auth !== undefined && this.auth !== null && this.auth !== '' && this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">Create new Repository</p><hr className=\"card-hr\" />\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <label htmlFor=\"name\">Repository name</label>\r\n                        <input onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                        <label htmlFor=\"category\">Category</label>\r\n                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                            <option value=\"Software Development\" default>Software Development</option>\r\n                            <option value=\"DevOps\">DevOps</option>\r\n                            <option value=\"Databases\">Databases</option>\r\n                            <option value=\"R&D\">R&D</option>\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span>\r\n                        <label htmlFor=\"description\">description</label>\r\n                        <textarea onChange={this.onChange.bind(this, 'description')} value={this.state.fields['description']} type=\"description\" className=\"\" name=\"description\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span>\r\n                        <label htmlFor=\"dueDate\">Due date</label>\r\n                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                            min=\"2021-02-01\" max=\"2022-12-31\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">Create</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>Reset</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">Cancel</Link></button>\r\n                        </div>\r\n                        <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateRepositoryTranslation = withTranslation('common')(CreateRepository);\r\n\r\nexport default CreateRepositoryTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Role\\CreateRole.js",["227"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/register.css';\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateRole extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n\r\n        try {\r\n            axios.post('http://localhost:3300/role/create', {\r\n                name: fields['name'],\r\n                category: fields['category'],\r\n                requirements: fields['requirements'],\r\n                userId: this.state.auth.userId,\r\n                dueDate: fields['dueDate']\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                let res = document.getElementById('serverResponse');\r\n                if(response.data.message === 'ProjectCreateSuccess') {\r\n                    res.innerHTML = t('content.project.createProject.actionResults.success');\r\n                    res.style.color = 'green';\r\n                } else if(response.data.message === 'ProjectCreateFailure') {\r\n                    res.innerHTML = t('content.project.createProject.actionResults.failure');\r\n                } else {\r\n                    res.innerHTML = response.data.message;\r\n                }\r\n                res.style.display = 'block';            \r\n            })\r\n            .catch(error => {\r\n                let sr = document.getElementById('serverResponse');\r\n                if(error) {\r\n                    if(error.response.data.message === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        sr.innerHTML = error;\r\n                        sr.style.display = 'block';\r\n                    }\r\n                }\r\n            }) \r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.auth !== undefined && this.auth !== null && this.auth !== '' && this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return(\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">Create new project</p><hr className=\"card-hr\" />\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <label htmlFor=\"name\">Project name</label>\r\n                        <input onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                        <label htmlFor=\"category\">Category</label>\r\n                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                            <option value=\"Software Development\" default>Software Development</option>\r\n                            <option value=\"DevOps\">DevOps</option>\r\n                            <option value=\"Databases\">Databases</option>\r\n                            <option value=\"R&D\">R&D</option>\r\n                        </select>\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span>\r\n                        <label htmlFor=\"requirements\">Requirements</label>\r\n                        <textarea onChange={this.onChange.bind(this, 'requirements')} value={this.state.fields['requirements']} type=\"requirements\" className=\"\" name=\"requirements\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"requirements\"]}</span>\r\n                        <label htmlFor=\"dueDate\">Due date</label>\r\n                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                            min=\"2021-02-01\" max=\"2022-12-31\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">Create</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>Reset</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">Cancel</Link></button>\r\n                        </div>\r\n                        <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateRoleTranslation = withTranslation('common')(CreateRole);\r\n\r\nexport default CreateRoleTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Repository\\RepositoryList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\UserList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Comment\\CreateComment.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Comment\\CommentList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CompanyList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Role\\RoleList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\NotFound.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Comment\\Comment.js",["228"],"import React from 'react';\r\nimport {Redirect} from 'react-router';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Comment extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`,\r\nwithCredentials: true\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return(\r\n                <h1>Comment</h1>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst CommentTranslation = withTranslation('common')(Comment);\r\n\r\nexport default CommentTranslation;\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\Company.js",["229"],"import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Company extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`,\r\n\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return <h1>Company</h1>\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst CompanyTranslation = withTranslation('common')(Company);\r\n\r\nexport default CompanyTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\Team.js",["230","231","232","233"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Repository\\Repository.js",["234"],"import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Repository extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return <h1>Repository</h1>\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst RepositoryTranslation = withTranslation('common')(Repository);\r\n\r\nexport default RepositoryTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Role\\Role.js",["235","236"],"import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Role extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        if(this.auth !== undefined && this.auth !== null && this.auth !== '' && this.auth.userId !== undefined && this.auth.userId !== null && this.auth.userId !== '' && this.auth.refreshToken !== undefined && this.auth.refreshToken !== null && this.auth.refreshToken !== '') {\r\n            return <h1>Role</h1>\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst RoleTranslation = withTranslation('common')(Role);\r\n\r\nexport default RoleTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\config\\axios.js",[],["237","238"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\User.js",["239","240"],"import React from 'react';\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport TaskList from '../Task/TaskList';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass User extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                user: null,\r\n                fields: {},\r\n                errors: {},\r\n                enableEdit: false,\r\n                allowSave: false,\r\n                serverResponse: null\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        }\r\n\r\n        this.getUserData();\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n\r\n        if(fields[field] === this.state.user[field]) {\r\n            this.setState({fields, errors, allowSave: false});\r\n        } else {\r\n            this.setState({fields, errors, allowSave: true});\r\n        }\r\n    }\r\n\r\n    resetForm() {\r\n        let fields = this.state.fields;\r\n        fields['firstname'] = this.state.user.firstname;\r\n        fields['lastname'] = this.state.user.lastname;\r\n        fields['username'] = this.state.user.username;\r\n        fields['position'] = this.state.user.position;\r\n        fields['company'] = this.state.user.company.name;\r\n        fields['avatar_url'] = this.state.user.avatar_url;\r\n        fields['email'] = this.state.user.email; \r\n        fields['phone'] = this.state.user.phone;\r\n\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        this.setState({fields, errors: {}, allowSave: false, serverResponse: null});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['firstname']) {\r\n            isValid = false;\r\n            errors['firstname'] = t('misc.phrases.field') + ' \\'' + t('content.register.firstname') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['firstname'] !== '') {\r\n            if(!fields['firstname'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/;\r\n                isValid = false;\r\n                errors['firstname'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['lastname']) {\r\n            isValid = false;\r\n            errors['lastname'] = t('misc.phrases.field') + ' \\'' + t('content.register.lastname') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['lastname'] !== '') {\r\n            if(!fields['lastname'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/;\r\n                isValid = false;\r\n                errors['lastname'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['username']) {\r\n            isValid = false;\r\n            errors['username'] = t('misc.phrases.field') + ' \\'' + t('content.register.username') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['username'] !== '') {\r\n            if(!fields['username'].match(/^[a-zA-Z0-9\\-_.]+$/)) {\r\n                let regex = /^[a-zA-Z0-9\\-_.]+$/;\r\n                isValid = false;\r\n                errors['username'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['email']) {\r\n            isValid = false;\r\n            errors['email'] = t('misc.phrases.field') + ' \\'' + t('content.register.email') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['email'] !== '') {\r\n            if(!fields['email'].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/) && !fields['email'].match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)) {\r\n                isValid = false;\r\n                errors['email'] = t('commonErrors.formValidation.emailNotValid');\r\n            }\r\n        }\r\n\r\n        if(!fields['phone']) {\r\n            isValid = false;\r\n            errors['phone'] = t('misc.phrases.field') + ' \\'' + t('content.register.phone') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['phone'] !== '') {\r\n            if(!fields['phone'].match(/^\\+?([0-9]{2})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3}?[-. ]?([0-9]{3}))$/) && !fields['phone'].match(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})$/) && !fields['phone'].match(/^([0-9]{9})$/)) {\r\n                let regex1 = 'yy xxx xxx xxx';\r\n                let regex2 = 'xxx xxx xxx';\r\n                let regex3 = 'xxxxxxxxx';\r\n                isValid = false;\r\n                errors['phone'] = t('commonErrors.formValidation.incorrectPhoneNumberFormat') + '\\n\\n' + regex1 + ', ' + regex2 + ' ' + t('misc.phrases.or') + ' ' + regex3;\r\n            }\r\n        }\r\n\r\n        if(!fields['position']) {\r\n            isValid = false;\r\n            errors['position'] = t('misc.phrases.field') + ' \\'' + t('content.register.position') + '\\' ' +  t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['position'] !== '') {\r\n            if(!fields['position'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,30}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,30}$/;\r\n                isValid = false;\r\n                errors['position'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(fields['company'] !== '' && fields['company'] !== '') {\r\n            if(!fields['company'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['company'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        } else if(!fields['company']) {\r\n            isValid = false;\r\n            errors['company'] = t('misc.phrases.field') + ' \\'' + t('content.register.company') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getUserData() {\r\n        let fields = this.state.fields;\r\n        \r\n        try {\r\n            await axios.post('http://localhost:3300/user/profile', \r\n            {\r\n                userId: this.props.location.state.userId\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== '' && response.data.user !== null) {\r\n                    this.setState({user: response.data.user});\r\n                    fields['firstname'] = this.state.user.firstname;\r\n                    fields['lastname'] = this.state.user.lastname;\r\n                    fields['username'] = this.state.user.username;\r\n                    fields['position'] = this.state.user.position;\r\n                    fields['company'] = this.state.user.company.name;\r\n                    fields['avatar_url'] = this.state.user.avatar_url;\r\n                    fields['email'] = this.state.user.email; \r\n                    fields['phone'] = this.state.user.phone;\r\n                    this.setState({fields});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        this.setState({serverResponse: error.response.data.error});\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/user/update',\r\n                {  \r\n                    userId: this.state.auth.userId,\r\n                    docId: this.state.user._id,\r\n                    userObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== '' && response.data.user !== null) {\r\n                        this.setState({user: response.data.user, serverResponse: t('content.user.actions.updateUser.actionResults.success')});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({serverResponse: error.response.data.error})\r\n                        }\r\n                    }\r\n                })\r\n            } catch(e) {\r\n                this.setState({ serverResponse: e.message});\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {t} = this.props;\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return(\r\n                <div>\r\n                    {this.state.user !== null ? (\r\n                    <div>\r\n                        <form id=\"form\" onSubmit={this.onFormSubmit}>\r\n                            <table className=\"tab-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>{t('content.user.fields.firstname')}</th>\r\n                                        <th>{t('content.user.fields.lastname')}</th>\r\n                                        <th>{t('content.user.fields.username')}</th>\r\n                                        <th>{t('content.user.fields.email')}</th>\r\n                                        <th>{t('content.user.fields.phone')}</th>\r\n                                        <th>{t('content.user.fields.position')}</th>\r\n                                        <th>{t('content.user.fields.company')}</th>\r\n                                        <th>{t('content.user.fields.avatarUrl')}</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <input onChange={this.onChange.bind(this, 'firstname')} value={this.state.fields['firstname']} type=\"firstname\" className=\"\" id=\"firstname\" name=\"firstname\" disabled={!this.state.enableEdit}/>\r\n                                            <span className=\"error-msg-span\">{this.state.errors[\"firstname\"]}</span>\r\n                                        </td>\r\n                                        <td>\r\n                                            <input onChange={this.onChange.bind(this, 'lastname')} value={this.state.fields['lastname']} type=\"lastname\" className=\"\" id=\"lastname\" name=\"lastname\" disabled={!this.state.enableEdit}/>\r\n                                            <span className=\"error-msg-span\">{this.state.errors[\"lastname\"]}</span>\r\n                                        </td>\r\n                                        <td>\r\n                                            <input onChange={this.onChange.bind(this, 'username')} value={this.state.fields['username']} type=\"username\" className=\"\" id=\"username\" name=\"username\" disabled={!this.state.enableEdit}/>\r\n                                            <span className=\"error-msg-span\">{this.state.errors[\"username\"]}</span>\r\n                                        </td>\r\n                                        <td>\r\n                                            <input onChange={this.onChange.bind(this, 'email')} value={this.state.fields['email']} type=\"email\" className=\"\" id=\"email\" name=\"email\" disabled={!this.state.enableEdit}/>\r\n                                            <span className=\"error-msg-span\">{this.state.errors[\"email\"]}</span>\r\n                                        </td>\r\n                                        <td>\r\n                                            <input onChange={this.onChange.bind(this, 'phone')} value={this.state.fields['phone']} type=\"phone\" className=\"\" id=\"phone\" name=\"phone\" disabled={!this.state.enableEdit}/>\r\n                                            <span className=\"error-msg-span\">{this.state.errors[\"phone\"]}</span>\r\n                                        </td>\r\n                                        <td>\r\n                                            <input onChange={this.onChange.bind(this, 'position')} value={this.state.fields['position']} type=\"position\" className=\"\" id=\"position\" name=\"position\" disabled={!this.state.enableEdit}/>\r\n                                            <span className=\"error-msg-span\">{this.state.errors[\"position\"]}</span>\r\n                                        </td>\r\n                                        <td>\r\n                                            <input onChange={this.onChange.bind(this, 'company')} value={this.state.fields['company']} type=\"company\" className=\"\" id=\"company\" name=\"company\" disabled={!this.state.enableEdit}/>\r\n                                            <span className=\"error-msg-span\">{this.state.errors[\"company\"]}</span>\r\n                                        </td>\r\n                                        <td>\r\n                                            <input nowrap=\"nowrap\" onChange={this.onChange.bind(this, 'avatar_url')} value={this.state.fields['avatar_url']} type=\"avatar_url\" className=\"\" id=\"avatar_url\" name=\"avatar_url\" disabled={!this.state.enableEdit}/>\r\n                                            <span className=\"error-msg-span\">{this.state.errors[\"avatar_url\"]}</span>\r\n                                        </td>\r\n                                    </tr>\r\n                                    {this.state.serverResponse !== null ? (\r\n                                        this.state.user !== null ? (\r\n                                            <tr>\r\n                                                <td colspan=\"8\" align=\"center\">\r\n                                                    <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse}</span>                                                            \r\n                                                </td>\r\n                                            </tr>\r\n                                        ) : (\r\n                                            <tr>\r\n                                                <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.team.actions.selectTeam.errorMessages.dataValidation.' + this.state.serverResponse)}</span>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    ) : (\r\n                                        null\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </form>\r\n                        {this.state.auth.userId === this.state.user._id ? (\r\n                            <div class=\"card-form-divider\">\r\n                                <button className=\"card-form-button\"><Link to='/dashboard'>{t('misc.actionDescription.return')}</Link></button>\r\n                                <button className=\"card-form-button\" form=\"form\" type=\"submit\" hidden={!this.state.enableEdit} disabled={!this.state.allowSave}>{t('misc.actionDescription.save')}</button>\r\n                                <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit}))}} hidden={this.state.enableEdit}>{t('misc.actionDescription.edit')}</button>\r\n                                <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit})); this.resetForm()}} hidden={!this.state.enableEdit}>{t('misc.actionDescription.cancel')}</button>\r\n                            </div>\r\n                        ) : (\r\n                            <div class=\"card-form-divider\">\r\n                                <button className=\"card-form-button\"><Link to='/dashboard'>{t('misc.actionDescription.return')}</Link></button>\r\n                            </div>\r\n                        )}\r\n\r\n                        <br /><hr /><br />\r\n\r\n                        <h2>{t('content.team.actions.selectTeam.associatedTasks')}</h2>\r\n                        <TaskList params={{ref: 'user', objId: this.state.user._id}} />\r\n                    </div>\r\n                ) : (\r\n                    <table className=\"tab-table\">\r\n                        {this.state.serverResponse !== null ? (\r\n                            this.state.serverResponse === 'unauthorized' ? (\r\n                                <tr>\r\n                                    <td colspan=\"8\" align=\"center\">\r\n                                        <tr><b>{t('commonErrors.' + this.state.serverResponse)}</b></tr>\r\n                                        <tr><button className=\"card-form-button\"><Link to='/dashboard'>{t('misc.actionDescription.return')}</Link></button></tr>\r\n                                    </td>\r\n                                </tr>\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colspan=\"8\" align=\"center\">{t('content.user.actions.selectUser.errorMessages.dataValidation.' + this.state.serverResponse)}</td>\r\n                                </tr>\r\n                                )\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colspan=\"8\" align=\"center\">-</td>\r\n                                </tr>\r\n                            )}\r\n                    </table>\r\n                    )}\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n    }    \r\n}\r\n\r\nconst UserTranslation = withTranslation('common')(User);\r\n\r\nexport default UserTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\UserAction.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Recent.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\Task.js",["241","242","243","244"],"import React from 'react';\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport Select, { createFilter } from 'react-select';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Task extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                task: null,\r\n                categories: [],\r\n                teams: [],\r\n                users: [],\r\n                projects: [],\r\n                statuses: ['To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                enableEdit: false,\r\n                allowSave: false,\r\n                serverResponse: null\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        }\r\n\r\n        this.getTeams();\r\n        this.getCategories();\r\n        this.getTask();\r\n        this.getUsers();\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;    \r\n\r\n        if(field === 'category') {\r\n            if(fields[field] === this.state.task[field].name) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        } else {\r\n            if(fields[field] === this.state.task[field]) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        }\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    resetForm() {\r\n        let fields = this.state.fields;\r\n        fields['name'] = this.state.task.name;\r\n        fields['description'] = this.state.task.description;\r\n        fields['category'] = this.state.task.category.name;\r\n        fields['teams'] = this.state.task.teams;\r\n        fields['status'] = this.state.task.status;\r\n        fields['project'] = this.state.task.project;\r\n        fields['assigned_user'] = this.state.task.assigned_user._id;\r\n        fields['dueDate'] = moment(this.state.task.dueDate).format('YYYY-MM-DD');\r\n\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        this.setState({fields, errors: {}, allowSave: false, serverResponse: null});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['teams'] || fields['teams'] === 'none') {\r\n            isValid = false;\r\n            errors['teams'] = t('misc.phrases.field') + ' \\'' + t('content.team.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('content.project.actions.createProject.errorMessages.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getProjects() {\r\n        try {\r\n            axios.post('http://localhost:3300/project/list', \r\n            {\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== undefined && response.data.projects !== null && response.data.projects.length > 0) {\r\n                    this.setState({projects: response.data.projects});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: error.response.data.error\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    async getCategories() {\r\n        await axios.post('http://localhost:3300/category/list', { category_type: 'task'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage();\r\n                } else {\r\n                    this.setState({serverResponse: error.response.data.error});\r\n                }\r\n            });\r\n    }\r\n\r\n    async getTeams() {\r\n        try {\r\n            await axios.get('http://localhost:3300/team/list', {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                    this.setState({teams: response.data.teams});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                } else {\r\n                    this.setState({\r\n                        serverResponse: error.response.data.error\r\n                    })\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    async getTask() {\r\n        let fields = this.state.fields;\r\n        try {\r\n            await axios.post('http://localhost:3300/task/details', \r\n            {\r\n                userId: this.state.auth.userId,\r\n                taskId: this.props.location.state.taskId\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== undefined || response.data.task !== null) {\r\n                    this.setState({\r\n                        task: response.data.task\r\n                    })\r\n                    fields['name'] = this.state.task.name;\r\n                    fields['description'] = this.state.task.description;\r\n                    fields['category'] = this.state.task.category.name;\r\n                    fields['teams'] = this.state.task.teams;\r\n                    fields['status'] = this.state.task.status;\r\n                    fields['project'] = this.state.task.project;\r\n                    fields['assigned_user'] = this.state.task.assigned_user._id;\r\n                    fields['dueDate'] = moment(this.state.task.dueDate).format('YYYY-MM-DD');\r\n                    this.setState({fields});\r\n                }          \r\n            }, {headers: this.headers, withCredentials: true})\r\n            .catch(error => {\r\n                if(error) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: error.response.data.error\r\n                        })\r\n                    }\r\n                }\r\n            })    \r\n        } catch(e) {\r\n            this.setState({\r\n                serverResponse: e.message\r\n            })\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        try {\r\n            await axios.post('http://localhost:3300/user/list', \r\n            {\r\n            }, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.users.length > 0 && response.data.users !== null) {\r\n                    this.setState({users: response.data.users});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage();\r\n                } else {\r\n                    this.setState({serverResponse: error.response.data.error});\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: e.message});\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/task/update', {\r\n                    userId: this.state.auth.userId,\r\n                    taskId: this.state.task._id,\r\n                    taskObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.task !== null) {\r\n                        this.setState({\r\n                            task: response.data.task,\r\n                            serverResponse: t('content.task.actions.updateTask.actionResults.success')\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        this.setState({serverResponse: error.response.data.error});\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: e.message});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return( \r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">{t('content.task.fields.overview')}</p><hr className=\"card-hr\" />\r\n                    {this.state.task !== null ? (\r\n                        <form id=\"form\" onSubmit={this.onFormSubmit}>\r\n                            <table className=\"tab-table\">\r\n                                <tr>\r\n                                    <th>{t('content.task.fields.name')}</th>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" disabled={!this.state.enableEdit} />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.task.fields.description')}</th>\r\n                                    <td>\r\n                                        <textarea onChange={this.onChange.bind(this, 'description')} cols=\"40\" rows=\"20\" value={this.state.fields['description']} type=\"description\" id=\"description\" name=\"description\" disabled={!this.state.enableEdit}/>\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.task.fields.category')}</th>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\" disabled={!this.state.enableEdit} >\r\n                                            <option selected value={this.state.task.category.name}>{this.state.task.category.name}</option>\r\n                                            {this.state.categories.length > 0 && (\r\n                                                this.state.categories.map((category, index) => {\r\n                                                    if(category._id !== this.state.task.category._id) {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>    \r\n                                    <th>{t('content.task.fields.project')}</th>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'project')} value={this.state.fields['project']} type=\"project\" className=\"\" name=\"project\" disabled={!this.state.enableEdit} >\r\n                                            <option selected value={this.state.task.project._id}>{this.state.task.project.name}</option>\r\n                                            {this.state.projects.length > 0 && (\r\n                                                this.state.projects.map((project, index) => {\r\n                                                    if(project._id !== this.state.task.project._id) {\r\n                                                        return <option value={project._id}>{project.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"project\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.task.fields.status')}</th>\r\n                                    <td>\r\n                                        <Select \r\n                                            options={this.state.statuses.map((status) => ({value: status, label: status}))} \r\n                                            value={this.state.fields['status']}\r\n                                            onChange={(value) => { \r\n                                                let fields = this.state.fields; \r\n                                                fields['status'] = value;\r\n                                                if(fields['status'] !== JSON.stringify(this.state.project.status)) {\r\n                                                    this.setState({allowSave: true})\r\n                                                }\r\n                                                this.setState({fields})}}\r\n                                            name=\"Status\"\r\n                                            defaultValue={this.state.fields['status']}\r\n                                            //filterOption={createFilter({stringify: option => `${option}`})}\r\n                                            placeholder={t('misc.actionDescription.setStatus')}\r\n                                            getOptionLabel={(option) => option} \r\n                                            getOptionValue={(option) => option}\r\n                                            noOptionsMessage={() => t('commonErrors.noStatusesAvailable')}\r\n                                            isDisabled={!this.state.enableEdit} />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    \r\n                                </tr>\r\n                                <tr>    \r\n                                    <th>{t('content.task.fields.assignedUser')}</th>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'assigned_user')} value={this.state.fields['assigned_user']} type=\"assigned_user\" className=\"\" name=\"assigned_user\" disabled={!this.state.enableEdit} >\r\n                                            <option selected value={this.state.task.assigned_user._id}>{this.state.task.assigned_user.username}</option>\r\n                                            {this.state.users.length > 0 && (\r\n                                                this.state.users.map((user, index) => {\r\n                                                    if(user._id !== this.state.task.assigned_user._id) {\r\n                                                        return <option value={user._id}>{user.username}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>    \r\n                                    <th>{t('content.task.fields.assignedTeams')}</th>\r\n                                    <td>\r\n                                        <Select \r\n                                            options={this.state.teams} \r\n                                            isMulti\r\n                                            value={this.state.fields['teams']}\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields;\r\n                                                fields['teams'] = value;\r\n                                                if(fields['teams'] !== this.state.task.teams) {\r\n                                                    this.setState({allowSave: true})\r\n                                                }\r\n                                                this.setState({fields});\r\n                                            }}\r\n                                            name=\"Teams\"\r\n                                            defaultValue={() => this.state.task.teams.map((team) => {return [team.name]})}\r\n                                            placeholder={t('misc.actionDescription.addTeam')}\r\n                                            getOptionLabel={(option) => option.name} \r\n                                            getOptionValue={(option) => option._id}\r\n                                            noOptionsMessage={() => t('commonErrors.noTeamsAvailable')}\r\n                                            isDisabled={!this.state.enableEdit} />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.dueDate')}</th>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                                            min=\"2021-02-01\" max=\"2022-12-31\" disabled={!this.state.enableEdit} />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                            </table>\r\n                        </form>\r\n                    ) : (\r\n                        <h3>{t('content.task.actions.selectTask.errorMessages.dataValidation.TaskNotFound')}</h3>\r\n                    )}\r\n                    <div class=\"card-form-divider\">\r\n                        <button className=\"card-form-button\"><Link to='/dashboard'>{t('misc.actionDescription.return')}</Link></button>\r\n                        <button className=\"card-form-button\" form=\"form\" type=\"submit\" hidden={!this.state.enableEdit} disabled={!this.state.allowSave}>{t('misc.actionDescription.save')}</button>\r\n                        <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit}))}} hidden={this.state.enableEdit}>{t('misc.actionDescription.edit')}</button>\r\n                        <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit})); this.resetForm()}} hidden={!this.state.enableEdit}>{t('misc.actionDescription.cancel')}</button>\r\n                    </div>\r\n                    {this.state.serverResponse !== null ? (\r\n                        this.state.task !== null ? (\r\n                            <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse}</span>\r\n                        ) : (\r\n                            <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.task.actions.updateTask.errorMessages.dataValidation.' + this.state.serverResponse)}</span>\r\n                        )\r\n                    ) : (\r\n                        <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                    )}\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst TaskTranslation = withTranslation('common')(Task);\r\n\r\nexport default TaskTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\CreateOrganization.js",["245","246","247","248","249","250"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\OrganizationList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\Organization.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\CreateUser.js",["251","252","253","254"],{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":14,"column":8,"nodeType":"261","messageId":"262","endLine":14,"endColumn":18},{"ruleId":"259","severity":1,"message":"263","line":51,"column":8,"nodeType":"261","messageId":"262","endLine":51,"endColumn":29},{"ruleId":"259","severity":1,"message":"264","line":4,"column":9,"nodeType":"261","messageId":"262","endLine":4,"endColumn":37},{"ruleId":"259","severity":1,"message":"264","line":4,"column":9,"nodeType":"261","messageId":"262","endLine":4,"endColumn":37},{"ruleId":"259","severity":1,"message":"265","line":5,"column":39,"nodeType":"261","messageId":"262","endLine":5,"endColumn":65},{"ruleId":"266","severity":1,"message":"267","line":90,"column":35,"nodeType":"268","messageId":"269","endLine":90,"endColumn":37},{"ruleId":"270","severity":1,"message":"271","line":91,"column":147,"nodeType":"272","messageId":"273","endLine":91,"endColumn":148,"suggestions":"274"},{"ruleId":"270","severity":1,"message":"271","line":91,"column":172,"nodeType":"272","messageId":"273","endLine":91,"endColumn":173,"suggestions":"275"},{"ruleId":"266","severity":1,"message":"267","line":100,"column":35,"nodeType":"268","messageId":"269","endLine":100,"endColumn":37},{"ruleId":"259","severity":1,"message":"276","line":81,"column":16,"nodeType":"261","messageId":"262","endLine":81,"endColumn":17},{"ruleId":"259","severity":1,"message":"277","line":6,"column":18,"nodeType":"261","messageId":"262","endLine":6,"endColumn":30},{"ruleId":"278","severity":1,"message":"279","line":295,"column":93,"nodeType":"280","messageId":"281","endLine":295,"endColumn":95},{"ruleId":"259","severity":1,"message":"282","line":163,"column":15,"nodeType":"261","messageId":"262","endLine":163,"endColumn":21},{"ruleId":"259","severity":1,"message":"283","line":6,"column":8,"nodeType":"261","messageId":"262","endLine":6,"endColumn":14},{"ruleId":"259","severity":1,"message":"282","line":214,"column":15,"nodeType":"261","messageId":"262","endLine":214,"endColumn":21},{"ruleId":"270","severity":1,"message":"271","line":93,"column":49,"nodeType":"272","messageId":"273","endLine":93,"endColumn":50,"suggestions":"284"},{"ruleId":"270","severity":1,"message":"271","line":93,"column":74,"nodeType":"272","messageId":"273","endLine":93,"endColumn":75,"suggestions":"285"},{"ruleId":"270","severity":1,"message":"271","line":94,"column":40,"nodeType":"272","messageId":"273","endLine":94,"endColumn":41,"suggestions":"286"},{"ruleId":"270","severity":1,"message":"271","line":94,"column":65,"nodeType":"272","messageId":"273","endLine":94,"endColumn":66,"suggestions":"287"},{"ruleId":"270","severity":1,"message":"288","line":118,"column":58,"nodeType":"272","messageId":"273","endLine":118,"endColumn":59,"suggestions":"289"},{"ruleId":"270","severity":1,"message":"288","line":118,"column":111,"nodeType":"272","messageId":"273","endLine":118,"endColumn":112,"suggestions":"290"},{"ruleId":"270","severity":1,"message":"291","line":118,"column":118,"nodeType":"272","messageId":"273","endLine":118,"endColumn":119,"suggestions":"292"},{"ruleId":"270","severity":1,"message":"291","line":118,"column":120,"nodeType":"272","messageId":"273","endLine":118,"endColumn":121,"suggestions":"293"},{"ruleId":"270","severity":1,"message":"288","line":126,"column":61,"nodeType":"272","messageId":"273","endLine":126,"endColumn":62,"suggestions":"294"},{"ruleId":"270","severity":1,"message":"288","line":126,"column":114,"nodeType":"272","messageId":"273","endLine":126,"endColumn":115,"suggestions":"295"},{"ruleId":"270","severity":1,"message":"291","line":126,"column":121,"nodeType":"272","messageId":"273","endLine":126,"endColumn":122,"suggestions":"296"},{"ruleId":"270","severity":1,"message":"291","line":126,"column":123,"nodeType":"272","messageId":"273","endLine":126,"endColumn":124,"suggestions":"297"},{"ruleId":"259","severity":1,"message":"276","line":139,"column":16,"nodeType":"261","messageId":"262","endLine":139,"endColumn":17},{"ruleId":"259","severity":1,"message":"282","line":140,"column":15,"nodeType":"261","messageId":"262","endLine":140,"endColumn":21},{"ruleId":"259","severity":1,"message":"282","line":154,"column":15,"nodeType":"261","messageId":"262","endLine":154,"endColumn":21},{"ruleId":"259","severity":1,"message":"276","line":102,"column":16,"nodeType":"261","messageId":"262","endLine":102,"endColumn":17},{"ruleId":"259","severity":1,"message":"276","line":102,"column":16,"nodeType":"261","messageId":"262","endLine":102,"endColumn":17},{"ruleId":"259","severity":1,"message":"298","line":4,"column":8,"nodeType":"261","messageId":"262","endLine":4,"endColumn":13},{"ruleId":"259","severity":1,"message":"298","line":4,"column":8,"nodeType":"261","messageId":"262","endLine":4,"endColumn":13},{"ruleId":"259","severity":1,"message":"282","line":226,"column":15,"nodeType":"261","messageId":"262","endLine":226,"endColumn":21},{"ruleId":"278","severity":1,"message":"279","line":298,"column":101,"nodeType":"280","messageId":"281","endLine":298,"endColumn":103},{"ruleId":"278","severity":1,"message":"279","line":311,"column":101,"nodeType":"280","messageId":"281","endLine":311,"endColumn":103},{"ruleId":"278","severity":1,"message":"279","line":323,"column":108,"nodeType":"280","messageId":"281","endLine":323,"endColumn":110},{"ruleId":"259","severity":1,"message":"298","line":4,"column":8,"nodeType":"261","messageId":"262","endLine":4,"endColumn":13},{"ruleId":"259","severity":1,"message":"298","line":4,"column":8,"nodeType":"261","messageId":"262","endLine":4,"endColumn":13},{"ruleId":"259","severity":1,"message":"299","line":6,"column":39,"nodeType":"261","messageId":"262","endLine":6,"endColumn":70},{"ruleId":"255","replacedBy":"300"},{"ruleId":"257","replacedBy":"301"},{"ruleId":"270","severity":1,"message":"271","line":111,"column":147,"nodeType":"272","messageId":"273","endLine":111,"endColumn":148,"suggestions":"302"},{"ruleId":"270","severity":1,"message":"271","line":111,"column":172,"nodeType":"272","messageId":"273","endLine":111,"endColumn":173,"suggestions":"303"},{"ruleId":"259","severity":1,"message":"277","line":6,"column":18,"nodeType":"261","messageId":"262","endLine":6,"endColumn":30},{"ruleId":"278","severity":1,"message":"279","line":336,"column":93,"nodeType":"280","messageId":"281","endLine":336,"endColumn":95},{"ruleId":"278","severity":1,"message":"279","line":352,"column":90,"nodeType":"280","messageId":"281","endLine":352,"endColumn":92},{"ruleId":"278","severity":1,"message":"279","line":395,"column":84,"nodeType":"280","messageId":"281","endLine":395,"endColumn":86},{"ruleId":"259","severity":1,"message":"299","line":7,"column":39,"nodeType":"261","messageId":"262","endLine":7,"endColumn":70},{"ruleId":"270","severity":1,"message":"288","line":87,"column":61,"nodeType":"272","messageId":"273","endLine":87,"endColumn":62,"suggestions":"304"},{"ruleId":"270","severity":1,"message":"288","line":87,"column":114,"nodeType":"272","messageId":"273","endLine":87,"endColumn":115,"suggestions":"305"},{"ruleId":"270","severity":1,"message":"291","line":87,"column":121,"nodeType":"272","messageId":"273","endLine":87,"endColumn":122,"suggestions":"306"},{"ruleId":"270","severity":1,"message":"291","line":87,"column":123,"nodeType":"272","messageId":"273","endLine":87,"endColumn":124,"suggestions":"307"},{"ruleId":"259","severity":1,"message":"282","line":112,"column":15,"nodeType":"261","messageId":"262","endLine":112,"endColumn":21},{"ruleId":"259","severity":1,"message":"308","line":4,"column":9,"nodeType":"261","messageId":"262","endLine":4,"endColumn":13},{"ruleId":"259","severity":1,"message":"298","line":5,"column":8,"nodeType":"261","messageId":"262","endLine":5,"endColumn":13},{"ruleId":"259","severity":1,"message":"299","line":7,"column":39,"nodeType":"261","messageId":"262","endLine":7,"endColumn":70},{"ruleId":"259","severity":1,"message":"276","line":48,"column":16,"nodeType":"261","messageId":"262","endLine":48,"endColumn":17},"no-native-reassign",["309"],"no-negated-in-lhs",["310"],"no-unused-vars","'UserAction' is defined but never used.","Identifier","unusedVar","'CreateTaskTranslation' is defined but never used.","'getJwtDataFromSessionStorage' is defined but never used.","'setJwtDataInSessionStorage' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["311","312"],["313","314"],"'t' is assigned a value but never used.","'createFilter' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'fields' is assigned a value but never used.","'Select' is defined but never used.",["315","316"],["317","318"],["319","320"],["321","322"],"Unnecessary escape character: \\+.",["323","324"],["325","326"],"Unnecessary escape character: \\/.",["327","328"],["329","330"],["331","332"],["333","334"],["335","336"],["337","338"],"'axios' is defined but never used.","'removeJwtDataFromSessionStorage' is defined but never used.",["309"],["310"],["339","340"],["341","342"],["343","344"],["345","346"],["347","348"],["349","350"],"'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"351","fix":"352","desc":"353"},{"messageId":"354","fix":"355","desc":"356"},{"messageId":"351","fix":"357","desc":"353"},{"messageId":"354","fix":"358","desc":"356"},{"messageId":"351","fix":"359","desc":"353"},{"messageId":"354","fix":"360","desc":"356"},{"messageId":"351","fix":"361","desc":"353"},{"messageId":"354","fix":"362","desc":"356"},{"messageId":"351","fix":"363","desc":"353"},{"messageId":"354","fix":"364","desc":"356"},{"messageId":"351","fix":"365","desc":"353"},{"messageId":"354","fix":"366","desc":"356"},{"messageId":"351","fix":"367","desc":"353"},{"messageId":"354","fix":"368","desc":"356"},{"messageId":"351","fix":"369","desc":"353"},{"messageId":"354","fix":"370","desc":"356"},{"messageId":"351","fix":"371","desc":"353"},{"messageId":"354","fix":"372","desc":"356"},{"messageId":"351","fix":"373","desc":"353"},{"messageId":"354","fix":"374","desc":"356"},{"messageId":"351","fix":"375","desc":"353"},{"messageId":"354","fix":"376","desc":"356"},{"messageId":"351","fix":"377","desc":"353"},{"messageId":"354","fix":"378","desc":"356"},{"messageId":"351","fix":"379","desc":"353"},{"messageId":"354","fix":"380","desc":"356"},{"messageId":"351","fix":"381","desc":"353"},{"messageId":"354","fix":"382","desc":"356"},{"messageId":"351","fix":"383","desc":"353"},{"messageId":"354","fix":"384","desc":"356"},{"messageId":"351","fix":"385","desc":"353"},{"messageId":"354","fix":"386","desc":"356"},{"messageId":"351","fix":"387","desc":"353"},{"messageId":"354","fix":"388","desc":"356"},{"messageId":"351","fix":"389","desc":"353"},{"messageId":"354","fix":"390","desc":"356"},{"messageId":"351","fix":"391","desc":"353"},{"messageId":"354","fix":"392","desc":"356"},{"messageId":"351","fix":"393","desc":"353"},{"messageId":"354","fix":"394","desc":"356"},"removeEscape",{"range":"395","text":"396"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"397","text":"398"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"399","text":"396"},{"range":"400","text":"398"},{"range":"401","text":"396"},{"range":"402","text":"398"},{"range":"403","text":"396"},{"range":"404","text":"398"},{"range":"405","text":"396"},{"range":"406","text":"398"},{"range":"407","text":"396"},{"range":"408","text":"398"},{"range":"409","text":"396"},{"range":"410","text":"398"},{"range":"411","text":"396"},{"range":"412","text":"398"},{"range":"413","text":"396"},{"range":"414","text":"398"},{"range":"415","text":"396"},{"range":"416","text":"398"},{"range":"417","text":"396"},{"range":"418","text":"398"},{"range":"419","text":"396"},{"range":"420","text":"398"},{"range":"421","text":"396"},{"range":"422","text":"398"},{"range":"423","text":"396"},{"range":"424","text":"398"},{"range":"425","text":"396"},{"range":"426","text":"398"},{"range":"427","text":"396"},{"range":"428","text":"398"},{"range":"429","text":"396"},{"range":"430","text":"398"},{"range":"431","text":"396"},{"range":"432","text":"398"},{"range":"433","text":"396"},{"range":"434","text":"398"},{"range":"435","text":"396"},{"range":"436","text":"398"},[3649,3650],"",[3649,3649],"\\",[3674,3675],[3674,3674],[3509,3510],[3509,3509],[3534,3535],[3534,3534],[3795,3796],[3795,3795],[3820,3821],[3820,3820],[5449,5450],[5449,5449],[5502,5503],[5502,5502],[5509,5510],[5509,5509],[5511,5512],[5511,5511],[6016,6017],[6016,6016],[6069,6070],[6069,6069],[6076,6077],[6076,6076],[6078,6079],[6078,6078],[4526,4527],[4526,4526],[4551,4552],[4551,4551],[3269,3270],[3269,3269],[3322,3323],[3322,3322],[3329,3330],[3329,3329],[3331,3332],[3331,3331]]