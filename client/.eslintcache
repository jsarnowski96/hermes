[{"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\index.js":"1","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\App.js":"2","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Contact.js":"3","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\About.js":"4","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Home.js":"5","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Register.js":"6","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Sidebar.js":"7","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Dashboard.js":"8","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Login.js":"9","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\Project.js":"10","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\services\\i18n.js":"11","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\jwtSessionStorage.js":"12","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\languageLocalStorage.js":"13","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\CreateProject.js":"14","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\CreateTask.js":"15","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\ProjectList.js":"16","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\TeamList.js":"17","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\TaskList.js":"18","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CreateCompany.js":"19","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\CreateTeam.js":"20","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\UserList.js":"21","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CompanyList.js":"22","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\NotFound.js":"23","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\Company.js":"24","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\Team.js":"25","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\User.js":"26","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\UserAction.js":"27","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Recent.js":"28","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\Task.js":"29","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\CreateOrganization.js":"30","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\OrganizationList.js":"31","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\Organization.js":"32","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\CreateUser.js":"33"},{"size":461,"mtime":1614099401268,"results":"34","hashOfConfig":"35"},{"size":4573,"mtime":1615544832919,"results":"36","hashOfConfig":"35"},{"size":528,"mtime":1614260771385,"results":"37","hashOfConfig":"35"},{"size":518,"mtime":1614260781078,"results":"38","hashOfConfig":"35"},{"size":2535,"mtime":1622054390177,"results":"39","hashOfConfig":"35"},{"size":14827,"mtime":1621507926831,"results":"40","hashOfConfig":"35"},{"size":4869,"mtime":1615936088860,"results":"41","hashOfConfig":"35"},{"size":3999,"mtime":1615939244308,"results":"42","hashOfConfig":"35"},{"size":8264,"mtime":1615936044402,"results":"43","hashOfConfig":"35"},{"size":37859,"mtime":1622051032163,"results":"44","hashOfConfig":"35"},{"size":410,"mtime":1609945680158,"results":"45","hashOfConfig":"35"},{"size":1300,"mtime":1615743909016,"results":"46","hashOfConfig":"35"},{"size":434,"mtime":1613071751491,"results":"47","hashOfConfig":"35"},{"size":29294,"mtime":1615940488893,"results":"48","hashOfConfig":"35"},{"size":34385,"mtime":1615940488893,"results":"49","hashOfConfig":"35"},{"size":8174,"mtime":1621370299704,"results":"50","hashOfConfig":"35"},{"size":9546,"mtime":1621366362142,"results":"51","hashOfConfig":"35"},{"size":11411,"mtime":1615940751785,"results":"52","hashOfConfig":"35"},{"size":15963,"mtime":1615935988565,"results":"53","hashOfConfig":"35"},{"size":19861,"mtime":1615940488892,"results":"54","hashOfConfig":"35"},{"size":9343,"mtime":1615936563405,"results":"55","hashOfConfig":"35"},{"size":0,"mtime":1613659382797,"results":"56","hashOfConfig":"35"},{"size":352,"mtime":1614260499342,"results":"57","hashOfConfig":"35"},{"size":1994,"mtime":1615743947097,"results":"58","hashOfConfig":"35"},{"size":42395,"mtime":1615940488892,"results":"59","hashOfConfig":"35"},{"size":24279,"mtime":1615936549201,"results":"60","hashOfConfig":"35"},{"size":4816,"mtime":1615933971630,"results":"61","hashOfConfig":"35"},{"size":5014,"mtime":1615936005526,"results":"62","hashOfConfig":"35"},{"size":44622,"mtime":1622050661369,"results":"63","hashOfConfig":"35"},{"size":15938,"mtime":1615936187245,"results":"64","hashOfConfig":"35"},{"size":0,"mtime":1614966998394,"results":"65","hashOfConfig":"35"},{"size":0,"mtime":1614966979388,"results":"66","hashOfConfig":"35"},{"size":1929,"mtime":1615745463595,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1ldetr1",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"70"},"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\index.js",[],["149","150"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\App.js",["151"],"import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport Sidebar from './Nav/Sidebar';\r\nimport About from './Nav/About';\r\nimport Contact from './Nav/Contact';\r\nimport Login from './Nav/Login';\r\nimport Register from './Nav/Register';\r\nimport Home from './Nav/Home';\r\n\r\nimport Dashboard from './Dashboard/Dashboard';\r\nimport Recent from './Dashboard/Recent';\r\nimport UserAction from './Dashboard/UserAction';\r\n\r\nimport Project from './Project/Project';\r\nimport Task from './Task/Task';\r\nimport Company from './Company/Company';\r\nimport Team from './Team/Team';\r\nimport User from './User/User';\r\nimport Organization from './Organization/Organization';\r\n\r\nimport ProjectList from './Project/ProjectList';\r\nimport TeamList from './Team/TeamList';\r\nimport CompanyList from './Company/CompanyList';\r\nimport UserList from './User/UserList';\r\nimport TaskList from './Task/TaskList';\r\nimport OrganizationList from './Organization/OrganizationList';\r\n\r\nimport CreateProject from './Project/CreateProject';\r\nimport CreateTask from './Task/CreateTask';\r\nimport CreateCompany from './Company/CreateCompany';\r\nimport CreateTeam from './Team/CreateTeam';\r\nimport CreateUser from './User/CreateUser';\r\nimport CreateOrganization from './Organization/CreateOrganization';\r\n\r\nimport NotFound from './NotFound';\r\n\r\nimport getLanguageFromLocalStorage from '../middleware/languageLocalStorage';\r\n\r\nimport '../assets/css/style.css';\r\n\r\nclass App extends React.Component {    \r\n    constructor(props) {\r\n        super(props);\r\n        const {i18n} = this.props;\r\n\r\n        this.state = {\r\n            toggleSlide: false\r\n        }\r\n\r\n        let lsLanguage = getLanguageFromLocalStorage();\r\n        if(i18n.language !== lsLanguage) {\r\n            i18n.changeLanguage(lsLanguage);\r\n        }\r\n        if(sessionStorage.getItem('renderLogoutBtn') === undefined || sessionStorage.getItem('renderLogoutBtn') === null) {\r\n            sessionStorage.setItem('renderLogoutBtn', false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <BrowserRouter>\r\n                <Sidebar />\r\n                <main>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route path=\"/login\" component={Login} />\r\n                        <Route path=\"/register\" component={Register} />\r\n                        <Route path=\"/about\" component={About} />\r\n                        <Route path=\"/contact\" component={Contact} />\r\n                        <Route path=\"/dashboard\" component={Dashboard} />\r\n                        <Route exact path=\"/recent\" component={Recent} />\r\n                        <Route exact path=\"/organization/details\" component={Organization} />\r\n                        <Route exact path=\"/organization/list\" component={OrganizationList} />\r\n                        <Route exact path=\"/organization/create\" component={CreateOrganization} />\r\n                        <Route exact path=\"/project/details\" component={Project} />\r\n                        <Route exact path=\"/project/list\" component={ProjectList} />\r\n                        <Route exact path=\"/project/create\" component={CreateProject} />\r\n                        <Route exact path=\"/team/details\" component={Team} />\r\n                        <Route exact path=\"/team/list\" component={TeamList} />\r\n                        <Route exact path=\"/team/create\" component={CreateTeam} />\r\n                        <Route exact path=\"/comment\" component={Comment} />\r\n                        <Route exact path=\"/company\" component={Company} />\r\n                        <Route exact path=\"/company/list\" component={CompanyList} />\r\n                        <Route exact path=\"/company/create\" component={CreateCompany} />\r\n                        <Route exact path=\"/task/list\" component={TaskList} />\r\n                        <Route exact path=\"/task/create\" component={CreateTask} />\r\n                        <Route exact path=\"/task/details\" component={Task} />\r\n                        <Route exact path=\"/user/profile\" component={User} />\r\n                        <Route exact path=\"/user/create\" component={CreateUser} />\r\n                        <Route exact path=\"/user/list\" component={UserList} />\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </main>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst AppTranslation = withTranslation('common')(App);\r\n\r\nexport default AppTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Contact.js",["152"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Contact extends React.Component {    \r\n    render() {\r\n        const {t} = this.props;\r\n        return(\r\n            <div className=\"\">\r\n                <hr /><h1 className=\"\">{t('content.contact.title')}</h1><hr />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ContactTranslation = withTranslation('common')(Contact);\r\n\r\nexport default ContactTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\About.js",["153"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass About extends React.Component {    \r\n    render() {\r\n        const {t} = this.props;\r\n        return(\r\n            <div className=\"\">\r\n                <hr /><h1 className=\"\">{t('content.about.title')}</h1><hr />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst AboutTranslation = withTranslation('common')(About);\r\n\r\nexport default AboutTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Home.js",["154"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Register.js",["155","156","157","158","159"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport '../../assets/css/register.css';\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                authenticated: true,\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            };\r\n        } else {\r\n            this.state = {\r\n                authenticated: false,\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['firstname']) {\r\n            isValid = false;\r\n            errors['firstname'] = t('misc.phrases.field') + ' \\'' + t('content.register.firstname') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['firstname'] !== undefined) {\r\n            if(!fields['firstname'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/;\r\n                isValid = false;\r\n                errors['firstname'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['lastname']) {\r\n            isValid = false;\r\n            errors['lastname'] = t('misc.phrases.field') + ' \\'' + t('content.register.lastname') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['lastname'] !== undefined) {\r\n            if(!fields['lastname'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/;\r\n                isValid = false;\r\n                errors['lastname'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['username']) {\r\n            isValid = false;\r\n            errors['username'] = t('misc.phrases.field') + ' \\'' + t('content.register.username') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['username'] !== undefined) {\r\n            if(!fields['username'].match(/^[a-zA-Z0-9\\-_.]+$/)) {\r\n                let regex = /^[a-zA-Z0-9\\-_.]+$/;\r\n                isValid = false;\r\n                errors['username'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['email']) {\r\n            isValid = false;\r\n            errors['email'] = t('misc.phrases.field') + ' \\'' + t('content.register.email') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['email'] != undefined) {\r\n            if(!fields['email'].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/) && !fields['email'].match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)) {\r\n                isValid = false;\r\n                errors['email'] = t('commonErrors.formValidation.emailNotValid');\r\n            }\r\n        }\r\n\r\n        if(!fields['phone']) {\r\n            isValid = false;\r\n            errors['phone'] = t('misc.phrases.field') + ' \\'' + t('content.register.phone') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['phone'] != undefined) {\r\n            if(!fields['phone'].match(/^\\+?([0-9]{2})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3}?[-. ]?([0-9]{3}))$/) && !fields['phone'].match(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})$/) && !fields['phone'].match(/^([0-9]{9})$/)) {\r\n                let regex1 = 'yy xxx xxx xxx';\r\n                let regex2 = 'xxx xxx xxx';\r\n                let regex3 = 'xxxxxxxxx';\r\n                isValid = false;\r\n                errors['phone'] = t('commonErrors.formValidation.incorrectPhoneNumberFormat') + '\\n\\n' + regex1 + ', ' + regex2 + ' ' + t('misc.phrases.or') + ' ' + regex3;\r\n            }\r\n        }\r\n\r\n        if(!fields['position']) {\r\n            isValid = false;\r\n            errors['position'] = t('misc.phrases.field') + ' \\'' + t('content.register.position') + '\\' ' +  t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['position'] !== undefined) {\r\n            if(!fields['position'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,30}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,30}$/;\r\n                isValid = false;\r\n                errors['position'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(fields['company'] !== undefined && fields['company'] !== '') {\r\n            if(!fields['company'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['company'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        // if(!fields['company']) {\r\n        //     isValid = false;\r\n        //     errors['company'] = t('misc.phrases.field') + ' \\'' + t('content.register.company') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        // }\r\n\r\n        if(!fields['password']) {\r\n            isValid = false;\r\n            errors['password'] = t('misc.phrases.field') + ' \\'' + t('content.register.password') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['password'] !== undefined) {\r\n            if(fields['password'].length < 6) {\r\n                isValid = false;\r\n                errors['password'] = t('commonErrors.formValidation.passwordTooShort');\r\n            }\r\n            if(fields['password'] !== fields['confirm']) {\r\n                isValid = false;\r\n                errors['password'] = t('commonErrors.formValidation.passwordsDoNotMatch');\r\n            }\r\n        }\r\n\r\n        if(!fields['confirm']) {\r\n            isValid = false;\r\n            errors['confirm'] = t('commonErrors.formValidation.confirmPasswordIsEmpty');\r\n        } else if(fields['confirm'] !== undefined) {\r\n            if(fields['confirm'] !== fields['password']) {\r\n                isValid = false;\r\n                errors['confirm'] = t('commonErrors.formValidation.passwordsDoNotMatch');\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/register', {\r\n                    firstname: fields['firstname'],\r\n                    lastname: fields['lastname'],\r\n                    username: fields['username'],\r\n                    email: fields['email'],\r\n                    phone: fields['phone'],\r\n                    position: fields['position'],\r\n                    company: fields['company'],\r\n                    password: fields['password']\r\n                }).then((response) => {\r\n                    if(response !== undefined) {\r\n                        if(response.data.message === 'UserRegistered') {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    content: response.data.message\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.content\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({\r\n                    serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n        \r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        return(\r\n            <div className=\"card\">\r\n                <p className=\"card-title\">{t('content.register.title')}</p><hr className=\"card-hr\" />\r\n                <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                    <label htmlFor=\"firstname\">{t('content.register.firstname')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'firstname')} value={this.state.fields['firstname']} type=\"firstname\" className=\"\" name=\"firstname\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"firstname\"]}</span>\r\n                    <label htmlFor=\"lastname\">{t('content.register.lastname')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'lastname')} value={this.state.fields['lastname']} type=\"lastname\" className=\"\" name=\"lastname\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"lastname\"]}</span>\r\n                    <label htmlFor=\"username\">{t('content.register.username')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'username')} value={this.state.fields['username']} type=\"username\" className=\"\" name=\"username\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"username\"]}</span>\r\n                    <label htmlFor=\"email\">{t('content.register.email')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'email')} value={this.state.fields['email']} type=\"email\" className=\"\" name=\"email\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"email\"]}</span>\r\n                    <label htmlFor=\"phone\">{t('content.register.phone')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'phone')} value={this.state.fields['phone']} type=\"phone\" className=\"\" name=\"phone\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"phone\"]}</span>\r\n                    <label htmlFor=\"position\">{t('content.register.position')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'position')} value={this.state.fields['position']} type=\"position\" className=\"\" name=\"position\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"position\"]}</span>\r\n                    <label htmlFor=\"company\">{t('content.register.company')}</label>\r\n                    <input onChange={this.onChange.bind(this, 'company')} value={this.state.fields['company']} type=\"company\" className=\"\" name=\"company\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"company\"]}</span>\r\n                    <label htmlFor=\"password\">{t('content.register.password')}</label>\r\n                    <input type=\"password\" onChange={this.onChange.bind(this, 'password')} value={this.state.fields['password']} className=\"\" id=\"password\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"password\"]}</span>\r\n                    <label htmlFor=\"confirm\">{t('content.register.confirm')}</label>\r\n                    <input type=\"password\" onChange={this.onChange.bind(this, 'confirm')} value={this.state.fields['confirm']} className=\"\" id=\"confirm\" />\r\n                    <span className=\"error-msg-span\">{this.state.errors[\"confirm\"]}</span>\r\n                    <div class=\"card-form-divider\">\r\n                        <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.register')}</button>\r\n                        <button type=\"reset\" onClick={this.resetForm} className=\"card-form-button\" >{t('misc.actionDescription.reset')}</button>\r\n                        <button type=\"button\" className=\"card-form-button\"><Link to=\"/\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                    </div>\r\n                    {this.state.serverResponse.content !== null ? (\r\n                        this.state.serverResponse.content === \"UserRegistered\" ? (\r\n                            <span className=\"error-msg-span\" style={{color: 'green', display: 'block'}} id=\"serverResponse\">{t('content.register.success')}</span>\r\n                        ) : this.state.serverResponse.content === \"CompanyNotFound\" ? (\r\n                            <span className=\"error-msg-span\" style={{color: 'green', display: 'block'}} id=\"serverResponse\">{t('content.company.actions.selectCompany.errorMessages.CompanyNotFound')}</span>\r\n                        ) : (\r\n                            <span className=\"error-msg-span\" id=\"serverResponse\">{this.state.serverResponse.content}</span>\r\n                        )\r\n                    ) : (\r\n                        <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                    )}\r\n                </form>\r\n                <p className=\"card-form-reminder\">{t('content.register.loginTip')} <Link to=\"/login\">{t('content.register.loginLink')}</Link></p>\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nconst RegisterTranslation = withTranslation('common')(Register);\r\n\r\nexport default RegisterTranslation;\r\n\r\n// TODO: FIX FORM VALIDATION MESSAGES DISPLAY !!!","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Sidebar.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Dashboard.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Login.js",["160"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, setJwtDataInSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                authenticated: true,\r\n                redirected: false,\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        } else {\r\n            if(this.props.location.state !== undefined && this.props.location.state !== null && this.props.location.state !== '' && this.props.location.state.redirected !== null && this.props.location.state.redirected !== undefined && this.props.location.state.authenticated !== null && this.props.location.state.authenticated !== undefined) {\r\n                this.state = {\r\n                    authenticated: this.props.location.state.authenticated,\r\n                    redirected: this.props.location.state.redirected,\r\n                    serverResponse: {\r\n                        origin: null,\r\n                        content: null\r\n                    },\r\n                    fields: {},\r\n                    errors: {}\r\n                }\r\n            } else {\r\n                this.state = {\r\n                    authenticated: null,\r\n                    redirected: false,\r\n                    serverResponse: {\r\n                        origin: null,\r\n                        content: null\r\n                    },\r\n                    fields: {},\r\n                    errors: {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['login']) {\r\n            isValid = false;\r\n            errors['login'] = t('misc.phrases.field') + ' \\'' + t('content.login.login') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['login'] !== undefined) {\r\n            if(!fields['login'].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/) && !fields['login'].match(/^[a-zA-Z0-9\\-_.]+$/)) {\r\n                isValid = false;\r\n                errors['login'] = t('content.login.errorMessages.loginNotValid');\r\n            }\r\n        }\r\n\r\n        if(!fields['password']) {\r\n            isValid = false;\r\n            errors['password'] = t('misc.phrases.field') + ' \\'' + t('content.login.password') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/auth/login', \r\n                {\r\n                    login: fields['login'],\r\n                    password: fields['password'],\r\n                }, \r\n                {\r\n                    auth: \r\n                    {\r\n                        username: fields['login'],\r\n                        password: fields['password']\r\n                    }\r\n            }).then((response) => {\r\n                if(response.data.user._id !== undefined && response.data.user._id !== '' && response.data.user._id !== null && response.data.accessToken !== undefined && response.data.accessToken !== '' && response.data.accessToken !== null) {\r\n                    if(this.jwt === null || this.jwt === undefined) {\r\n                        setJwtDataInSessionStorage(response.data.user._id, response.data.accessToken);\r\n                        this.jwt = getJwtDataFromSessionStorage();\r\n                    }\r\n\r\n                    if(this.state.authenticated !== true) {\r\n                        this.setState({ authenticated: true, redirected: false});\r\n                    }\r\n                    sessionStorage.setItem('renderLogoutBtn', true);\r\n                };\r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined) {\r\n                    this.setState({\r\n                        serverResponse: {\r\n                            origin: error.response.data.origin,\r\n                            content: error.response.data.error\r\n                        }, authenticated: false});\r\n                }\r\n            });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const{t} = this.props;\r\n\r\n        if(this.state.authenticated === true && this.jwt !== null) {\r\n            return(\r\n                <Redirect to=\r\n                   {{ \r\n                        pathname: '/dashboard'\r\n                   }} \r\n                />\r\n            )\r\n        } else {\r\n            return(\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\">{t('content.login.title')}</p><hr className=\"card-hr\" />\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <label htmlFor=\"login\">{t('content.login.login')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'login')} value={this.state.fields['login']} type=\"login\" className=\"\" id=\"login\" name=\"login\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"login\"]}</span>\r\n                        <label htmlFor=\"password\">{t('content.login.password')}</label>\r\n                        <input onChange={this.onChange.bind(this, 'password')} value={this.state.fields['password']} type=\"password\" className=\"\" id=\"password\" name=\"password\" />\r\n                        <span className=\"error-msg-span\">{this.state.errors[\"password\"]}</span>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.login')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                        {!this.state.authenticated && this.state.redirected ? (\r\n                            <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('commonErrors.unauthorized')}</span>\r\n                        ) : (\r\n                            this.state.serverResponse.content !== null ? (\r\n                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.login.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                            ) : (\r\n                                <span className=\"error-msg-span\" id=\"serverResponse\"></span>\r\n                            )\r\n                        )}\r\n                    </form>\r\n                    <p className=\"card-form-reminder\">{t('content.login.registerTip')} <Link to=\"/register\">{t('content.login.registerLink')}</Link></p>\r\n                </div>\r\n            )\r\n        }\r\n    }    \r\n}\r\n\r\nconst LoginTranslation = withTranslation('common')(Login);\r\n\r\nexport default LoginTranslation;\r\n\r\n// TODO 18.01 - FIX REACT ROUTER/REDIRECT ISSUE WITH LOGIN/DASHBOARD\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\Project.js",["161","162"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\services\\i18n.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\jwtSessionStorage.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\languageLocalStorage.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\CreateProject.js",["163"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateProject extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                categories: [],\r\n                organizations: [],\r\n                teams: [],\r\n                statuses: [ 'To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getCategoryList();\r\n        this.getTeamList();\r\n        this.getOrganizationList();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        if(field === 'restricted_access') {\r\n            fields[field] = event.target.checked;\r\n        } else {\r\n            fields[field] = event.target.value;       \r\n        }\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['organization'] || fields['organization'] === 'none') {\r\n            isValid = false;\r\n            errors['organization'] = t('misc.phrases.field') + ' \\'' + t('content.organization.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['teams'] || fields['teams'] === 'none') {\r\n            isValid = false;\r\n            errors['teams'] = t('misc.phrases.field') + ' \\'' + t('content.team.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getOrganizationList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/organization/list',\r\n                    {\r\n                        ref: 'company',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                            this.setState({organizations: response.data.organizations});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({\r\n                        serverResponse: {\r\n                            origin: 'axios',\r\n                            content: e.message\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/organization/list',\r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                            this.setState({organizations: response.data.organizations});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/organization/list',\r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                        this.setState({organizations: response.data.organizations});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getCategoryList() {\r\n        await axios.post('/category/list', { category_type: 'project'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    async getTeamList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/team/list',\r\n                    {\r\n                        ref: 'user',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/team/list',\r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/team/list',\r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                        this.setState({teams: response.data.teams});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n        this.setState({serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/project/create', {\r\n                    userId: this.state.auth.userId,\r\n                    projectObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.project !== null) {\r\n                        this.setState({project: response.data.project, serverResponse: {\r\n                            origin: response.data.origin,\r\n                            content: t('content.project.actions.createProject.actionResults.success')\r\n                        }})\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <div>\r\n                    <h2>{t('content.project.actions.createProject.actionTitle')}</h2>\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <table className=\"tab-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.name')}</th>\r\n                                    <th>{t('content.project.fields.category')}</th>\r\n                                    <th>{t('content.project.fields.associatedTeams')}</th>\r\n                                    <th>{t('content.project.fields.organization')}</th>\r\n                                    <th>{t('content.project.fields.status')}</th>\r\n                                    <th>{t('content.project.fields.dueDate')}</th>\r\n                                    <th>{t('content.project.fields.restrictedAccess')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                                            {this.state.categories.length > 0 && (\r\n                                                this.state.categories.map((category, index) => {\r\n                                                    if(index === 0) {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    } else {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Select \r\n                                                options={this.state.teams} \r\n                                                isMulti\r\n                                                value={this.state.fields['teams']}\r\n                                                onChange={(value) => {\r\n                                                    let fields = this.state.fields;\r\n                                                    fields['teams'] = value;\r\n                                                    this.setState({fields});\r\n                                                }}\r\n                                                name=\"Teams\"\r\n                                                //defaultValue={() => this.state.project.teams.map((team) => {return [team.name]})}\r\n                                                placeholder={t('misc.actionDescription.addTeam')}\r\n                                                getOptionLabel={(option) => option.name} \r\n                                                getOptionValue={(option) => option._id}\r\n                                                noOptionsMessage={() => t('commonErrors.noTeamsAvailable')}\r\n                                                />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'organization')} value={this.state.fields['organization']} type=\"organization\" className=\"\" name=\"organization\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectOrganization')}</option>\r\n                                            {this.state.organizations.length > 0 && (\r\n                                                this.state.organizations.map((organization, index) => {\r\n                                                    return <option value={organization.name}>{organization.name}</option>\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'status')} value={this.state.fields['status']} type=\"status\" className=\"\" name=\"status\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectStatus')}</option>\r\n                                            {this.state.statuses.map((status, index) => {\r\n                                                if(index === 0) {\r\n                                                    return <option value={status}>{status}</option>\r\n                                                } else {\r\n                                                    return <option value={status}>{status}</option>\r\n                                                }\r\n                                            })}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                                            min=\"2021-02-01\" max=\"2022-12-31\" />\r\n                                        \r\n                                    </td>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'restrictedAccess')} value={this.state.fields['restrictedAccess']} type=\"checkbox\" className=\"\" name=\"restrictedAccess\" />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"organization\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"7\">{t('content.project.fields.description')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colSpan=\"7\">\r\n                                        <JoditEditor\r\n                                            ref={this.state.fields['description']}\r\n                                            value={this.state.fields['description']}\r\n                                            \r\n                                            tabIndex={1} // tabIndex of textarea\r\n                                            onChange={(value) => {let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['description'] = value; \r\n                                                errors['description'] = '';\r\n                                                this.setState({fields, errors})}}\r\n                                            //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                        />\r\n                                        \r\n                                    </td>\r\n                                </tr>\r\n                                <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                {this.state.serverResponse.content !== null ? (\r\n                                    this.state.user !== null ? (\r\n                                        <tr>\r\n                                            <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.project.actions.createProject.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                        \r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateProjectTranslation = withTranslation('common')(CreateProject);\r\n\r\nexport default CreateProjectTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\CreateTask.js",["164"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateTask extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                categories: [],\r\n                teams: [],\r\n                projects: [],\r\n                users: [],\r\n                statuses: [ 'To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getCategoryList();\r\n        this.getProjectList();\r\n        this.getTeamList();\r\n        this.getUserList();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('description').defaultValue = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;       \r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n        \r\n\r\n        if(!fields['projectId'] || fields['projectId'] === 'none') {\r\n            isValid = false;\r\n            errors['project'] = t('misc.phrases.field') + ' \\'' + t('content.task.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getTeamList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/team/list', \r\n                    {\r\n                        ref: 'user',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/team/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/team/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                        this.setState({teams: response.data.teams});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getUserList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: 'company',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/user/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.users.length > 0 && response.data.users !== null) {\r\n                        this.setState({users: response.data.users});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    async getCategoryList() {\r\n        await axios.post('/category/list', { category_type: 'task'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    async getProjectList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    axios.post('/project/list', \r\n                    {\r\n                        ref: 'company',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response !== undefined && response.data.projects !== null && response.data.projects.length > 0) {\r\n                            this.setState({projects: response.data.projects});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    axios.post('/project/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response !== undefined && response.data.projects !== null && response.data.projects.length > 0) {\r\n                            this.setState({projects: response.data.projects});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                axios.post('/project/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.projects !== null && response.data.projects.length > 0) {\r\n                        this.setState({projects: response.data.projects});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/task/create', {\r\n                    userId: this.state.auth.userId,\r\n                    taskObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.task !== null) {\r\n                        this.setState({task: response.data.task, serverResponse: {\r\n                            origin: response.data.origin,\r\n                            content: t('content.task.actions.createTask.actionResults.success')\r\n                        }})\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <div>\r\n                    <h2>{t('content.task.actions.createTask.actionTitle')}</h2>\r\n                    <form className=\"card-form\" id=\"form\" onSubmit={this.onFormSubmit}>\r\n                    <table className=\"tab-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{t('content.task.fields.name')}</th>\r\n                                    <th>{t('content.task.fields.category')}</th>\r\n                                    <th>{t('content.task.fields.project')}</th>\r\n                                    <th>{t('content.task.fields.assignedUser')}</th>\r\n                                    <th>{t('content.task.fields.assignedTeams')}</th>\r\n                                    <th>{t('content.task.fields.status')}</th>\r\n                                    <th>{t('content.task.fields.dueDate')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                                            {this.state.categories.length > 0 && (\r\n                                                this.state.categories.map((category, index) => {\r\n                                                    if(index === 0) {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    } else {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'projectId')} value={this.state.fields['projectId']} type=\"projectId\" className=\"\" name=\"projectId\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectProject')}</option>\r\n                                            {this.state.projects.length > 0 && (\r\n                                                this.state.projects.map((project, index) => {\r\n                                                    if(index === 0) {\r\n                                                        return <option value={project._id}>{project.name}</option>\r\n                                                    } else {\r\n                                                        return <option value={project._id}>{project.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'assigned_user')} value={this.state.fields['assigned_user']} type=\"assigned_user\" className=\"\" name=\"assigned_user\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectUser')}</option>\r\n                                            {this.state.users.length > 0 && (\r\n                                                this.state.users.map((user, index) => {\r\n                                                    if(index === 0) {\r\n                                                        return <option value={user._id}>{user.username}</option>\r\n                                                    } else {\r\n                                                        return <option value={user._id}>{user.username}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Select \r\n                                            options={this.state.teams} \r\n                                            isMulti\r\n                                            value={this.state.fields['teams']}\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields;\r\n                                                let errors = this.state.errors;\r\n                                                fields['teams'] = value;\r\n                                                errors['teams'] = '';\r\n                                                this.setState({fields, errors});\r\n                                            }}\r\n                                            name=\"Teams\"\r\n                                            placeholder={t('misc.actionDescription.addTeam')}\r\n                                            getOptionLabel={(option) => option.name} \r\n                                            getOptionValue={(option) => option._id}\r\n                                            noOptionsMessage={() => t('commonErrors.noTeamsAvailable')}\r\n                                            />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'status')} value={this.state.fields['status']} type=\"status\" className=\"\" name=\"status\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectStatus')}</option>\r\n                                            {this.state.statuses.map((status, index) => {\r\n                                                if(index === 0) {\r\n                                                    return <option value={status}>{status}</option>\r\n                                                } else {\r\n                                                    return <option value={status}>{status}</option>\r\n                                                }\r\n                                            })}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                                            min=\"2021-02-01\" max=\"2022-12-31\" />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"projectId\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"assigned_user\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr><th colspan=\"7\">{t('content.task.fields.description')}</th></tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colspan=\"7\">\r\n                                        <JoditEditor\r\n                                            ref={this.state.fields['description']}\r\n                                            value={this.state.fields['description']}\r\n                                            tabIndex={1} // tabIndex of textarea\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['description'] = value; \r\n                                                errors['description'] = '';\r\n                                                this.setState({fields, errors})}}\r\n                                            //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                {this.state.serverResponse.content !== null ? (\r\n                                    this.state.user !== null ? (\r\n                                        <tr>\r\n                                            <td colspan=\"7\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colspan=\"7\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.task.actions.createTask.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </form>\r\n                    <div class=\"card-form-divider\">\r\n                        <button type=\"submit\" form=\"form\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                        <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                        <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateTaskTranslation = withTranslation('common')(CreateTask);\r\n\r\nexport default CreateTaskTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\ProjectList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\TeamList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\TaskList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CreateCompany.js",["165","166","167","168","169","170","171","172","173","174","175","176","177","178"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/register.css';\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateCompany extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        document.getElementById('description').defaultValue = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n        this.setState({fields});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.company.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.company.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['email']) {\r\n            isValid = false;\r\n            errors['email'] = t('misc.phrases.field') + ' \\'' + t('content.company.fields.email') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['email'] !== undefined) {\r\n            if(!fields['email'].match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/) && !fields['email'].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\r\n                let regex1 = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                let regex2 = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n                isValid = false;\r\n                errors['email'] = t('commonErrors.formValidation.emailNotValid') + '\\n\\n' + regex1 + ', ' + regex2;\r\n            }\r\n        }\r\n\r\n        if(!fields['phone']) {\r\n            isValid = false;\r\n            errors['phone'] = t('misc.phrases.field') + ' \\'' + t('content.company.fields.phone') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['phone'] !== undefined) {\r\n            if(!fields['phone'].match(/^\\+?([0-9]{2})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3}?[-. ]?([0-9]{3}))$/) && !fields['phone'].match(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})$/) && !fields['phone'].match(/^([0-9]{9})$/)) {\r\n                let regex1 = 'yy xxx xxx xxx';\r\n                let regex2 = 'xxx xxx xxx';\r\n                let regex3 = 'xxxxxxxxx';\r\n                isValid = false;\r\n                errors['phone'] = t('commonErrors.formValidation.incorrectPhoneNumberFormat') + '\\n\\n' + regex1 + ', ' + regex2 + ' ' + t('misc.phrases.or') + ' ' + regex3;\r\n            }\r\n        }\r\n\r\n        if(!fields['website']) {\r\n            isValid = false;\r\n            errors['website'] = t('misc.phrases.field') + '\\'' + t('content.company.fields.website') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['website'] !== undefined) {\r\n            if(!fields['website'].match(/[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&\\/\\/=]*)?/gi)) {\r\n                //let regex = /^\\((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?$/;\r\n                isValid = false;\r\n                errors['website'] = t('commonErrors.formValidation.InvalidUrlFormat');\r\n            }\r\n        }\r\n\r\n        if(fields['avatar_url'] !== undefined && fields['avatar_url'] !== '') {\r\n            if(!fields['avatar_url'].match(/[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&\\/\\/=]*)?/gi)) {\r\n                isValid = false;\r\n                errors['avatar_url'] = t('commonErrors.formValidation.InvalidUrlFormat');\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('http://localhost:3300/company/create', {\r\n                    userId: this.state.auth.userId,\r\n                    companyObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.company !== null) {\r\n                        this.setState({\r\n                            company: response.data.company,\r\n                            serverResponse: {\r\n                                origin: response.data.origin,\r\n                                content: t('content.company.actionc.createCompany.actionResults.success')\r\n                            }\r\n                        })\r\n                    }      \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                })    \r\n            } catch(e) {\r\n                this.setState({\r\n                    serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <div>\r\n                    <h2>{t('content.company.actions.createCompany.actionTitle')}</h2>\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <table className=\"tab-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{t('content.company.fields.name')}</th>\r\n                                    <th>{t('content.company.fields.email')}</th>\r\n                                    <th>{t('content.company.fields.phone')}</th>\r\n                                    <th>{t('content.company.fields.website')}</th>\r\n                                    <th>{t('content.company.fields.avatarUrl')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.enterEmail')} onChange={this.onChange.bind(this, 'email')} value={this.state.fields['email']} type=\"email\" className=\"\" name=\"email\" />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"email\"]}</span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.enterPhone')} onChange={this.onChange.bind(this, 'phone')} value={this.state.fields['phone']} type=\"phone\" className=\"\" name=\"phone\" />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"phone\"]}</span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.enterWebsite')} onChange={this.onChange.bind(this, 'website')} value={this.state.fields['website']} type=\"website\" className=\"\" name=\"website\" />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"website\"]}</span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'avatar_url')} value={this.state.fields['avatar_url']} type=\"avatar_url\" className=\"\" name=\"avatar_url\" />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"avatar_url\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"6\">{t('content.company.fields.description')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colSpan=\"6\">\r\n                                        <JoditEditor\r\n                                            ref={this.state.fields['description']}\r\n                                            value={this.state.fields['description']}\r\n                                            tabIndex={1} // tabIndex of textarea\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['description'] = value; \r\n                                                errors['description'] = '';\r\n                                                this.setState({fields, errors})}}\r\n                                            //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                        />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                                {this.state.serverResponse.content !== null ? (\r\n                                    this.state.user !== null ? (\r\n                                        <tr>\r\n                                            <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.company.actions.createCompany.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateCompanyTranslation = withTranslation('common')(CreateCompany);\r\n\r\nexport default CreateCompanyTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\CreateTeam.js",["179"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateTeam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                user: null,\r\n                categories: [],\r\n                organizations: [],\r\n                team: null,\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getUser();\r\n        this.getCategoryList();\r\n        this.getOrganizationList();\r\n        this.getUserList();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['members'] || fields['members'] === 'none') {\r\n            isValid = false;\r\n            errors['members'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.members') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['organization'] || fields['organization'] === 'none') {\r\n            isValid = false;\r\n            errors['organization'] = t('misc.phrases.field') + ' \\'' + t('content.organization.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getUser() {\r\n        let fields = this.state.fields;\r\n\r\n        await axios.post('/user/profile', { userId: this.state.auth.userId}, {headers: this.headers, withCredentials: true})\r\n        .then((response) => {\r\n            if(response !== undefined) {\r\n                fields['members'] = response.data.user;\r\n                this.setState({fields, user: response.data.user});\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            if(error.response.data.error === 'JwtTokenExpired') {\r\n                removeJwtDataFromSessionStorage()\r\n            }\r\n            \r\n            this.setState({\r\n                serverResponse: {\r\n                    origin: error.response.data.origin,\r\n                    content: error.response.data.error\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async getCategoryList() {\r\n        try {\r\n            await axios.post('/category/list', { category_type: 'team'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                }\r\n                \r\n                this.setState({\r\n                    serverResponse: {\r\n                        origin: error.response.data.origin,\r\n                        content: error.response.data.error\r\n                    }\r\n                })\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n        \r\n    }\r\n\r\n    async getUserList() {\r\n        try {\r\n            await axios.post('/user/list', \r\n            {\r\n                ref: 'company',\r\n                objId: this.state.auth.userId\r\n            }, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.users.length > 0 && response.data.users !== null) {\r\n                    this.setState({users: response.data.users});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n    }\r\n\r\n    async getOrganizationList() {\r\n        try {\r\n            await axios.post('/organization/list', \r\n            {\r\n                ref: 'user',\r\n                objId: this.state.auth.userId\r\n            }, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                    this.setState({organizations: response.data.organizations});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/team/create', {\r\n                    userId: this.state.auth.userId,\r\n                    teamObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.team !== null) {\r\n                        this.setState({\r\n                            team: response.data.team, serverResponse: {\r\n                                origin: response.data.origin,\r\n                                content: t('content.team.actions.createTeam.actionResults.success')\r\n                            }\r\n                        })\r\n                    }  \r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({\r\n                    serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <div>\r\n                    <h2>{t('content.team.actions.createTeam.actionTitle')}</h2>\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <table className=\"tab-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{t('content.team.fields.name')}</th>\r\n                                    <th>{t('content.category.title')}</th>\r\n                                    <th>{t('content.organization.title')}</th>\r\n                                    <th>{t('content.team.fields.members')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                                            {this.state.categories.length > 0 && (\r\n                                                this.state.categories.map((category, index) => {\r\n                                                    return <option value={category.name}>{category.name}</option>\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'organization')} value={this.state.fields['organization']} type=\"organization\" className=\"\" name=\"organization\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectOrganization')}</option>\r\n                                            {this.state.organizations.length > 0 && (\r\n                                                this.state.organizations.map((organization, index) => {\r\n                                                    return <option value={organization.name}>{organization.name}</option>\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Select \r\n                                            options={this.state.users} \r\n                                            isMulti\r\n                                            value={this.state.fields['members']}\r\n                                            onChange={(value) => { \r\n                                                let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['members'] = value; \r\n                                                errors['members'] = ''\r\n                                                this.setState({fields, errors})}}\r\n                                            name=\"Members\"\r\n                                            placeholder={t('misc.actionDescription.addMember')}\r\n                                            getOptionLabel={(option) => option.username} \r\n                                            getOptionValue={(option) => option._id} \r\n                                            noOptionsMessage={() => t('commonErrors.noMembersAvailable')}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"organization\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"members\"]}</span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr><th colspan=\"4\">{t('content.team.fields.description')}</th></tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colSpan=\"4\">\r\n                                        <JoditEditor\r\n                                            ref={this.state.fields['description']}\r\n                                            value={this.state.fields['description']}\r\n                                            tabIndex={1} // tabIndex of textarea\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['description'] = value; \r\n                                                errors['description'] = '';\r\n                                                this.setState({fields, errors})}}\r\n                                            //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                {this.state.serverResponse.content !== null ? (\r\n                                    this.state.user !== null ? (\r\n                                        <tr>\r\n                                            <td colspan=\"4\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colspan=\"4\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.team.actions.createTeam.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateTeamTranslation = withTranslation('common')(CreateTeam);\r\n\r\nexport default CreateTeamTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\UserList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CompanyList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\NotFound.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\Company.js",["180"],"import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Company extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return <h1>Company</h1>\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst CompanyTranslation = withTranslation('common')(Company);\r\n\r\nexport default CompanyTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\Team.js",["181","182","183","184"],"import React from 'react';\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport moment from 'moment';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport ProjectList from '../Project/ProjectList';\r\nimport TaskList from '../Task/TaskList';\r\nimport UserList from '../User/UserList';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Team extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                team: null,\r\n                organizations: [],\r\n                categories: [],\r\n                users: [],\r\n                options: [],\r\n                fields: {},\r\n                errors: {},\r\n                enableEdit: false,\r\n                addMember: false,\r\n                allowSave: false,\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.deleteTeam = this.deleteTeam.bind(this);\r\n\r\n        this.getUserList();\r\n        this.getCategoryList();\r\n        this.getOrganizationList();\r\n        this.getTeam();\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n\r\n        fields[field] = event.target.value;\r\n        errors[field] = '';\r\n        \r\n        if(field === 'organization' || field === 'category') {\r\n            if(fields[field] === this.state.team[field].name) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        }\r\n        \r\n        if(fields[field] === this.state.team[field]) {\r\n            this.setState({fields, errors, allowSave: false});\r\n        } else {\r\n            this.setState({fields, errors, allowSave: true});\r\n        }\r\n    }\r\n\r\n    resetForm() {\r\n        let fields = this.state.fields;\r\n        fields['organization'] = this.state.team.organization.name;\r\n        fields['category'] = this.state.team.category.name;\r\n        fields['name'] = this.state.team.name;\r\n        fields['members'] = this.state.team.members;\r\n        fields['description'] = this.state.team.description;\r\n        fields['owner'] = this.state.team.owner;\r\n        fields['avatar_url'] = this.state.team.avatar_url;\r\n\r\n        this.setState({fields, errors: {}, \r\n            serverResponse: {\r\n                origin: null,\r\n                content: null\r\n            }\r\n        });\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['members'] || fields['members'] === 'none') {\r\n            isValid = false;\r\n            errors['members'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.members') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['organization'] || fields['organization'] === 'none') {\r\n            isValid = false;\r\n            errors['organization'] = t('misc.phrases.field') + ' \\'' + t('content.organization.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getTeam() {\r\n        let fields = this.state.fields;\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/team/details', {\r\n                        ref: 'user',\r\n                        userId: this.state.auth.userId,\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response !== undefined && response.data.team !== null) {\r\n                            this.setState({team: response.data.team});\r\n                            fields['organization'] = this.state.team.organization.name;\r\n                            fields['category'] = this.state.team.category.name;\r\n                            fields['owner'] = this.state.team.owner;\r\n                            fields['name'] = this.state.team.name;\r\n                            fields['members'] = this.state.team.members;\r\n                            fields['description'] = this.state.team.description;\r\n                            fields['avatar_url'] = this.state.team.avatar_url;\r\n                            this.setState({fields});\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }) \r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/team/details', {\r\n                        ref: this.props.location.state.ref,\r\n                        userId: this.props.location.state.userId,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response !== undefined && response.data.team !== null) {\r\n                            this.setState({team: response.data.team});\r\n                            fields['organization'] = this.state.team.organization.name;\r\n                            fields['category'] = this.state.team.category.name;\r\n                            fields['owner'] = this.state.team.owner;\r\n                            fields['name'] = this.state.team.name;\r\n                            fields['members'] = this.state.team.members;\r\n                            fields['description'] = this.state.team.description;\r\n                            fields['avatar_url'] = this.state.team.avatar_url;\r\n                            this.setState({fields});\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }) \r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/team/details', {\r\n                    ref: this.props.params.ref,\r\n                    userId: this.props.params.userId,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.team !== null) {\r\n                        this.setState({team: response.data.team});\r\n                        fields['organization'] = this.state.team.organization.name;\r\n                        fields['category'] = this.state.team.category.name;\r\n                        fields['owner'] = this.state.team.owner;\r\n                        fields['name'] = this.state.team.name;\r\n                        fields['members'] = this.state.team.members;\r\n                        fields['description'] = this.state.team.description;\r\n                        fields['avatar_url'] = this.state.team.avatar_url;\r\n                        this.setState({fields});\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getCategoryList() {\r\n        try {\r\n            await axios.post('/category/list', { category_type: 'team'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n        \r\n    }\r\n\r\n    async getOrganizationList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/organization/list',\r\n                    {\r\n                        ref: 'user',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                            this.setState({organizations: response.data.organizations});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/organization/list',\r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                            this.setState({organizations: response.data.organizations});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/organization/list',\r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                        this.setState({organizations: response.data.organizations});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getUserList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: 'company',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/user/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.users.length > 0 && response.data.users !== null) {\r\n                        this.setState({users: response.data.users});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async deleteTeam() {\r\n        const {t} = this.props;\r\n        try {\r\n            await axios.post('/team/delete',\r\n            {\r\n                userId: this.state.auth.userId,\r\n                teamId: this.state.team._id\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== undefined && response.data.team !== null) {\r\n                    this.setState({team: response.data.team, serverResponse: t('content.team.actions.deleteTeam.actionResults.success')});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n    }\r\n\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/team/update',\r\n                {  \r\n                    userId: this.state.auth.userId,\r\n                    teamId: this.state.team._id,\r\n                    teamObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.team !== null) {\r\n                        this.setState({\r\n                            team: response.data.team,\r\n                            serverResponse: {\r\n                                origin: response.data.origin,\r\n                                content: t('content.team.actions.updateTeam.actionResults.success')\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        this.setState({serverResponse: {\r\n                            origin: error.response.data.origin,\r\n                            content: error.response.data.error\r\n                        }});\r\n                    }\r\n                })\r\n            } catch(e) {\r\n                this.setState({ serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {t} = this.props;\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            if(this.props.location.state !== undefined && this.props.location.state.objId && this.props.location.state.ref) {\r\n                return(\r\n                    <div>\r\n                        <h2>{t('content.team.fields.overview')}</h2>\r\n                        {this.state.team !== null ? (\r\n                            <div>\r\n                                <form id=\"form\" onSubmit={this.onFormSubmit}>\r\n                                    <table className=\"tab-table\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>{t('content.team.fields.name')}</th>\r\n                                                <th>{t('content.team.fields.category')}</th>\r\n                                                <th>{t('content.team.fields.owner')}</th>\r\n                                                <th>{t('content.team.fields.organization')}</th>\r\n                                                <th>{t('content.team.fields.members')}</th>\r\n                                                <th>{t('content.team.fields.avatarUrl')}</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                         <tbody>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" id=\"name\" name=\"name\" disabled={!this.state.enableEdit}/>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <select defaultValue={this.state.team.category.name} value={this.state.fields['category']} onChange={this.onChange.bind(this, 'category')} type=\"category\" className=\"\" name=\"category\" disabled={!this.state.enableEdit}>\r\n                                                        <option selected  value={this.state.team.category.name}>{this.state.team.category.name}</option>\r\n                                                        {this.state.categories.length > 0 && (\r\n                                                            this.state.categories.map((category, index) => {\r\n                                                                if(category._id !== this.state.team.category._id) {\r\n                                                                    return <option value={category.name}>{category.name}</option>\r\n                                                                }\r\n                                                            })\r\n                                                        )}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <select defaultValue={this.state.team.owner._id} value={this.state.fields['owner']}  onChange={this.onChange.bind(this, 'owner')} type=\"owner\" className=\"\" name=\"owner\" disabled={!this.state.enableEdit}>\r\n                                                        <option selected value={this.state.team.owner._id}>{this.state.team.owner.username}</option>\r\n                                                        {this.state.team.members.length > 0 && (\r\n                                                            this.state.team.members.map((member, index) => {\r\n                                                                if(member._id !== this.state.team.owner._id) {\r\n                                                                    return <option value={member._id}>{member.username}</option>\r\n                                                                }\r\n                                                            })\r\n                                                        )}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\">\r\n                                                    <select defaultValue={this.state.team.organization.name} value={this.state.fields['organization']}  onChange={this.onChange.bind(this, 'organization')} type=\"organization\" className=\"\" name=\"organization\" disabled={!this.state.enableEdit}>\r\n                                                        <option selected value={this.state.team.organization.name}>{this.state.team.organization.name}</option>\r\n                                                        {this.state.organizations.length > 0 && (\r\n                                                            this.state.organizations.map((organization, index) => {\r\n                                                                if(organization._id !== this.state.team.organization._id) {\r\n                                                                    return <option value={organization.name}>{organization.name}</option>\r\n                                                                }\r\n                                                            })\r\n                                                        )}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Select \r\n                                                        options={this.state.users} \r\n                                                        isMulti\r\n                                                        value={this.state.fields['members']}\r\n                                                        onChange={(value) => { \r\n                                                            let fields = this.state.fields; \r\n                                                            fields['members'] = value; \r\n                                                            if(fields['members'] !== this.state.team.members) {\r\n                                                                this.setState({allowSave: true})\r\n                                                            }\r\n                                                            this.setState({fields})}}\r\n                                                        name=\"Members\"\r\n                                                        defaultValue={() => this.state.team.members.map((member) => {return [member.username]})}\r\n                                                        placeholder={t('misc.actionDescription.addMember')}\r\n                                                        getOptionLabel={(option) => option.username} \r\n                                                        getOptionValue={(option) => option._id} \r\n                                                        noOptionsMessage={() => t('commonErrors.noMembersAvailable')}\r\n                                                        isDisabled={!this.state.enableEdit}/>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input onChange={this.onChange.bind(this, 'avatar_url')} value={this.state.fields['avatar_url']} type=\"avatar_url\" className=\"\" id=\"avatar_url\" name=\"avatar_url\" disabled={!this.state.enableEdit}/>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"owner\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"organization\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"members\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"avatar_url\"]}</span></td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                        <thead>\r\n                                            <tr><th colspan=\"6\">{t('content.team.fields.description')}</th></tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td colspan=\"6\">\r\n                                                    <JoditEditor\r\n                                                        ref={this.state.fields['description']}\r\n                                                        value={this.state.fields['description']}\r\n                                                        tabIndex={1} // tabIndex of textarea\r\n                                                        onChange={(value) => {\r\n                                                            let fields = this.state.fields; \r\n                                                            let errors = this.state.errors;\r\n                                                            fields['description'] = value; \r\n                                                            errors['description'] = '';\r\n                                                            this.setState({fields, errors, allowSave: true})}} />\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                            <tr>\r\n                                                <th>{t('misc.fields.createdAt')}</th>\r\n                                                <td>{moment(this.state.team.created_at).format('YYYY-MM-DD | hh:mm:ss')}</td>\r\n                                                <th>{t('misc.fields.modifiedAt')}</th>\r\n                                                <td>{moment(this.state.team.modified_at).format('YYYY-MM-DD | hh:mm:ss')}</td>\r\n                                            </tr>\r\n                                            {this.state.serverResponse.content !== null ? (\r\n                                                this.state.team !== null ? (\r\n                                                    <tr>\r\n                                                        <td colspan=\"6\" align=\"center\">\r\n                                                            <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                                        </td>\r\n                                                    </tr>\r\n                                                ) : (\r\n                                                    <tr>\r\n                                                        <td colspan=\"6\" align=\"center\">\r\n                                                            <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">- {t('content.team.actions.updateTeam.errorMessages.dataValidation.' + this.state.serverResponse.content)} -</span>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            ) : (\r\n                                                null\r\n                                            )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </form>\r\n                                {this.state.auth.userId === this.state.team.owner._id ? (\r\n                                    <div class=\"card-form-divider\">\r\n                                        <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                        <button className=\"card-form-button\" form=\"form\" type=\"submit\" hidden={!this.state.enableEdit} disabled={!this.state.allowSave}>{t('misc.actionDescription.save')}</button>\r\n                                        <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit}))}} hidden={this.state.enableEdit}>{t('misc.actionDescription.edit')}</button>\r\n                                        <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit})); this.resetForm()}} hidden={!this.state.enableEdit}>{t('misc.actionDescription.cancel')}</button>\r\n                                        <button className=\"card-form-button\" onClick={this.deleteTeam} hidden={!this.state.enableEdit}>{t('misc.actionDescription.delete')}</button>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div class=\"card-form-divider\">\r\n                                        <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                    </div>\r\n                                )}\r\n    \r\n                                <br /><hr className=\"tab-hr\" /><br />\r\n    \r\n                                <h3>{t('content.team.actions.selectTeam.members')}</h3>\r\n                                <UserList params={{ref: 'team', objId: this.state.team._id}} />\r\n    \r\n                                <h3>{t('content.team.actions.selectTeam.associatedProjects')}</h3>\r\n                                <ProjectList params={{ref: 'team', objId: this.state.team._id}} />\r\n    \r\n                                <h3>{t('content.team.actions.selectTeam.associatedTasks')}</h3>\r\n                                <TaskList params={{ref: 'team', objId: this.state.team._id}} />\r\n                            </div>\r\n                        ) : (\r\n                            <div>\r\n                                <table className=\"tab-table\">\r\n                                    <tr>\r\n                                        {this.state.serverResponse.content !== null ? (\r\n                                            <td colspan=\"6\" align=\"center\">{t('content.team.actions.selectTeam.errorMessages.dataValidation.' + this.state.serverResponse.content)}</td>\r\n                                        ) : (\r\n                                            <td colspan=\"6\" align=\"center\">-</td>\r\n                                        )}\r\n                                    </tr>\r\n                                </table>\r\n                                <div className=\"card-form-divider\">\r\n                                    <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return( \r\n                    <div align=\"center\">\r\n                        <h3>{t('content.team.actions.selectTeam.errorMessages.dataValidation.missingProps')}</h3>\r\n                        <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n    }    \r\n}\r\n\r\nconst TeamTranslation = withTranslation('common')(Team);\r\n\r\nexport default TeamTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\User.js",["185","186"],"import React from 'react';\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport TaskList from '../Task/TaskList';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass User extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                user: null,\r\n                fields: {},\r\n                errors: {},\r\n                enableEdit: false,\r\n                allowSave: false,\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.getUser();\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;       \r\n        errors[field] = '';\r\n\r\n        if(fields[field] === this.state.user[field]) {\r\n            this.setState({fields, errors, allowSave: false});\r\n        } else {\r\n            this.setState({fields, errors, allowSave: true});\r\n        }\r\n    }\r\n\r\n    resetForm() {\r\n        let fields = this.state.fields;\r\n        fields['firstname'] = this.state.user.firstname;\r\n        fields['lastname'] = this.state.user.lastname;\r\n        fields['username'] = this.state.user.username;\r\n        fields['position'] = this.state.user.position;\r\n        fields['company'] = this.state.user.company.name;\r\n        fields['avatar_url'] = this.state.user.avatar_url;\r\n        fields['email'] = this.state.user.email; \r\n        fields['phone'] = this.state.user.phone;\r\n\r\n        document.getElementById('serverResponse').innerHTML = '';\r\n        this.setState({fields, errors: {}, allowSave: false, \r\n            serverResponse: {\r\n                origin: null,\r\n                content: null\r\n            }\r\n        });\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['firstname']) {\r\n            isValid = false;\r\n            errors['firstname'] = t('misc.phrases.field') + ' \\'' + t('content.register.firstname') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['firstname'] !== '') {\r\n            if(!fields['firstname'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/;\r\n                isValid = false;\r\n                errors['firstname'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['lastname']) {\r\n            isValid = false;\r\n            errors['lastname'] = t('misc.phrases.field') + ' \\'' + t('content.register.lastname') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['lastname'] !== '') {\r\n            if(!fields['lastname'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,20}$/;\r\n                isValid = false;\r\n                errors['lastname'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['username']) {\r\n            isValid = false;\r\n            errors['username'] = t('misc.phrases.field') + ' \\'' + t('content.register.username') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['username'] !== '') {\r\n            if(!fields['username'].match(/^[a-zA-Z0-9\\-_.]+$/)) {\r\n                let regex = /^[a-zA-Z0-9\\-_.]+$/;\r\n                isValid = false;\r\n                errors['username'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['email']) {\r\n            isValid = false;\r\n            errors['email'] = t('misc.phrases.field') + ' \\'' + t('content.register.email') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['email'] !== '') {\r\n            if(!fields['email'].match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/) && !fields['email'].match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)) {\r\n                isValid = false;\r\n                errors['email'] = t('commonErrors.formValidation.emailNotValid');\r\n            }\r\n        }\r\n\r\n        if(!fields['phone']) {\r\n            isValid = false;\r\n            errors['phone'] = t('misc.phrases.field') + ' \\'' + t('content.register.phone') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['phone'] !== '') {\r\n            if(!fields['phone'].match(/^\\+?([0-9]{2})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3}?[-. ]?([0-9]{3}))$/) && !fields['phone'].match(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})$/) && !fields['phone'].match(/^([0-9]{9})$/)) {\r\n                let regex1 = 'yy xxx xxx xxx';\r\n                let regex2 = 'xxx xxx xxx';\r\n                let regex3 = 'xxxxxxxxx';\r\n                isValid = false;\r\n                errors['phone'] = t('commonErrors.formValidation.incorrectPhoneNumberFormat') + '\\n\\n' + regex1 + ', ' + regex2 + ' ' + t('misc.phrases.or') + ' ' + regex3;\r\n            }\r\n        }\r\n\r\n        if(!fields['position']) {\r\n            isValid = false;\r\n            errors['position'] = t('misc.phrases.field') + ' \\'' + t('content.register.position') + '\\' ' +  t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['position'] !== '') {\r\n            if(!fields['position'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,30}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁa-zA-Z\\- ]{1,30}$/;\r\n                isValid = false;\r\n                errors['position'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(fields['company'] !== '' && fields['company'] !== '') {\r\n            if(!fields['company'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['company'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        } else if(!fields['company']) {\r\n            isValid = false;\r\n            errors['company'] = t('misc.phrases.field') + ' \\'' + t('content.register.company') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getUser() {\r\n        let fields = this.state.fields;\r\n        \r\n        if(this.props.location === undefined && this.props.location.state === undefined) {\r\n            try {\r\n                await axios.post('/user/profile', \r\n                {\r\n                    userId: this.state.auth.userId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== '' && response.data.user !== null) {\r\n                        this.setState({user: response.data.user});\r\n                        fields['firstname'] = this.state.user.firstname;\r\n                        fields['lastname'] = this.state.user.lastname;\r\n                        fields['username'] = this.state.user.username;\r\n                        fields['position'] = this.state.user.position;\r\n                        fields['company'] = this.state.user.company.name;\r\n                        fields['avatar_url'] = this.state.user.avatar_url;\r\n                        fields['email'] = this.state.user.email; \r\n                        fields['phone'] = this.state.user.phone;\r\n                        this.setState({fields});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/user/profile', \r\n                {\r\n                    userId: this.props.location.state.userId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== '' && response.data.user !== null) {\r\n                        this.setState({user: response.data.user});\r\n                        fields['firstname'] = this.state.user.firstname;\r\n                        fields['lastname'] = this.state.user.lastname;\r\n                        fields['username'] = this.state.user.username;\r\n                        fields['position'] = this.state.user.position;\r\n                        fields['company'] = this.state.user.company.name;\r\n                        fields['avatar_url'] = this.state.user.avatar_url;\r\n                        fields['email'] = this.state.user.email; \r\n                        fields['phone'] = this.state.user.phone;\r\n                        this.setState({fields});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/user/update',\r\n                {  \r\n                    userId: this.state.auth.userId,\r\n                    docId: this.state.user._id,\r\n                    userObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.user !== null) {\r\n                        this.setState({user: response.data.user, serverResponse: { content: t('content.user.actions.updateUser.actionResults.success')}});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            } catch(e) {\r\n                this.setState({ serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {t} = this.props;\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            if(this.props.location.state !== undefined && this.props.location.state.userId) {\r\n                return(\r\n                    <div>\r\n                        {this.state.user !== null ? (\r\n                        <div>\r\n                            <h2>{t('content.user.title')}</h2>\r\n                            <form id=\"form\" onSubmit={this.onFormSubmit}>\r\n                                <table className=\"tab-table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>{t('content.user.fields.firstname')}</th>\r\n                                            <th>{t('content.user.fields.lastname')}</th>\r\n                                            <th>{t('content.user.fields.username')}</th>\r\n                                            <th>{t('content.user.fields.email')}</th>\r\n                                            <th>{t('content.user.fields.phone')}</th>\r\n                                            <th>{t('content.user.fields.position')}</th>\r\n                                            <th>{t('content.user.fields.company')}</th>\r\n                                            <th>{t('content.user.fields.avatarUrl')}</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td>\r\n                                                <input onChange={this.onChange.bind(this, 'firstname')} value={this.state.fields['firstname']} type=\"firstname\" className=\"\" id=\"firstname\" name=\"firstname\" disabled={!this.state.enableEdit}/>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input onChange={this.onChange.bind(this, 'lastname')} value={this.state.fields['lastname']} type=\"lastname\" className=\"\" id=\"lastname\" name=\"lastname\" disabled={!this.state.enableEdit}/>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input onChange={this.onChange.bind(this, 'username')} value={this.state.fields['username']} type=\"username\" className=\"\" id=\"username\" name=\"username\" disabled={!this.state.enableEdit}/>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input onChange={this.onChange.bind(this, 'email')} value={this.state.fields['email']} type=\"email\" className=\"\" id=\"email\" name=\"email\" disabled={!this.state.enableEdit}/>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input onChange={this.onChange.bind(this, 'phone')} value={this.state.fields['phone']} type=\"phone\" className=\"\" id=\"phone\" name=\"phone\" disabled={!this.state.enableEdit}/>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input onChange={this.onChange.bind(this, 'position')} value={this.state.fields['position']} type=\"position\" className=\"\" id=\"position\" name=\"position\" disabled={!this.state.enableEdit}/>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input onChange={this.onChange.bind(this, 'company')} value={this.state.fields['company']} type=\"company\" className=\"\" id=\"company\" name=\"company\" disabled={!this.state.enableEdit}/>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input nowrap=\"nowrap\" onChange={this.onChange.bind(this, 'avatar_url')} value={this.state.fields['avatar_url']} type=\"avatar_url\" className=\"\" id=\"avatar_url\" name=\"avatar_url\" disabled={!this.state.enableEdit}/>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td><span className=\"error-msg-span\">{this.state.errors[\"firstname\"]}</span></td>\r\n                                            <td><span className=\"error-msg-span\">{this.state.errors[\"lastname\"]}</span></td>\r\n                                            <td><span className=\"error-msg-span\">{this.state.errors[\"username\"]}</span></td>\r\n                                            <td><span className=\"error-msg-span\">{this.state.errors[\"email\"]}</span></td>\r\n                                            <td><span className=\"error-msg-span\">{this.state.errors[\"phone\"]}</span></td>\r\n                                            <td><span className=\"error-msg-span\">{this.state.errors[\"position\"]}</span></td>\r\n                                            <td><span className=\"error-msg-span\">{this.state.errors[\"company\"]}</span></td>\r\n                                            <td><span className=\"error-msg-span\">{this.state.errors[\"avatar_url\"]}</span></td>\r\n                                        </tr>\r\n                                        {this.state.serverResponse.content !== null ? (\r\n                                            this.state.user !== null ? (\r\n                                                <tr>\r\n                                                    <td colspan=\"8\" align=\"center\">\r\n                                                        <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                                    </td>\r\n                                                </tr>\r\n                                            ) : (\r\n                                                <tr>\r\n                                                    <td colspan=\"8\" align=\"center\">\r\n                                                        <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.user.actions.selectUser.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        ) : (\r\n                                            null\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </form>\r\n                            {this.state.auth.userId === this.state.user._id ? (\r\n                                <div class=\"card-form-divider\">\r\n                                    <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                    <button className=\"card-form-button\" form=\"form\" type=\"submit\" hidden={!this.state.enableEdit} disabled={!this.state.allowSave}>{t('misc.actionDescription.save')}</button>\r\n                                    <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit}))}} hidden={this.state.enableEdit}>{t('misc.actionDescription.edit')}</button>\r\n                                    <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit})); this.resetForm()}} hidden={!this.state.enableEdit}>{t('misc.actionDescription.cancel')}</button>\r\n                                </div>\r\n                            ) : (\r\n                                <div class=\"card-form-divider\">\r\n                                    <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                </div>\r\n                            )}\r\n    \r\n                            <br /><hr className=\"tab-hr\" /><br />\r\n    \r\n                            <h2>{t('content.team.actions.selectTeam.associatedTasks')}</h2>\r\n                            <TaskList params={{ref: 'user', objId: this.state.user._id}} />\r\n                        </div>\r\n                    ) : (\r\n                        <table className=\"tab-table\">\r\n                            {this.state.serverResponse.content !== null ? (\r\n                                this.state.serverResponse.content === 'unauthorized' ? (\r\n                                    <tr>\r\n                                        <td colspan=\"8\" align=\"center\">\r\n                                            <tr><b>{t('commonErrors.' + this.state.serverResponse.content)}</b></tr>\r\n                                            <tr><Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link></tr>\r\n                                        </td>\r\n                                    </tr>\r\n                                ) : (\r\n                                    <tbody>\r\n                                        <tr colspan=\"8\"><td align=\"center\">{t('content.user.actions.selectUser.errorMessages.dataValidation.' + this.state.serverResponse.content)}</td></tr>\r\n                                        <tr colspan=\"8\"><td align=\"center\"><Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link></td></tr>\r\n                                    </tbody>\r\n                                    )\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colspan=\"8\" align=\"center\">-</td>\r\n                                </tr>\r\n                            )}\r\n                        </table>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return( \r\n                    <div align=\"center\">\r\n                        <h3>{t('content.user.actions.selectUser.errorMessages.dataValidation.missingProps')}</h3>\r\n                        <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n    }    \r\n}\r\n\r\nconst UserTranslation = withTranslation('common')(User);\r\n\r\nexport default UserTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\UserAction.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Recent.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\Task.js",["187","188","189"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\CreateOrganization.js",["190","191","192","193","194","195"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateOrganization extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                fields: {},\r\n                errors: {},\r\n                user: null,\r\n                company: null,\r\n                organization: null,\r\n                disableForm: false,\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getUser();\r\n        this.getCompany();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;  \r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.organization.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['company']) {\r\n            isValid = false;\r\n            errors['company'] = t('misc.phrases.field') + ' \\'' + t('content.company.title') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['company'] !== undefined) {\r\n            if(!fields['company'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['company'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(fields['avatar_url'] !== undefined && fields['avatar_url'] !== '') {\r\n            if(!fields['avatar_url'].match(/[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&\\/\\/=]*)?/gi)) {\r\n                isValid = false;\r\n                errors['avatar_url'] = t('commonErrors.formValidation.InvalidUrlFormat');\r\n            }\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.organization.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getUser() {\r\n        await axios.post('/user/profile', {\r\n            userId: this.state.auth.userId\r\n        }, {headers: this.headers, withCredentials: true})\r\n        .then((response) => {\r\n            if(response !== undefined) {\r\n                this.setState({user: response.data.user})\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            if(error.response.data.error === 'MissingRefreshToken') {\r\n                this.setState({\r\n                    disableForm: true,\r\n                    serverResponse: {\r\n                        origin: error.response.data.origin,\r\n                        content: error.response.data.error\r\n                    }\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    serverResponse: {\r\n                        origin: error.response.data.origin,\r\n                        content: error.response.data.error\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    async getCompany() {\r\n        let fields = this.state.fields;\r\n\r\n        await axios.post('/company/details',\r\n        {\r\n            userId: this.state.auth.userId\r\n        }, {headers: this.headers, withCredentials: true})\r\n        .then((response) => {\r\n            if(response !== undefined) {\r\n                fields['company'] = response.data.company.name;\r\n                this.setState({fields, company: response.data.company});\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            if(error) {\r\n                if(error.response.data.error === 'MissingRefreshToken') {\r\n                    this.setState({\r\n                        disableForm: true,\r\n                        serverResponse: {\r\n                            origin: error.response.data.origin,\r\n                            content: error.response.data.error\r\n                        }\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        serverResponse: {\r\n                            origin: error.response.data.origin,\r\n                            content: error.response.data.error\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/organization/create', {\r\n                    userId: this.state.auth.userId,\r\n                    organizationObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.organization !== null) {\r\n                        this.setState({\r\n                            organization: response.data.organization,\r\n                            serverResponse: {\r\n                                origin: response.data.origin,\r\n                                content: t('content.organization.actions.createOrganization.actionResults.success')\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else if(error.response.data.error === 'MissingRefreshToken') {\r\n                            this.setState({\r\n                                disableForm: true,\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({\r\n                    serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <div>\r\n                    <h2>{t('content.organization.actions.createOrganization.actionTitle')}</h2>\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <fieldset disabled={this.state.disableForm}>\r\n                        <table className=\"tab-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{t('content.organization.fields.name')}</th>\r\n                                    <th>{t('content.company.title')}</th>\r\n                                    <th>{t('content.organization.fields.avatarUrl')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.enterCompany')} onChange={this.onChange.bind(this, 'company')} value={this.state.fields['company']} type=\"company\" className=\"\" name=\"company\" />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"company\"]}</span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.enterUrl')} nChange={this.onChange.bind(this, 'avatar_url')} value={this.state.fields['avatar_url']} type=\"avatar_url\" className=\"\" name=\"avatar_url\" />\r\n                                        <span className=\"error-msg-span\">{this.state.errors[\"avatar_url\"]}</span>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"4\">{t('content.organization.fields.description')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colSpan=\"4\">\r\n                                        <JoditEditor\r\n                                            ref={this.state.fields['description']}\r\n                                            value={this.state.fields['description']}\r\n                                            tabIndex={1} // tabIndex of textarea\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['description'] = value; \r\n                                                errors['description'] = '';\r\n                                                this.setState({fields, errors})}}\r\n                                            readonly={this.state.disableForm}\r\n                                            //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                {this.state.serverResponse.content !== null ? (\r\n                                    this.state.user !== null ? (\r\n                                        <tr>\r\n                                            <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.organization.actions.createOrganization.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        </fieldset>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateOrganizationTranslation = withTranslation('common')(CreateOrganization);\r\n\r\nexport default CreateOrganizationTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\OrganizationList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\Organization.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\CreateUser.js",["196","197","198","199"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/register.css';\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nimport Register from '../Nav/Register';\r\n\r\nclass CreateUser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                },\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <Register />\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateUserTranslation = withTranslation('common')(CreateUser);\r\n\r\nexport default CreateUserTranslation;",{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":14,"column":8,"nodeType":"206","messageId":"207","endLine":14,"endColumn":18},{"ruleId":"204","severity":1,"message":"208","line":4,"column":9,"nodeType":"206","messageId":"207","endLine":4,"endColumn":37},{"ruleId":"204","severity":1,"message":"208","line":4,"column":9,"nodeType":"206","messageId":"207","endLine":4,"endColumn":37},{"ruleId":"204","severity":1,"message":"209","line":5,"column":39,"nodeType":"206","messageId":"207","endLine":5,"endColumn":65},{"ruleId":"210","severity":1,"message":"211","line":97,"column":35,"nodeType":"212","messageId":"213","endLine":97,"endColumn":37},{"ruleId":"214","severity":1,"message":"215","line":98,"column":147,"nodeType":"216","messageId":"217","endLine":98,"endColumn":148,"suggestions":"218"},{"ruleId":"214","severity":1,"message":"215","line":98,"column":172,"nodeType":"216","messageId":"217","endLine":98,"endColumn":173,"suggestions":"219"},{"ruleId":"210","severity":1,"message":"211","line":107,"column":35,"nodeType":"212","messageId":"213","endLine":107,"endColumn":37},{"ruleId":"204","severity":1,"message":"220","line":173,"column":16,"nodeType":"206","messageId":"207","endLine":173,"endColumn":17},{"ruleId":"204","severity":1,"message":"220","line":90,"column":16,"nodeType":"206","messageId":"207","endLine":90,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":557,"column":105,"nodeType":"223","messageId":"224","endLine":557,"endColumn":107},{"ruleId":"221","severity":1,"message":"222","line":580,"column":93,"nodeType":"223","messageId":"224","endLine":580,"endColumn":95},{"ruleId":"204","severity":1,"message":"225","line":365,"column":15,"nodeType":"206","messageId":"207","endLine":365,"endColumn":21},{"ruleId":"204","severity":1,"message":"225","line":461,"column":15,"nodeType":"206","messageId":"207","endLine":461,"endColumn":21},{"ruleId":"204","severity":1,"message":"226","line":6,"column":8,"nodeType":"206","messageId":"207","endLine":6,"endColumn":14},{"ruleId":"214","severity":1,"message":"215","line":90,"column":49,"nodeType":"216","messageId":"217","endLine":90,"endColumn":50,"suggestions":"227"},{"ruleId":"214","severity":1,"message":"215","line":90,"column":74,"nodeType":"216","messageId":"217","endLine":90,"endColumn":75,"suggestions":"228"},{"ruleId":"214","severity":1,"message":"215","line":91,"column":40,"nodeType":"216","messageId":"217","endLine":91,"endColumn":41,"suggestions":"229"},{"ruleId":"214","severity":1,"message":"215","line":91,"column":65,"nodeType":"216","messageId":"217","endLine":91,"endColumn":66,"suggestions":"230"},{"ruleId":"214","severity":1,"message":"231","line":115,"column":58,"nodeType":"216","messageId":"217","endLine":115,"endColumn":59,"suggestions":"232"},{"ruleId":"214","severity":1,"message":"231","line":115,"column":111,"nodeType":"216","messageId":"217","endLine":115,"endColumn":112,"suggestions":"233"},{"ruleId":"214","severity":1,"message":"234","line":115,"column":118,"nodeType":"216","messageId":"217","endLine":115,"endColumn":119,"suggestions":"235"},{"ruleId":"214","severity":1,"message":"234","line":115,"column":120,"nodeType":"216","messageId":"217","endLine":115,"endColumn":121,"suggestions":"236"},{"ruleId":"214","severity":1,"message":"231","line":123,"column":61,"nodeType":"216","messageId":"217","endLine":123,"endColumn":62,"suggestions":"237"},{"ruleId":"214","severity":1,"message":"231","line":123,"column":114,"nodeType":"216","messageId":"217","endLine":123,"endColumn":115,"suggestions":"238"},{"ruleId":"214","severity":1,"message":"234","line":123,"column":121,"nodeType":"216","messageId":"217","endLine":123,"endColumn":122,"suggestions":"239"},{"ruleId":"214","severity":1,"message":"234","line":123,"column":123,"nodeType":"216","messageId":"217","endLine":123,"endColumn":124,"suggestions":"240"},{"ruleId":"204","severity":1,"message":"225","line":137,"column":15,"nodeType":"206","messageId":"207","endLine":137,"endColumn":21},{"ruleId":"204","severity":1,"message":"225","line":241,"column":15,"nodeType":"206","messageId":"207","endLine":241,"endColumn":21},{"ruleId":"204","severity":1,"message":"241","line":4,"column":8,"nodeType":"206","messageId":"207","endLine":4,"endColumn":13},{"ruleId":"204","severity":1,"message":"225","line":545,"column":15,"nodeType":"206","messageId":"207","endLine":545,"endColumn":21},{"ruleId":"221","severity":1,"message":"222","line":625,"column":105,"nodeType":"223","messageId":"224","endLine":625,"endColumn":107},{"ruleId":"221","severity":1,"message":"222","line":637,"column":105,"nodeType":"223","messageId":"224","endLine":637,"endColumn":107},{"ruleId":"221","severity":1,"message":"222","line":649,"column":112,"nodeType":"223","messageId":"224","endLine":649,"endColumn":114},{"ruleId":"214","severity":1,"message":"215","line":119,"column":147,"nodeType":"216","messageId":"217","endLine":119,"endColumn":148,"suggestions":"242"},{"ruleId":"214","severity":1,"message":"215","line":119,"column":172,"nodeType":"216","messageId":"217","endLine":119,"endColumn":173,"suggestions":"243"},{"ruleId":"221","severity":1,"message":"222","line":647,"column":105,"nodeType":"223","messageId":"224","endLine":647,"endColumn":107},{"ruleId":"221","severity":1,"message":"222","line":660,"column":106,"nodeType":"223","messageId":"224","endLine":660,"endColumn":108},{"ruleId":"221","severity":1,"message":"222","line":694,"column":96,"nodeType":"223","messageId":"224","endLine":694,"endColumn":98},{"ruleId":"204","severity":1,"message":"226","line":6,"column":8,"nodeType":"206","messageId":"207","endLine":6,"endColumn":14},{"ruleId":"214","severity":1,"message":"231","line":97,"column":61,"nodeType":"216","messageId":"217","endLine":97,"endColumn":62,"suggestions":"244"},{"ruleId":"214","severity":1,"message":"231","line":97,"column":114,"nodeType":"216","messageId":"217","endLine":97,"endColumn":115,"suggestions":"245"},{"ruleId":"214","severity":1,"message":"234","line":97,"column":121,"nodeType":"216","messageId":"217","endLine":97,"endColumn":122,"suggestions":"246"},{"ruleId":"214","severity":1,"message":"234","line":97,"column":123,"nodeType":"216","messageId":"217","endLine":97,"endColumn":124,"suggestions":"247"},{"ruleId":"204","severity":1,"message":"225","line":186,"column":15,"nodeType":"206","messageId":"207","endLine":186,"endColumn":21},{"ruleId":"204","severity":1,"message":"248","line":4,"column":9,"nodeType":"206","messageId":"207","endLine":4,"endColumn":13},{"ruleId":"204","severity":1,"message":"241","line":5,"column":8,"nodeType":"206","messageId":"207","endLine":5,"endColumn":13},{"ruleId":"204","severity":1,"message":"249","line":7,"column":39,"nodeType":"206","messageId":"207","endLine":7,"endColumn":70},{"ruleId":"204","severity":1,"message":"220","line":43,"column":16,"nodeType":"206","messageId":"207","endLine":43,"endColumn":17},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'UserAction' is defined but never used.","Identifier","unusedVar","'getJwtDataFromSessionStorage' is defined but never used.","'setJwtDataInSessionStorage' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["252","253"],["254","255"],"'t' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'fields' is assigned a value but never used.","'Select' is defined but never used.",["256","257"],["258","259"],["260","261"],["262","263"],"Unnecessary escape character: \\+.",["264","265"],["266","267"],"Unnecessary escape character: \\/.",["268","269"],["270","271"],["272","273"],["274","275"],["276","277"],["278","279"],"'axios' is defined but never used.",["280","281"],["282","283"],["284","285"],["286","287"],["288","289"],["290","291"],"'Link' is defined but never used.","'removeJwtDataFromSessionStorage' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"292","fix":"293","desc":"294"},{"messageId":"295","fix":"296","desc":"297"},{"messageId":"292","fix":"298","desc":"294"},{"messageId":"295","fix":"299","desc":"297"},{"messageId":"292","fix":"300","desc":"294"},{"messageId":"295","fix":"301","desc":"297"},{"messageId":"292","fix":"302","desc":"294"},{"messageId":"295","fix":"303","desc":"297"},{"messageId":"292","fix":"304","desc":"294"},{"messageId":"295","fix":"305","desc":"297"},{"messageId":"292","fix":"306","desc":"294"},{"messageId":"295","fix":"307","desc":"297"},{"messageId":"292","fix":"308","desc":"294"},{"messageId":"295","fix":"309","desc":"297"},{"messageId":"292","fix":"310","desc":"294"},{"messageId":"295","fix":"311","desc":"297"},{"messageId":"292","fix":"312","desc":"294"},{"messageId":"295","fix":"313","desc":"297"},{"messageId":"292","fix":"314","desc":"294"},{"messageId":"295","fix":"315","desc":"297"},{"messageId":"292","fix":"316","desc":"294"},{"messageId":"295","fix":"317","desc":"297"},{"messageId":"292","fix":"318","desc":"294"},{"messageId":"295","fix":"319","desc":"297"},{"messageId":"292","fix":"320","desc":"294"},{"messageId":"295","fix":"321","desc":"297"},{"messageId":"292","fix":"322","desc":"294"},{"messageId":"295","fix":"323","desc":"297"},{"messageId":"292","fix":"324","desc":"294"},{"messageId":"295","fix":"325","desc":"297"},{"messageId":"292","fix":"326","desc":"294"},{"messageId":"295","fix":"327","desc":"297"},{"messageId":"292","fix":"328","desc":"294"},{"messageId":"295","fix":"329","desc":"297"},{"messageId":"292","fix":"330","desc":"294"},{"messageId":"295","fix":"331","desc":"297"},{"messageId":"292","fix":"332","desc":"294"},{"messageId":"295","fix":"333","desc":"297"},{"messageId":"292","fix":"334","desc":"294"},{"messageId":"295","fix":"335","desc":"297"},"removeEscape",{"range":"336","text":"337"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"338","text":"339"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"340","text":"337"},{"range":"341","text":"339"},{"range":"342","text":"337"},{"range":"343","text":"339"},{"range":"344","text":"337"},{"range":"345","text":"339"},{"range":"346","text":"337"},{"range":"347","text":"339"},{"range":"348","text":"337"},{"range":"349","text":"339"},{"range":"350","text":"337"},{"range":"351","text":"339"},{"range":"352","text":"337"},{"range":"353","text":"339"},{"range":"354","text":"337"},{"range":"355","text":"339"},{"range":"356","text":"337"},{"range":"357","text":"339"},{"range":"358","text":"337"},{"range":"359","text":"339"},{"range":"360","text":"337"},{"range":"361","text":"339"},{"range":"362","text":"337"},{"range":"363","text":"339"},{"range":"364","text":"337"},{"range":"365","text":"339"},{"range":"366","text":"337"},{"range":"367","text":"339"},{"range":"368","text":"337"},{"range":"369","text":"339"},{"range":"370","text":"337"},{"range":"371","text":"339"},{"range":"372","text":"337"},{"range":"373","text":"339"},{"range":"374","text":"337"},{"range":"375","text":"339"},{"range":"376","text":"337"},{"range":"377","text":"339"},[3832,3833],"",[3832,3832],"\\",[3857,3858],[3857,3857],[3469,3470],[3469,3469],[3494,3495],[3494,3494],[3755,3756],[3755,3755],[3780,3781],[3780,3780],[5409,5410],[5409,5409],[5462,5463],[5462,5462],[5469,5470],[5469,5469],[5471,5472],[5471,5471],[5976,5977],[5976,5976],[6029,6030],[6029,6029],[6036,6037],[6036,6036],[6038,6039],[6038,6038],[4703,4704],[4703,4703],[4728,4729],[4728,4728],[3514,3515],[3514,3514],[3567,3568],[3567,3567],[3574,3575],[3574,3574],[3576,3577],[3576,3576]]