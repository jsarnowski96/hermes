[{"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\index.js":"1","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\App.js":"2","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Contact.js":"3","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\About.js":"4","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Home.js":"5","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Register.js":"6","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Sidebar.js":"7","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Dashboard.js":"8","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Login.js":"9","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\Project.js":"10","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\services\\i18n.js":"11","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\jwtSessionStorage.js":"12","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\languageLocalStorage.js":"13","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\CreateProject.js":"14","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\CreateTask.js":"15","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\ProjectList.js":"16","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\TeamList.js":"17","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\TaskList.js":"18","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CreateCompany.js":"19","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\CreateTeam.js":"20","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\UserList.js":"21","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CompanyList.js":"22","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\NotFound.js":"23","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\Company.js":"24","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\Team.js":"25","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\User.js":"26","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\UserAction.js":"27","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Recent.js":"28","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\Task.js":"29","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\CreateOrganization.js":"30","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\OrganizationList.js":"31","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\Organization.js":"32","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\CreateUser.js":"33"},{"size":461,"mtime":1614099401268,"results":"34","hashOfConfig":"35"},{"size":4573,"mtime":1615544832919,"results":"36","hashOfConfig":"35"},{"size":528,"mtime":1614260771385,"results":"37","hashOfConfig":"35"},{"size":518,"mtime":1614260781078,"results":"38","hashOfConfig":"35"},{"size":26123,"mtime":1615544148614,"results":"39","hashOfConfig":"35"},{"size":14345,"mtime":1615936075432,"results":"40","hashOfConfig":"35"},{"size":4869,"mtime":1615936088860,"results":"41","hashOfConfig":"35"},{"size":3999,"mtime":1615939244308,"results":"42","hashOfConfig":"35"},{"size":8264,"mtime":1615936044402,"results":"43","hashOfConfig":"35"},{"size":37835,"mtime":1615940488892,"results":"44","hashOfConfig":"35"},{"size":410,"mtime":1609945680158,"results":"45","hashOfConfig":"35"},{"size":1300,"mtime":1615743909016,"results":"46","hashOfConfig":"35"},{"size":434,"mtime":1613071751491,"results":"47","hashOfConfig":"35"},{"size":29294,"mtime":1615940488893,"results":"48","hashOfConfig":"35"},{"size":34385,"mtime":1615940488893,"results":"49","hashOfConfig":"35"},{"size":8071,"mtime":1615936292036,"results":"50","hashOfConfig":"35"},{"size":9532,"mtime":1615936637875,"results":"51","hashOfConfig":"35"},{"size":11411,"mtime":1615940751785,"results":"52","hashOfConfig":"35"},{"size":15963,"mtime":1615935988565,"results":"53","hashOfConfig":"35"},{"size":19861,"mtime":1615940488892,"results":"54","hashOfConfig":"35"},{"size":9343,"mtime":1615936563405,"results":"55","hashOfConfig":"35"},{"size":0,"mtime":1613659382797,"results":"56","hashOfConfig":"35"},{"size":352,"mtime":1614260499342,"results":"57","hashOfConfig":"35"},{"size":1994,"mtime":1615743947097,"results":"58","hashOfConfig":"35"},{"size":42395,"mtime":1615940488892,"results":"59","hashOfConfig":"35"},{"size":24279,"mtime":1615936549201,"results":"60","hashOfConfig":"35"},{"size":4816,"mtime":1615933971630,"results":"61","hashOfConfig":"35"},{"size":5014,"mtime":1615936005526,"results":"62","hashOfConfig":"35"},{"size":44638,"mtime":1615940537754,"results":"63","hashOfConfig":"35"},{"size":15938,"mtime":1615936187245,"results":"64","hashOfConfig":"35"},{"size":0,"mtime":1614966998394,"results":"65","hashOfConfig":"35"},{"size":0,"mtime":1614966979388,"results":"66","hashOfConfig":"35"},{"size":1929,"mtime":1615745463595,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1ldetr1",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"70"},"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\index.js",[],["146","147"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\App.js",["148"],"import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport Sidebar from './Nav/Sidebar';\r\nimport About from './Nav/About';\r\nimport Contact from './Nav/Contact';\r\nimport Login from './Nav/Login';\r\nimport Register from './Nav/Register';\r\nimport Home from './Nav/Home';\r\n\r\nimport Dashboard from './Dashboard/Dashboard';\r\nimport Recent from './Dashboard/Recent';\r\nimport UserAction from './Dashboard/UserAction';\r\n\r\nimport Project from './Project/Project';\r\nimport Task from './Task/Task';\r\nimport Company from './Company/Company';\r\nimport Team from './Team/Team';\r\nimport User from './User/User';\r\nimport Organization from './Organization/Organization';\r\n\r\nimport ProjectList from './Project/ProjectList';\r\nimport TeamList from './Team/TeamList';\r\nimport CompanyList from './Company/CompanyList';\r\nimport UserList from './User/UserList';\r\nimport TaskList from './Task/TaskList';\r\nimport OrganizationList from './Organization/OrganizationList';\r\n\r\nimport CreateProject from './Project/CreateProject';\r\nimport CreateTask from './Task/CreateTask';\r\nimport CreateCompany from './Company/CreateCompany';\r\nimport CreateTeam from './Team/CreateTeam';\r\nimport CreateUser from './User/CreateUser';\r\nimport CreateOrganization from './Organization/CreateOrganization';\r\n\r\nimport NotFound from './NotFound';\r\n\r\nimport getLanguageFromLocalStorage from '../middleware/languageLocalStorage';\r\n\r\nimport '../assets/css/style.css';\r\n\r\nclass App extends React.Component {    \r\n    constructor(props) {\r\n        super(props);\r\n        const {i18n} = this.props;\r\n\r\n        this.state = {\r\n            toggleSlide: false\r\n        }\r\n\r\n        let lsLanguage = getLanguageFromLocalStorage();\r\n        if(i18n.language !== lsLanguage) {\r\n            i18n.changeLanguage(lsLanguage);\r\n        }\r\n        if(sessionStorage.getItem('renderLogoutBtn') === undefined || sessionStorage.getItem('renderLogoutBtn') === null) {\r\n            sessionStorage.setItem('renderLogoutBtn', false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <BrowserRouter>\r\n                <Sidebar />\r\n                <main>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route path=\"/login\" component={Login} />\r\n                        <Route path=\"/register\" component={Register} />\r\n                        <Route path=\"/about\" component={About} />\r\n                        <Route path=\"/contact\" component={Contact} />\r\n                        <Route path=\"/dashboard\" component={Dashboard} />\r\n                        <Route exact path=\"/recent\" component={Recent} />\r\n                        <Route exact path=\"/organization/details\" component={Organization} />\r\n                        <Route exact path=\"/organization/list\" component={OrganizationList} />\r\n                        <Route exact path=\"/organization/create\" component={CreateOrganization} />\r\n                        <Route exact path=\"/project/details\" component={Project} />\r\n                        <Route exact path=\"/project/list\" component={ProjectList} />\r\n                        <Route exact path=\"/project/create\" component={CreateProject} />\r\n                        <Route exact path=\"/team/details\" component={Team} />\r\n                        <Route exact path=\"/team/list\" component={TeamList} />\r\n                        <Route exact path=\"/team/create\" component={CreateTeam} />\r\n                        <Route exact path=\"/comment\" component={Comment} />\r\n                        <Route exact path=\"/company\" component={Company} />\r\n                        <Route exact path=\"/company/list\" component={CompanyList} />\r\n                        <Route exact path=\"/company/create\" component={CreateCompany} />\r\n                        <Route exact path=\"/task/list\" component={TaskList} />\r\n                        <Route exact path=\"/task/create\" component={CreateTask} />\r\n                        <Route exact path=\"/task/details\" component={Task} />\r\n                        <Route exact path=\"/user/profile\" component={User} />\r\n                        <Route exact path=\"/user/create\" component={CreateUser} />\r\n                        <Route exact path=\"/user/list\" component={UserList} />\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                </main>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst AppTranslation = withTranslation('common')(App);\r\n\r\nexport default AppTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Contact.js",["149"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Contact extends React.Component {    \r\n    render() {\r\n        const {t} = this.props;\r\n        return(\r\n            <div className=\"\">\r\n                <hr /><h1 className=\"\">{t('content.contact.title')}</h1><hr />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ContactTranslation = withTranslation('common')(Contact);\r\n\r\nexport default ContactTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\About.js",["150"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass About extends React.Component {    \r\n    render() {\r\n        const {t} = this.props;\r\n        return(\r\n            <div className=\"\">\r\n                <hr /><h1 className=\"\">{t('content.about.title')}</h1><hr />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst AboutTranslation = withTranslation('common')(About);\r\n\r\nexport default AboutTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Home.js",["151"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport {getJwtDataFromSessionStorage, setJwtDataInSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                authenticated: true,\r\n                redirected: false,\r\n                serverResponse: null,\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        } else {\r\n            this.state = {\r\n                authenticated: false,\r\n                redirected: false,\r\n                serverResponse: null,\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.state.authenticated === true && this.jwt !== null) {\r\n            return(\r\n                <Redirect to=\r\n                   {{ \r\n                        pathname: '/dashboard'\r\n                   }} \r\n                />\r\n            )\r\n        } else {\r\n            return(\r\n                <section>\r\n                    <hr /><h1 className=\"\">{t('content.home.title')}</h1><hr />\r\n                    \r\n    \r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In tempor nibh sed dolor lobortis sodales. Pellentesque diam nulla, pretium id nunc placerat, sagittis convallis metus. Duis ac blandit mauris, vitae dictum eros. In porta, leo sit amet euismod placerat, turpis mauris mollis felis, vel gravida ligula elit sed nisl. Quisque eros libero, viverra eget sem ac, dignissim volutpat ante. Nulla tincidunt lorem iaculis volutpat porta. Sed iaculis mattis risus eu ultricies. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\r\n    \r\n    Vivamus pretium pretium metus a molestie. Integer ante libero, convallis ac aliquam volutpat, dignissim in sem. Pellentesque eget fringilla urna. Cras et facilisis sapien. Duis in justo eu mi eleifend congue. Proin vitae elit id dui dictum blandit a vel enim. Donec sagittis placerat ultricies. Mauris mi ante, facilisis eget rutrum pretium, fermentum malesuada tellus. Nulla sodales nibh ut urna suscipit, eu ullamcorper libero fringilla.\r\n    \r\n    Ut aliquam feugiat scelerisque. Vivamus iaculis tempor arcu a facilisis. Aenean lorem felis, mattis id lacus vel, feugiat fermentum eros. Morbi eu faucibus neque. Donec sit amet diam pharetra ligula semper egestas id ut leo. Phasellus blandit, nisi in egestas mattis, ligula elit sollicitudin tortor, sed laoreet ex enim id urna. Aliquam et lacinia eros. Sed interdum, nibh sit amet sodales bibendum, ipsum nulla elementum ligula, quis iaculis dolor ex ac purus.\r\n    \r\n    Integer eget blandit turpis, ac consectetur dui. Curabitur et scelerisque dui. Etiam dapibus, elit nec finibus pharetra, magna magna dapibus mi, nec dignissim elit ligula quis nunc. Vivamus fermentum gravida elementum. Proin vel vestibulum neque. Nullam at massa ut nisi fringilla ornare non sit amet quam. Phasellus cursus urna a ex porta, nec suscipit arcu tristique.\r\n    \r\n    Vivamus eu suscipit felis. Quisque mollis rutrum magna non facilisis. Pellentesque tincidunt mollis felis, at cursus lorem auctor tempus. Integer rutrum sed metus vel luctus. Quisque tempor lorem sapien, nec ultrices enim feugiat vel. Etiam non orci ut leo accumsan sollicitudin. Maecenas nulla sapien, tempus ut sem nec, fringilla laoreet lacus. Cras id lacus augue. Fusce et tellus vitae arcu pharetra aliquet a nec mi. Vivamus dictum, massa id imperdiet scelerisque, nisi risus scelerisque urna, id pulvinar orci diam ac tellus.\r\n    \r\n    Suspendisse nec venenatis neque. Integer eros sapien, dignissim a diam et, congue laoreet mi. Aenean ut sem diam. Aliquam placerat leo sit amet justo interdum finibus. Maecenas iaculis, ante eget euismod dignissim, nibh enim luctus risus, vitae venenatis mauris odio in ipsum. Aliquam a sapien sit amet dolor sollicitudin dignissim sed ultrices massa. In non lacinia quam. Maecenas maximus, leo nec volutpat ullamcorper, velit metus venenatis nibh, facilisis pharetra elit mauris vel velit. Morbi cursus libero at nunc suscipit, sit amet scelerisque nunc lobortis. Aliquam libero risus, semper sit amet faucibus nec, euismod non lectus. Suspendisse posuere, diam at varius condimentum, mauris tortor sagittis lacus, id pharetra lorem libero quis nulla. Maecenas placerat, ipsum eu sagittis elementum, eros massa fermentum tortor, non ullamcorper ipsum dolor eget tellus. Aliquam luctus tortor quis fringilla elementum. Suspendisse sit amet felis odio. Ut tincidunt finibus mauris in tincidunt. Vestibulum eleifend, nunc vitae feugiat feugiat, ligula dolor interdum neque, imperdiet gravida nunc dolor eu sem.\r\n    \r\n    Pellentesque sollicitudin consectetur sapien. Mauris tincidunt malesuada felis sodales pellentesque. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vivamus a neque vel ipsum tincidunt accumsan. Phasellus tempus massa at neque dignissim laoreet. Duis mattis ultrices magna vitae venenatis. Integer quam odio, eleifend et ante id, aliquam convallis magna. Vestibulum molestie lectus vel ligula malesuada, eget pretium nisl sodales. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec fermentum sem id luctus laoreet. Cras et iaculis dui. Curabitur scelerisque odio tortor, eu lacinia nulla congue id. Vestibulum eu porttitor odio.\r\n    \r\n    Nunc et justo arcu. Etiam condimentum ante varius metus pulvinar venenatis. Etiam fringilla nunc nec maximus commodo. Donec ac ultrices orci, at iaculis ante. Etiam lacinia nisl non varius pulvinar. Cras ultricies, orci id hendrerit vestibulum, turpis lacus commodo dui, vitae ultrices turpis lorem vitae risus. Proin congue urna at lectus dapibus malesuada. Phasellus ut massa lectus.\r\n    \r\n    Praesent a turpis nisi. Morbi ut dictum elit, at feugiat justo. Nunc sollicitudin tellus vitae interdum tristique. Quisque in gravida velit, quis iaculis justo. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi nec sapien nec magna mattis fringilla in a mauris. Sed placerat ultricies diam. Vestibulum neque tortor, volutpat sed sollicitudin vitae, hendrerit a velit. Pellentesque aliquet ex sed est aliquam, ac congue justo maximus. Pellentesque consequat at mi in egestas. Proin feugiat eget sem eget consequat. Quisque a nisl nec nulla cursus auctor.\r\n    \r\n    Nam et velit mi. Sed et augue feugiat, placerat dolor a, placerat leo. Aliquam bibendum commodo sem, et consequat diam porttitor ut. In ornare aliquam pellentesque. Mauris euismod dignissim nisl, ac ultricies urna porta sit amet. In vestibulum urna at sem pulvinar blandit. Nunc tincidunt nunc vel metus congue semper. Sed pellentesque, mi at tristique porttitor, neque justo congue urna, ut mattis orci lacus nec lectus. Nulla vel enim id libero iaculis malesuada. Fusce massa massa, porta a rhoncus a, aliquet eu nisl. Aliquam velit justo, pellentesque dictum tempus id, tincidunt nec risus. Donec varius dui id justo malesuada, sit amet consectetur risus suscipit. Aliquam quis ipsum a sapien dapibus scelerisque in quis magna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ac lobortis nisi. \r\n    \r\n    \r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In tempor nibh sed dolor lobortis sodales. Pellentesque diam nulla, pretium id nunc placerat, sagittis convallis metus. Duis ac blandit mauris, vitae dictum eros. In porta, leo sit amet euismod placerat, turpis mauris mollis felis, vel gravida ligula elit sed nisl. Quisque eros libero, viverra eget sem ac, dignissim volutpat ante. Nulla tincidunt lorem iaculis volutpat porta. Sed iaculis mattis risus eu ultricies. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\r\n    \r\n    Vivamus pretium pretium metus a molestie. Integer ante libero, convallis ac aliquam volutpat, dignissim in sem. Pellentesque eget fringilla urna. Cras et facilisis sapien. Duis in justo eu mi eleifend congue. Proin vitae elit id dui dictum blandit a vel enim. Donec sagittis placerat ultricies. Mauris mi ante, facilisis eget rutrum pretium, fermentum malesuada tellus. Nulla sodales nibh ut urna suscipit, eu ullamcorper libero fringilla.\r\n    \r\n    Ut aliquam feugiat scelerisque. Vivamus iaculis tempor arcu a facilisis. Aenean lorem felis, mattis id lacus vel, feugiat fermentum eros. Morbi eu faucibus neque. Donec sit amet diam pharetra ligula semper egestas id ut leo. Phasellus blandit, nisi in egestas mattis, ligula elit sollicitudin tortor, sed laoreet ex enim id urna. Aliquam et lacinia eros. Sed interdum, nibh sit amet sodales bibendum, ipsum nulla elementum ligula, quis iaculis dolor ex ac purus.\r\n    \r\n    Integer eget blandit turpis, ac consectetur dui. Curabitur et scelerisque dui. Etiam dapibus, elit nec finibus pharetra, magna magna dapibus mi, nec dignissim elit ligula quis nunc. Vivamus fermentum gravida elementum. Proin vel vestibulum neque. Nullam at massa ut nisi fringilla ornare non sit amet quam. Phasellus cursus urna a ex porta, nec suscipit arcu tristique.\r\n    \r\n    Vivamus eu suscipit felis. Quisque mollis rutrum magna non facilisis. Pellentesque tincidunt mollis felis, at cursus lorem auctor tempus. Integer rutrum sed metus vel luctus. Quisque tempor lorem sapien, nec ultrices enim feugiat vel. Etiam non orci ut leo accumsan sollicitudin. Maecenas nulla sapien, tempus ut sem nec, fringilla laoreet lacus. Cras id lacus augue. Fusce et tellus vitae arcu pharetra aliquet a nec mi. Vivamus dictum, massa id imperdiet scelerisque, nisi risus scelerisque urna, id pulvinar orci diam ac tellus.\r\n    \r\n    Suspendisse nec venenatis neque. Integer eros sapien, dignissim a diam et, congue laoreet mi. Aenean ut sem diam. Aliquam placerat leo sit amet justo interdum finibus. Maecenas iaculis, ante eget euismod dignissim, nibh enim luctus risus, vitae venenatis mauris odio in ipsum. Aliquam a sapien sit amet dolor sollicitudin dignissim sed ultrices massa. In non lacinia quam. Maecenas maximus, leo nec volutpat ullamcorper, velit metus venenatis nibh, facilisis pharetra elit mauris vel velit. Morbi cursus libero at nunc suscipit, sit amet scelerisque nunc lobortis. Aliquam libero risus, semper sit amet faucibus nec, euismod non lectus. Suspendisse posuere, diam at varius condimentum, mauris tortor sagittis lacus, id pharetra lorem libero quis nulla. Maecenas placerat, ipsum eu sagittis elementum, eros massa fermentum tortor, non ullamcorper ipsum dolor eget tellus. Aliquam luctus tortor quis fringilla elementum. Suspendisse sit amet felis odio. Ut tincidunt finibus mauris in tincidunt. Vestibulum eleifend, nunc vitae feugiat feugiat, ligula dolor interdum neque, imperdiet gravida nunc dolor eu sem.\r\n    \r\n    Pellentesque sollicitudin consectetur sapien. Mauris tincidunt malesuada felis sodales pellentesque. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vivamus a neque vel ipsum tincidunt accumsan. Phasellus tempus massa at neque dignissim laoreet. Duis mattis ultrices magna vitae venenatis. Integer quam odio, eleifend et ante id, aliquam convallis magna. Vestibulum molestie lectus vel ligula malesuada, eget pretium nisl sodales. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec fermentum sem id luctus laoreet. Cras et iaculis dui. Curabitur scelerisque odio tortor, eu lacinia nulla congue id. Vestibulum eu porttitor odio.\r\n    \r\n    Nunc et justo arcu. Etiam condimentum ante varius metus pulvinar venenatis. Etiam fringilla nunc nec maximus commodo. Donec ac ultrices orci, at iaculis ante. Etiam lacinia nisl non varius pulvinar. Cras ultricies, orci id hendrerit vestibulum, turpis lacus commodo dui, vitae ultrices turpis lorem vitae risus. Proin congue urna at lectus dapibus malesuada. Phasellus ut massa lectus.\r\n    \r\n    Praesent a turpis nisi. Morbi ut dictum elit, at feugiat justo. Nunc sollicitudin tellus vitae interdum tristique. Quisque in gravida velit, quis iaculis justo. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi nec sapien nec magna mattis fringilla in a mauris. Sed placerat ultricies diam. Vestibulum neque tortor, volutpat sed sollicitudin vitae, hendrerit a velit. Pellentesque aliquet ex sed est aliquam, ac congue justo maximus. Pellentesque consequat at mi in egestas. Proin feugiat eget sem eget consequat. Quisque a nisl nec nulla cursus auctor.\r\n    \r\n    Nam et velit mi. Sed et augue feugiat, placerat dolor a, placerat leo. Aliquam bibendum commodo sem, et consequat diam porttitor ut. In ornare aliquam pellentesque. Mauris euismod dignissim nisl, ac ultricies urna porta sit amet. In vestibulum urna at sem pulvinar blandit. Nunc tincidunt nunc vel metus congue semper. Sed pellentesque, mi at tristique porttitor, neque justo congue urna, ut mattis orci lacus nec lectus. Nulla vel enim id libero iaculis malesuada. Fusce massa massa, porta a rhoncus a, aliquet eu nisl. Aliquam velit justo, pellentesque dictum tempus id, tincidunt nec risus. Donec varius dui id justo malesuada, sit amet consectetur risus suscipit. Aliquam quis ipsum a sapien dapibus scelerisque in quis magna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ac lobortis nisi. \r\n    \r\n    \r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In tempor nibh sed dolor lobortis sodales. Pellentesque diam nulla, pretium id nunc placerat, sagittis convallis metus. Duis ac blandit mauris, vitae dictum eros. In porta, leo sit amet euismod placerat, turpis mauris mollis felis, vel gravida ligula elit sed nisl. Quisque eros libero, viverra eget sem ac, dignissim volutpat ante. Nulla tincidunt lorem iaculis volutpat porta. Sed iaculis mattis risus eu ultricies. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\r\n    \r\n    Vivamus pretium pretium metus a molestie. Integer ante libero, convallis ac aliquam volutpat, dignissim in sem. Pellentesque eget fringilla urna. Cras et facilisis sapien. Duis in justo eu mi eleifend congue. Proin vitae elit id dui dictum blandit a vel enim. Donec sagittis placerat ultricies. Mauris mi ante, facilisis eget rutrum pretium, fermentum malesuada tellus. Nulla sodales nibh ut urna suscipit, eu ullamcorper libero fringilla.\r\n    \r\n    Ut aliquam feugiat scelerisque. Vivamus iaculis tempor arcu a facilisis. Aenean lorem felis, mattis id lacus vel, feugiat fermentum eros. Morbi eu faucibus neque. Donec sit amet diam pharetra ligula semper egestas id ut leo. Phasellus blandit, nisi in egestas mattis, ligula elit sollicitudin tortor, sed laoreet ex enim id urna. Aliquam et lacinia eros. Sed interdum, nibh sit amet sodales bibendum, ipsum nulla elementum ligula, quis iaculis dolor ex ac purus.\r\n    \r\n    Integer eget blandit turpis, ac consectetur dui. Curabitur et scelerisque dui. Etiam dapibus, elit nec finibus pharetra, magna magna dapibus mi, nec dignissim elit ligula quis nunc. Vivamus fermentum gravida elementum. Proin vel vestibulum neque. Nullam at massa ut nisi fringilla ornare non sit amet quam. Phasellus cursus urna a ex porta, nec suscipit arcu tristique.\r\n    \r\n    Vivamus eu suscipit felis. Quisque mollis rutrum magna non facilisis. Pellentesque tincidunt mollis felis, at cursus lorem auctor tempus. Integer rutrum sed metus vel luctus. Quisque tempor lorem sapien, nec ultrices enim feugiat vel. Etiam non orci ut leo accumsan sollicitudin. Maecenas nulla sapien, tempus ut sem nec, fringilla laoreet lacus. Cras id lacus augue. Fusce et tellus vitae arcu pharetra aliquet a nec mi. Vivamus dictum, massa id imperdiet scelerisque, nisi risus scelerisque urna, id pulvinar orci diam ac tellus.\r\n    \r\n    Suspendisse nec venenatis neque. Integer eros sapien, dignissim a diam et, congue laoreet mi. Aenean ut sem diam. Aliquam placerat leo sit amet justo interdum finibus. Maecenas iaculis, ante eget euismod dignissim, nibh enim luctus risus, vitae venenatis mauris odio in ipsum. Aliquam a sapien sit amet dolor sollicitudin dignissim sed ultrices massa. In non lacinia quam. Maecenas maximus, leo nec volutpat ullamcorper, velit metus venenatis nibh, facilisis pharetra elit mauris vel velit. Morbi cursus libero at nunc suscipit, sit amet scelerisque nunc lobortis. Aliquam libero risus, semper sit amet faucibus nec, euismod non lectus. Suspendisse posuere, diam at varius condimentum, mauris tortor sagittis lacus, id pharetra lorem libero quis nulla. Maecenas placerat, ipsum eu sagittis elementum, eros massa fermentum tortor, non ullamcorper ipsum dolor eget tellus. Aliquam luctus tortor quis fringilla elementum. Suspendisse sit amet felis odio. Ut tincidunt finibus mauris in tincidunt. Vestibulum eleifend, nunc vitae feugiat feugiat, ligula dolor interdum neque, imperdiet gravida nunc dolor eu sem.\r\n    \r\n    Pellentesque sollicitudin consectetur sapien. Mauris tincidunt malesuada felis sodales pellentesque. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vivamus a neque vel ipsum tincidunt accumsan. Phasellus tempus massa at neque dignissim laoreet. Duis mattis ultrices magna vitae venenatis. Integer quam odio, eleifend et ante id, aliquam convallis magna. Vestibulum molestie lectus vel ligula malesuada, eget pretium nisl sodales. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec fermentum sem id luctus laoreet. Cras et iaculis dui. Curabitur scelerisque odio tortor, eu lacinia nulla congue id. Vestibulum eu porttitor odio.\r\n    \r\n    Nunc et justo arcu. Etiam condimentum ante varius metus pulvinar venenatis. Etiam fringilla nunc nec maximus commodo. Donec ac ultrices orci, at iaculis ante. Etiam lacinia nisl non varius pulvinar. Cras ultricies, orci id hendrerit vestibulum, turpis lacus commodo dui, vitae ultrices turpis lorem vitae risus. Proin congue urna at lectus dapibus malesuada. Phasellus ut massa lectus.\r\n    \r\n    Praesent a turpis nisi. Morbi ut dictum elit, at feugiat justo. Nunc sollicitudin tellus vitae interdum tristique. Quisque in gravida velit, quis iaculis justo. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi nec sapien nec magna mattis fringilla in a mauris. Sed placerat ultricies diam. Vestibulum neque tortor, volutpat sed sollicitudin vitae, hendrerit a velit. Pellentesque aliquet ex sed est aliquam, ac congue justo maximus. Pellentesque consequat at mi in egestas. Proin feugiat eget sem eget consequat. Quisque a nisl nec nulla cursus auctor.\r\n    \r\n    Nam et velit mi. Sed et augue feugiat, placerat dolor a, placerat leo. Aliquam bibendum commodo sem, et consequat diam porttitor ut. In ornare aliquam pellentesque. Mauris euismod dignissim nisl, ac ultricies urna porta sit amet. In vestibulum urna at sem pulvinar blandit. Nunc tincidunt nunc vel metus congue semper. Sed pellentesque, mi at tristique porttitor, neque justo congue urna, ut mattis orci lacus nec lectus. Nulla vel enim id libero iaculis malesuada. Fusce massa massa, porta a rhoncus a, aliquet eu nisl. Aliquam velit justo, pellentesque dictum tempus id, tincidunt nec risus. Donec varius dui id justo malesuada, sit amet consectetur risus suscipit. Aliquam quis ipsum a sapien dapibus scelerisque in quis magna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ac lobortis nisi. \r\n    \r\n    \r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In tempor nibh sed dolor lobortis sodales. Pellentesque diam nulla, pretium id nunc placerat, sagittis convallis metus. Duis ac blandit mauris, vitae dictum eros. In porta, leo sit amet euismod placerat, turpis mauris mollis felis, vel gravida ligula elit sed nisl. Quisque eros libero, viverra eget sem ac, dignissim volutpat ante. Nulla tincidunt lorem iaculis volutpat porta. Sed iaculis mattis risus eu ultricies. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\r\n    \r\n    Vivamus pretium pretium metus a molestie. Integer ante libero, convallis ac aliquam volutpat, dignissim in sem. Pellentesque eget fringilla urna. Cras et facilisis sapien. Duis in justo eu mi eleifend congue. Proin vitae elit id dui dictum blandit a vel enim. Donec sagittis placerat ultricies. Mauris mi ante, facilisis eget rutrum pretium, fermentum malesuada tellus. Nulla sodales nibh ut urna suscipit, eu ullamcorper libero fringilla.\r\n    \r\n    Ut aliquam feugiat scelerisque. Vivamus iaculis tempor arcu a facilisis. Aenean lorem felis, mattis id lacus vel, feugiat fermentum eros. Morbi eu faucibus neque. Donec sit amet diam pharetra ligula semper egestas id ut leo. Phasellus blandit, nisi in egestas mattis, ligula elit sollicitudin tortor, sed laoreet ex enim id urna. Aliquam et lacinia eros. Sed interdum, nibh sit amet sodales bibendum, ipsum nulla elementum ligula, quis iaculis dolor ex ac purus.\r\n    \r\n    Integer eget blandit turpis, ac consectetur dui. Curabitur et scelerisque dui. Etiam dapibus, elit nec finibus pharetra, magna magna dapibus mi, nec dignissim elit ligula quis nunc. Vivamus fermentum gravida elementum. Proin vel vestibulum neque. Nullam at massa ut nisi fringilla ornare non sit amet quam. Phasellus cursus urna a ex porta, nec suscipit arcu tristique.\r\n    \r\n    Vivamus eu suscipit felis. Quisque mollis rutrum magna non facilisis. Pellentesque tincidunt mollis felis, at cursus lorem auctor tempus. Integer rutrum sed metus vel luctus. Quisque tempor lorem sapien, nec ultrices enim feugiat vel. Etiam non orci ut leo accumsan sollicitudin. Maecenas nulla sapien, tempus ut sem nec, fringilla laoreet lacus. Cras id lacus augue. Fusce et tellus vitae arcu pharetra aliquet a nec mi. Vivamus dictum, massa id imperdiet scelerisque, nisi risus scelerisque urna, id pulvinar orci diam ac tellus.\r\n    \r\n    Suspendisse nec venenatis neque. Integer eros sapien, dignissim a diam et, congue laoreet mi. Aenean ut sem diam. Aliquam placerat leo sit amet justo interdum finibus. Maecenas iaculis, ante eget euismod dignissim, nibh enim luctus risus, vitae venenatis mauris odio in ipsum. Aliquam a sapien sit amet dolor sollicitudin dignissim sed ultrices massa. In non lacinia quam. Maecenas maximus, leo nec volutpat ullamcorper, velit metus venenatis nibh, facilisis pharetra elit mauris vel velit. Morbi cursus libero at nunc suscipit, sit amet scelerisque nunc lobortis. Aliquam libero risus, semper sit amet faucibus nec, euismod non lectus. Suspendisse posuere, diam at varius condimentum, mauris tortor sagittis lacus, id pharetra lorem libero quis nulla. Maecenas placerat, ipsum eu sagittis elementum, eros massa fermentum tortor, non ullamcorper ipsum dolor eget tellus. Aliquam luctus tortor quis fringilla elementum. Suspendisse sit amet felis odio. Ut tincidunt finibus mauris in tincidunt. Vestibulum eleifend, nunc vitae feugiat feugiat, ligula dolor interdum neque, imperdiet gravida nunc dolor eu sem.\r\n    \r\n    Pellentesque sollicitudin consectetur sapien. Mauris tincidunt malesuada felis sodales pellentesque. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vivamus a neque vel ipsum tincidunt accumsan. Phasellus tempus massa at neque dignissim laoreet. Duis mattis ultrices magna vitae venenatis. Integer quam odio, eleifend et ante id, aliquam convallis magna. Vestibulum molestie lectus vel ligula malesuada, eget pretium nisl sodales. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec fermentum sem id luctus laoreet. Cras et iaculis dui. Curabitur scelerisque odio tortor, eu lacinia nulla congue id. Vestibulum eu porttitor odio.\r\n    \r\n    Nunc et justo arcu. Etiam condimentum ante varius metus pulvinar venenatis. Etiam fringilla nunc nec maximus commodo. Donec ac ultrices orci, at iaculis ante. Etiam lacinia nisl non varius pulvinar. Cras ultricies, orci id hendrerit vestibulum, turpis lacus commodo dui, vitae ultrices turpis lorem vitae risus. Proin congue urna at lectus dapibus malesuada. Phasellus ut massa lectus.\r\n    \r\n    Praesent a turpis nisi. Morbi ut dictum elit, at feugiat justo. Nunc sollicitudin tellus vitae interdum tristique. Quisque in gravida velit, quis iaculis justo. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Morbi nec sapien nec magna mattis fringilla in a mauris. Sed placerat ultricies diam. Vestibulum neque tortor, volutpat sed sollicitudin vitae, hendrerit a velit. Pellentesque aliquet ex sed est aliquam, ac congue justo maximus. Pellentesque consequat at mi in egestas. Proin feugiat eget sem eget consequat. Quisque a nisl nec nulla cursus auctor.\r\n    \r\n    Nam et velit mi. Sed et augue feugiat, placerat dolor a, placerat leo. Aliquam bibendum commodo sem, et consequat diam porttitor ut. In ornare aliquam pellentesque. Mauris euismod dignissim nisl, ac ultricies urna porta sit amet. In vestibulum urna at sem pulvinar blandit. Nunc tincidunt nunc vel metus congue semper. Sed pellentesque, mi at tristique porttitor, neque justo congue urna, ut mattis orci lacus nec lectus. Nulla vel enim id libero iaculis malesuada. Fusce massa massa, porta a rhoncus a, aliquet eu nisl. Aliquam velit justo, pellentesque dictum tempus id, tincidunt nec risus. Donec varius dui id justo malesuada, sit amet consectetur risus suscipit. Aliquam quis ipsum a sapien dapibus scelerisque in quis magna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ac lobortis nisi. \r\n                </section>\r\n            )\r\n        }    \r\n        }\r\n}\r\n\r\nconst HomeTranslation = withTranslation('common')(Home);\r\n\r\nexport default HomeTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Register.js",["152","153","154","155","156"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Sidebar.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Dashboard.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Nav\\Login.js",["157"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\Project.js",["158","159"],"import React from 'react';\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\nimport TaskList from '../Task/TaskList';\r\nimport TeamList from '../Team/TeamList';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Project extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                project: null,\r\n                categories: [],\r\n                teams: [],\r\n                users: [],\r\n                statuses: ['To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                enableEdit: false,\r\n                allowSave: false,\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.deleteProject = this.deleteProject.bind(this);\r\n\r\n        this.getTeamList();\r\n        this.getUserList();\r\n        this.getCategoryList();\r\n        this.getProject();\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        if(field === 'restricted_access') {\r\n            fields[field] = event.target.checked;\r\n        } else {\r\n            fields[field] = event.target.value;       \r\n        }\r\n\r\n        if(field === 'category') {\r\n            if(fields[field] === this.state.project[field].name) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        } else if(field === 'owner') {\r\n            if(fields[field] === this.state.project[field].username) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        } else {\r\n            if(fields[field] === this.state.project[field]) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        }\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    resetForm() {\r\n        let fields = this.state.fields;\r\n        fields['name'] = this.state.project.name;\r\n        fields['description'] = this.state.project.description;\r\n        fields['organization'] = this.state.project.organization.name;\r\n        fields['category'] = this.state.project.category.name;\r\n        fields['teams'] = this.state.project.teams;\r\n        fields['status'] = this.state.project.status;\r\n        fields['owner'] = this.state.project.owner.username;\r\n        fields['dueDate'] = moment(this.state.project.dueDate).format('YYYY-MM-DD');\r\n\r\n        this.setState({fields, errors: {}, allowSave: false, \r\n            serverResponse: {\r\n                origin: null,\r\n                content: null\r\n            }\r\n        });\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['teams'] || fields['teams'] === 'none') {\r\n            isValid = false;\r\n            errors['teams'] = t('misc.phrases.field') + ' \\'' + t('content.team.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('content.project.actions.createProject.errorMessages.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getCategoryList() {\r\n        await axios.post('/category/list', { category_type: 'project'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    async getUserList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location === undefined && this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: 'user',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/user/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.users.length > 0 && response.data.users !== null) {\r\n                        this.setState({users: response.data.users});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    getTeamList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location === undefined && this.props.location.state === undefined) {\r\n                try {\r\n                    axios.post('/team/list',\r\n                    {\r\n                        ref: 'user',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    axios.post('/team/list',\r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                axios.post('/team/list',\r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                        this.setState({teams: response.data.teams});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getProject() {\r\n        let fields = this.state.fields;\r\n        try {\r\n            await axios.post('/project/details', \r\n            {\r\n                userId: this.state.auth.userId,\r\n                projectId: this.props.location.state.projectId\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== undefined || response.data.project !== null) {\r\n                    this.setState({\r\n                        project: response.data.project\r\n                    })\r\n                    fields['name'] = this.state.project.name;\r\n                    fields['description'] = this.state.project.description;\r\n                    fields['category'] = this.state.project.category.name;\r\n                    fields['teams'] = this.state.project.teams;\r\n                    fields['organization'] = this.state.project.organization.name;\r\n                    fields['status'] = this.state.project.status;\r\n                    fields['owner'] = this.state.project.owner.username;\r\n                    fields['dueDate'] = moment(this.state.project.dueDate).format('YYYY-MM-DD');\r\n                    this.setState({fields});\r\n                }          \r\n            }, {headers: this.headers, withCredentials: true})\r\n            .catch(error => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })    \r\n        } catch(e) {\r\n            this.setState({\r\n                serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    async deleteProject() {\r\n        const {t} = this.props;\r\n        try {\r\n            await axios.post('/project/delete',\r\n            {\r\n                userId: this.state.auth.userId,\r\n                projectId: this.state.project._id\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== undefined && response.data.project !== null) {\r\n                    this.setState({project: null, serverResponse: t('content.project.actions.deleteProject.actionResults.success')});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/project/update', {\r\n                    userId: this.state.auth.userId,\r\n                    projectId: this.state.project._id,\r\n                    projectObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.project !== null) {\r\n                        this.setState({\r\n                            project: response.data.project,\r\n                            serverResponse: {\r\n                                origin: response.data.origin,\r\n                                content: t('content.project.actions.updateProject.actionResults.success')\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            if(this.props.location.state !== undefined && this.props.location.state.userId && this.props.location.state.projectId) {\r\n                return( \r\n                    <div>\r\n                        {this.state.project !== null ? (\r\n                            <div>\r\n                                <h2>{t('content.project.fields.overview')}</h2>\r\n                                <form id=\"form\" onSubmit={this.onFormSubmit}>\r\n                                    <table className=\"tab-table\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>{t('content.project.fields.name')}</th>\r\n                                                <th>{t('content.project.fields.category')}</th>\r\n                                                <th>{t('content.project.fields.status')}</th>\r\n                                                <th>{t('content.project.fields.projectManager')}</th>\r\n                                                <th>{t('content.project.fields.associatedTeams')}</th>\r\n                                                <th>{t('content.project.fields.dueDate')}</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" disabled={!this.state.enableEdit} />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\" disabled={!this.state.enableEdit} >\r\n                                                        <option selected value={this.state.project.category.name}>{this.state.project.category.name}</option>\r\n                                                        {this.state.categories.length > 0 && (\r\n                                                            this.state.categories.map((category, index) => {\r\n                                                                if(category._id !== this.state.project.category._id) {\r\n                                                                    return <option value={category.name}>{category.name}</option>\r\n                                                                }\r\n                                                            })\r\n                                                        )}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <select onChange={this.onChange.bind(this, 'status')} value={this.state.fields['status']} type=\"status\" className=\"\" name=\"status\" disabled={!this.state.enableEdit }>\r\n                                                        <option selected value=\"none\">{t('misc.actionDescription.selectStatus')}</option>\r\n                                                        {this.state.statuses.map((status, index) => {\r\n                                                            if(index === 0) {\r\n                                                                return <option value={status}>{status}</option>\r\n                                                            } else {\r\n                                                                return <option value={status}>{status}</option>\r\n                                                            }\r\n                                                        })}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <select defaultValue={this.state.project.owner._id} value={this.state.fields['owner']}  onChange={this.onChange.bind(this, 'owner')} type=\"owner\" className=\"\" name=\"owner\" disabled={!this.state.enableEdit}>\r\n                                                        <option selected value={this.state.project.owner._id}>{this.state.project.owner.username}</option>\r\n                                                        {this.state.users.map((user, index) => {\r\n                                                            if(user._id !== this.state.project.owner._id) {\r\n                                                                return <option value={user._id}>{user.username}</option>\r\n                                                            }\r\n                                                        })}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Select \r\n                                                        options={this.state.teams} \r\n                                                        isMulti\r\n                                                        value={this.state.fields['teams']}\r\n                                                        onChange={(value) => {\r\n                                                            let fields = this.state.fields;\r\n                                                            let errors = this.state.errors;\r\n                                                            fields['teams'] = value;\r\n                                                            errors['teams'] = ''\r\n                                                            if(fields['teams'] !== this.state.project.teams) {\r\n                                                                this.setState({allowSave: true})\r\n                                                            }\r\n                                                            this.setState({fields, errors});\r\n                                                        }}\r\n                                                        name=\"Teams\"\r\n                                                        defaultValue={() => this.state.project.teams.map((team) => {return [team.name]})}\r\n                                                        placeholder={t('misc.actionDescription.addTeam')}\r\n                                                        getOptionLabel={(option) => option.name} \r\n                                                        getOptionValue={(option) => option._id}\r\n                                                        noOptionsMessage={() => t('commonErrors.noTeamsAvailable')}\r\n                                                        isDisabled={!this.state.enableEdit} />\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                                                        min=\"2021-02-01\" max=\"2022-12-31\" disabled={!this.state.enableEdit} />\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"owner\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span></td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th colspan=\"6\">{t('content.project.fields.description')}</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td colspan=\"6\">\r\n                                                    <JoditEditor\r\n                                                        ref={this.state.fields['description']}\r\n                                                        value={this.state.fields['description']}\r\n                                                        tabIndex={1} // tabIndex of textarea\r\n                                                        onChange={(value) => {let fields = this.state.fields; fields['description'] = value; this.setState({fields, allowSave: true})}}\r\n                                                        //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                                    />\r\n                                                </td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <th>{t('misc.fields.createdAt')}</th>\r\n                                                <td>{moment(this.state.project.created_at).format('YYYY-MM-DD | hh:mm:ss')}</td>\r\n                                                <th>{t('misc.fields.modifiedAt')}</th>\r\n                                                <td>{moment(this.state.project.modified_at).format('YYYY-MM-DD | hh:mm:ss')}</td>\r\n                                            </tr>\r\n                                            {this.state.serverResponse.content !== null ? (\r\n                                                this.state.user !== null ? (\r\n                                                    <tr>\r\n                                                        <td colspan=\"8\" align=\"center\">\r\n                                                            <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                                        </td>\r\n                                                    </tr>\r\n                                                ) : (\r\n                                                    <tr>\r\n                                                        <td colspan=\"8\" align=\"center\">\r\n                                                            <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.project.actions.updateProject.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            ) : (\r\n                                                null\r\n                                            )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </form>\r\n                                <div class=\"card-form-divider\">\r\n                                    <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                    <button className=\"card-form-button\" form=\"form\" type=\"submit\" hidden={!this.state.enableEdit} disabled={!this.state.allowSave}>{t('misc.actionDescription.save')}</button>\r\n                                    <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit}))}} hidden={this.state.enableEdit}>{t('misc.actionDescription.edit')}</button>\r\n                                    <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit})); this.resetForm()}} hidden={!this.state.enableEdit}>{t('misc.actionDescription.cancel')}</button>\r\n                                    <button className=\"card-form-button\" onClick={this.deleteProject} hidden={!this.state.enableEdit}>{t('misc.actionDescription.delete')}</button>\r\n                                </div>\r\n\r\n                                <br /><hr className=\"tab-hr\" /><br />\r\n\r\n                                <h3>{t('content.project.actions.selectProject.associatedTasks')}</h3>\r\n                                <TaskList params={{ref: 'project', objId: this.state.project._id}} />\r\n\r\n                                <h3>{t('content.project.actions.selectProject.associatedTeams')}</h3>\r\n                                <TeamList params={{ref: 'project', objId: this.state.project._id}} />\r\n                            </div>\r\n                        ) : (\r\n                            <div align=\"center\">\r\n                                <h3>{t('content.project.actions.selectProject.errorMessages.dataValidation.missingProps')}</h3>\r\n                                <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return( \r\n                    <div align=\"center\">\r\n                        <h3>{t('content.project.actions.selectProject.errorMessages.dataValidation.missingProps')}</h3>\r\n                        <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst ProjectTranslation = withTranslation('common')(Project);\r\n\r\nexport default ProjectTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\services\\i18n.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\jwtSessionStorage.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\middleware\\languageLocalStorage.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\CreateProject.js",["160"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateProject extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                categories: [],\r\n                organizations: [],\r\n                teams: [],\r\n                statuses: [ 'To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getCategoryList();\r\n        this.getTeamList();\r\n        this.getOrganizationList();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        if(field === 'restricted_access') {\r\n            fields[field] = event.target.checked;\r\n        } else {\r\n            fields[field] = event.target.value;       \r\n        }\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['organization'] || fields['organization'] === 'none') {\r\n            isValid = false;\r\n            errors['organization'] = t('misc.phrases.field') + ' \\'' + t('content.organization.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['teams'] || fields['teams'] === 'none') {\r\n            isValid = false;\r\n            errors['teams'] = t('misc.phrases.field') + ' \\'' + t('content.team.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.project.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getOrganizationList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/organization/list',\r\n                    {\r\n                        ref: 'company',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                            this.setState({organizations: response.data.organizations});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({\r\n                        serverResponse: {\r\n                            origin: 'axios',\r\n                            content: e.message\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/organization/list',\r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                            this.setState({organizations: response.data.organizations});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/organization/list',\r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                        this.setState({organizations: response.data.organizations});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getCategoryList() {\r\n        await axios.post('/category/list', { category_type: 'project'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    async getTeamList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/team/list',\r\n                    {\r\n                        ref: 'user',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/team/list',\r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/team/list',\r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                        this.setState({teams: response.data.teams});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n        this.setState({serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/project/create', {\r\n                    userId: this.state.auth.userId,\r\n                    projectObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.project !== null) {\r\n                        this.setState({project: response.data.project, serverResponse: {\r\n                            origin: response.data.origin,\r\n                            content: t('content.project.actions.createProject.actionResults.success')\r\n                        }})\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <div>\r\n                    <h2>{t('content.project.actions.createProject.actionTitle')}</h2>\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <table className=\"tab-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{t('content.project.fields.name')}</th>\r\n                                    <th>{t('content.project.fields.category')}</th>\r\n                                    <th>{t('content.project.fields.associatedTeams')}</th>\r\n                                    <th>{t('content.project.fields.organization')}</th>\r\n                                    <th>{t('content.project.fields.status')}</th>\r\n                                    <th>{t('content.project.fields.dueDate')}</th>\r\n                                    <th>{t('content.project.fields.restrictedAccess')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                                            {this.state.categories.length > 0 && (\r\n                                                this.state.categories.map((category, index) => {\r\n                                                    if(index === 0) {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    } else {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Select \r\n                                                options={this.state.teams} \r\n                                                isMulti\r\n                                                value={this.state.fields['teams']}\r\n                                                onChange={(value) => {\r\n                                                    let fields = this.state.fields;\r\n                                                    fields['teams'] = value;\r\n                                                    this.setState({fields});\r\n                                                }}\r\n                                                name=\"Teams\"\r\n                                                //defaultValue={() => this.state.project.teams.map((team) => {return [team.name]})}\r\n                                                placeholder={t('misc.actionDescription.addTeam')}\r\n                                                getOptionLabel={(option) => option.name} \r\n                                                getOptionValue={(option) => option._id}\r\n                                                noOptionsMessage={() => t('commonErrors.noTeamsAvailable')}\r\n                                                />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'organization')} value={this.state.fields['organization']} type=\"organization\" className=\"\" name=\"organization\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectOrganization')}</option>\r\n                                            {this.state.organizations.length > 0 && (\r\n                                                this.state.organizations.map((organization, index) => {\r\n                                                    return <option value={organization.name}>{organization.name}</option>\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'status')} value={this.state.fields['status']} type=\"status\" className=\"\" name=\"status\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectStatus')}</option>\r\n                                            {this.state.statuses.map((status, index) => {\r\n                                                if(index === 0) {\r\n                                                    return <option value={status}>{status}</option>\r\n                                                } else {\r\n                                                    return <option value={status}>{status}</option>\r\n                                                }\r\n                                            })}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                                            min=\"2021-02-01\" max=\"2022-12-31\" />\r\n                                        \r\n                                    </td>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'restrictedAccess')} value={this.state.fields['restrictedAccess']} type=\"checkbox\" className=\"\" name=\"restrictedAccess\" />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"organization\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th colSpan=\"7\">{t('content.project.fields.description')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colSpan=\"7\">\r\n                                        <JoditEditor\r\n                                            ref={this.state.fields['description']}\r\n                                            value={this.state.fields['description']}\r\n                                            \r\n                                            tabIndex={1} // tabIndex of textarea\r\n                                            onChange={(value) => {let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['description'] = value; \r\n                                                errors['description'] = '';\r\n                                                this.setState({fields, errors})}}\r\n                                            //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                        />\r\n                                        \r\n                                    </td>\r\n                                </tr>\r\n                                <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                {this.state.serverResponse.content !== null ? (\r\n                                    this.state.user !== null ? (\r\n                                        <tr>\r\n                                            <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colspan=\"8\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.project.actions.createProject.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                        \r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateProjectTranslation = withTranslation('common')(CreateProject);\r\n\r\nexport default CreateProjectTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\CreateTask.js",["161"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateTask extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                categories: [],\r\n                teams: [],\r\n                projects: [],\r\n                users: [],\r\n                statuses: [ 'To do', 'In progress', 'In review', 'Postponed', 'Done'],\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getCategoryList();\r\n        this.getProjectList();\r\n        this.getTeamList();\r\n        this.getUserList();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        document.getElementById('description').defaultValue = '';\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;       \r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['dueDate']) {\r\n            isValid = false;\r\n            errors['dueDate'] = errors['dueDate'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.dueDate') + '\\' ' + t('commonErrors.formValidation.requiredDate');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n        \r\n\r\n        if(!fields['projectId'] || fields['projectId'] === 'none') {\r\n            isValid = false;\r\n            errors['project'] = t('misc.phrases.field') + ' \\'' + t('content.task.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['status'] || fields['status'] === 'none') {\r\n            isValid = false;\r\n            errors['status'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.status') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.task.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getTeamList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/team/list', \r\n                    {\r\n                        ref: 'user',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/team/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                            this.setState({teams: response.data.teams});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/team/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response.data.teams !== undefined && response.data.teams !== '' && response.data.teams !== null && response.data.teams.length > 0) {\r\n                        this.setState({teams: response.data.teams});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getUserList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: 'company',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/user/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.users.length > 0 && response.data.users !== null) {\r\n                        this.setState({users: response.data.users});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    async getCategoryList() {\r\n        await axios.post('/category/list', { category_type: 'task'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                } else {\r\n                    this.setState({categories: null});\r\n                }     \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    async getProjectList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    axios.post('/project/list', \r\n                    {\r\n                        ref: 'company',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response !== undefined && response.data.projects !== null && response.data.projects.length > 0) {\r\n                            this.setState({projects: response.data.projects});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    axios.post('/project/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response !== undefined && response.data.projects !== null && response.data.projects.length > 0) {\r\n                            this.setState({projects: response.data.projects});\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                axios.post('/project/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.projects !== null && response.data.projects.length > 0) {\r\n                        this.setState({projects: response.data.projects});\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const {t} = this.props;\r\n        const fields = this.state.fields;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/task/create', {\r\n                    userId: this.state.auth.userId,\r\n                    taskObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.task !== null) {\r\n                        this.setState({task: response.data.task, serverResponse: {\r\n                            origin: response.data.origin,\r\n                            content: t('content.task.actions.createTask.actionResults.success')\r\n                        }})\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <div>\r\n                    <h2>{t('content.task.actions.createTask.actionTitle')}</h2>\r\n                    <form className=\"card-form\" id=\"form\" onSubmit={this.onFormSubmit}>\r\n                    <table className=\"tab-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{t('content.task.fields.name')}</th>\r\n                                    <th>{t('content.task.fields.category')}</th>\r\n                                    <th>{t('content.task.fields.project')}</th>\r\n                                    <th>{t('content.task.fields.assignedUser')}</th>\r\n                                    <th>{t('content.task.fields.assignedTeams')}</th>\r\n                                    <th>{t('content.task.fields.status')}</th>\r\n                                    <th>{t('content.task.fields.dueDate')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                                            {this.state.categories.length > 0 && (\r\n                                                this.state.categories.map((category, index) => {\r\n                                                    if(index === 0) {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    } else {\r\n                                                        return <option value={category.name}>{category.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'projectId')} value={this.state.fields['projectId']} type=\"projectId\" className=\"\" name=\"projectId\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectProject')}</option>\r\n                                            {this.state.projects.length > 0 && (\r\n                                                this.state.projects.map((project, index) => {\r\n                                                    if(index === 0) {\r\n                                                        return <option value={project._id}>{project.name}</option>\r\n                                                    } else {\r\n                                                        return <option value={project._id}>{project.name}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'assigned_user')} value={this.state.fields['assigned_user']} type=\"assigned_user\" className=\"\" name=\"assigned_user\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectUser')}</option>\r\n                                            {this.state.users.length > 0 && (\r\n                                                this.state.users.map((user, index) => {\r\n                                                    if(index === 0) {\r\n                                                        return <option value={user._id}>{user.username}</option>\r\n                                                    } else {\r\n                                                        return <option value={user._id}>{user.username}</option>\r\n                                                    }\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Select \r\n                                            options={this.state.teams} \r\n                                            isMulti\r\n                                            value={this.state.fields['teams']}\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields;\r\n                                                let errors = this.state.errors;\r\n                                                fields['teams'] = value;\r\n                                                errors['teams'] = '';\r\n                                                this.setState({fields, errors});\r\n                                            }}\r\n                                            name=\"Teams\"\r\n                                            placeholder={t('misc.actionDescription.addTeam')}\r\n                                            getOptionLabel={(option) => option.name} \r\n                                            getOptionValue={(option) => option._id}\r\n                                            noOptionsMessage={() => t('commonErrors.noTeamsAvailable')}\r\n                                            />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'status')} value={this.state.fields['status']} type=\"status\" className=\"\" name=\"status\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectStatus')}</option>\r\n                                            {this.state.statuses.map((status, index) => {\r\n                                                if(index === 0) {\r\n                                                    return <option value={status}>{status}</option>\r\n                                                } else {\r\n                                                    return <option value={status}>{status}</option>\r\n                                                }\r\n                                            })}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input onChange={this.onChange.bind(this, 'dueDate')} value={this.state.fields['dueDate']} type=\"date\" className=\"\" name=\"dueDate\"\r\n                                            min=\"2021-02-01\" max=\"2022-12-31\" />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"projectId\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"assigned_user\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"teams\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"status\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"dueDate\"]}</span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr><th colspan=\"7\">{t('content.task.fields.description')}</th></tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colspan=\"7\">\r\n                                        <JoditEditor\r\n                                            ref={this.state.fields['description']}\r\n                                            value={this.state.fields['description']}\r\n                                            tabIndex={1} // tabIndex of textarea\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['description'] = value; \r\n                                                errors['description'] = '';\r\n                                                this.setState({fields, errors})}}\r\n                                            //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                {this.state.serverResponse.content !== null ? (\r\n                                    this.state.user !== null ? (\r\n                                        <tr>\r\n                                            <td colspan=\"7\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colspan=\"7\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.task.actions.createTask.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </form>\r\n                    <div class=\"card-form-divider\">\r\n                        <button type=\"submit\" form=\"form\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                        <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                        <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateTaskTranslation = withTranslation('common')(CreateTask);\r\n\r\nexport default CreateTaskTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Project\\ProjectList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\TeamList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\TaskList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CreateCompany.js",["162","163","164","165","166","167","168","169","170","171","172","173","174","175"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\CreateTeam.js",["176"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nclass CreateTeam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                user: null,\r\n                categories: [],\r\n                organizations: [],\r\n                team: null,\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.resetForm = this.resetForm.bind(this);                \r\n\r\n        this.getUser();\r\n        this.getCategoryList();\r\n        this.getOrganizationList();\r\n        this.getUserList();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        axios.Cancel('Axios request canceled.');\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({fields: {}, errors: {}});\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        \r\n        fields[field] = event.target.value;\r\n\r\n        errors[field] = '';\r\n        this.setState({fields, errors});\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['members'] || fields['members'] === 'none') {\r\n            isValid = false;\r\n            errors['members'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.members') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['organization'] || fields['organization'] === 'none') {\r\n            isValid = false;\r\n            errors['organization'] = t('misc.phrases.field') + ' \\'' + t('content.organization.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getUser() {\r\n        let fields = this.state.fields;\r\n\r\n        await axios.post('/user/profile', { userId: this.state.auth.userId}, {headers: this.headers, withCredentials: true})\r\n        .then((response) => {\r\n            if(response !== undefined) {\r\n                fields['members'] = response.data.user;\r\n                this.setState({fields, user: response.data.user});\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            if(error.response.data.error === 'JwtTokenExpired') {\r\n                removeJwtDataFromSessionStorage()\r\n            }\r\n            \r\n            this.setState({\r\n                serverResponse: {\r\n                    origin: error.response.data.origin,\r\n                    content: error.response.data.error\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    async getCategoryList() {\r\n        try {\r\n            await axios.post('/category/list', { category_type: 'team'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error.response.data.error === 'JwtTokenExpired') {\r\n                    removeJwtDataFromSessionStorage()\r\n                }\r\n                \r\n                this.setState({\r\n                    serverResponse: {\r\n                        origin: error.response.data.origin,\r\n                        content: error.response.data.error\r\n                    }\r\n                })\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n        \r\n    }\r\n\r\n    async getUserList() {\r\n        try {\r\n            await axios.post('/user/list', \r\n            {\r\n                ref: 'company',\r\n                objId: this.state.auth.userId\r\n            }, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.users.length > 0 && response.data.users !== null) {\r\n                    this.setState({users: response.data.users});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n    }\r\n\r\n    async getOrganizationList() {\r\n        try {\r\n            await axios.post('/organization/list', \r\n            {\r\n                ref: 'user',\r\n                objId: this.state.auth.userId\r\n            }, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                    this.setState({organizations: response.data.organizations});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n    }\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/team/create', {\r\n                    userId: this.state.auth.userId,\r\n                    teamObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.team !== null) {\r\n                        this.setState({\r\n                            team: response.data.team, serverResponse: {\r\n                                origin: response.data.origin,\r\n                                content: t('content.team.actions.createTeam.actionResults.success')\r\n                            }\r\n                        })\r\n                    }  \r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({\r\n                    serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <div>\r\n                    <h2>{t('content.team.actions.createTeam.actionTitle')}</h2>\r\n                    <form className=\"card-form\" onSubmit={this.onFormSubmit}>\r\n                        <table className=\"tab-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{t('content.team.fields.name')}</th>\r\n                                    <th>{t('content.category.title')}</th>\r\n                                    <th>{t('content.organization.title')}</th>\r\n                                    <th>{t('content.team.fields.members')}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" name=\"name\" />\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'category')} value={this.state.fields['category']} type=\"category\" className=\"\" name=\"category\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectCategory')}</option>\r\n                                            {this.state.categories.length > 0 && (\r\n                                                this.state.categories.map((category, index) => {\r\n                                                    return <option value={category.name}>{category.name}</option>\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <select onChange={this.onChange.bind(this, 'organization')} value={this.state.fields['organization']} type=\"organization\" className=\"\" name=\"organization\">\r\n                                            <option selected value=\"none\">{t('misc.actionDescription.selectOrganization')}</option>\r\n                                            {this.state.organizations.length > 0 && (\r\n                                                this.state.organizations.map((organization, index) => {\r\n                                                    return <option value={organization.name}>{organization.name}</option>\r\n                                                })\r\n                                            )}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Select \r\n                                            options={this.state.users} \r\n                                            isMulti\r\n                                            value={this.state.fields['members']}\r\n                                            onChange={(value) => { \r\n                                                let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['members'] = value; \r\n                                                errors['members'] = ''\r\n                                                this.setState({fields, errors})}}\r\n                                            name=\"Members\"\r\n                                            placeholder={t('misc.actionDescription.addMember')}\r\n                                            getOptionLabel={(option) => option.username} \r\n                                            getOptionValue={(option) => option._id} \r\n                                            noOptionsMessage={() => t('commonErrors.noMembersAvailable')}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"organization\"]}</span></td>\r\n                                    <td><span className=\"error-msg-span\">{this.state.errors[\"members\"]}</span></td>\r\n                                </tr>\r\n                            </tbody>\r\n                            <thead>\r\n                                <tr><th colspan=\"4\">{t('content.team.fields.description')}</th></tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colSpan=\"4\">\r\n                                        <JoditEditor\r\n                                            ref={this.state.fields['description']}\r\n                                            value={this.state.fields['description']}\r\n                                            tabIndex={1} // tabIndex of textarea\r\n                                            onChange={(value) => {\r\n                                                let fields = this.state.fields; \r\n                                                let errors = this.state.errors;\r\n                                                fields['description'] = value; \r\n                                                errors['description'] = '';\r\n                                                this.setState({fields, errors})}}\r\n                                            //onBlur={newContent => { let fields = this.state.fields; fields['description'] = newContent; this.setState({fields})}} // preferred to use only this option to update the content for performance reasons\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                {this.state.serverResponse.content !== null ? (\r\n                                    this.state.user !== null ? (\r\n                                        <tr>\r\n                                            <td colspan=\"4\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                            </td>\r\n                                        </tr>\r\n                                    ) : (\r\n                                        <tr>\r\n                                            <td colspan=\"4\" align=\"center\">\r\n                                                <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">{t('content.team.actions.createTeam.errorMessages.dataValidation.' + this.state.serverResponse.content)}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                ) : (\r\n                                    null\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                        <div class=\"card-form-divider\">\r\n                            <button type=\"submit\" className=\"card-form-button\">{t('misc.actionDescription.create')}</button>\r\n                            <button type=\"reset\" className=\"card-form-button\" onClick={this.resetForm}>{t('misc.actionDescription.reset')}</button>\r\n                            <button type=\"button\" className=\"card-form-button\"><Link to=\"/dashboard\" className=\"card-form-button-link\">{t('misc.actionDescription.cancel')}</Link></button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateTeamTranslation = withTranslation('common')(CreateTeam);\r\n\r\nexport default CreateTeamTranslation;","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\UserList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\CompanyList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\NotFound.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Company\\Company.js",["177"],"import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Company extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    refreshToken: this.jwt.refreshToken\r\n                },\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.refreshToken}`\r\n            };\r\n        } else {\r\n            this.state = {\r\n                auth: {\r\n                    userId: null,\r\n                    refreshToken: null\r\n                },\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                },\r\n                fields: {},\r\n                errors: {}\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.refreshToken !== null) {\r\n            return <h1>Company</h1>\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }    \r\n}\r\n\r\nconst CompanyTranslation = withTranslation('common')(Company);\r\n\r\nexport default CompanyTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Team\\Team.js",["178","179","180","181"],"import React from 'react';\r\nimport {Redirect, Link} from 'react-router-dom';\r\nimport {withTranslation} from 'react-i18next';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport moment from 'moment';\r\nimport JoditEditor from 'jodit-react';\r\n\r\nimport ProjectList from '../Project/ProjectList';\r\nimport TaskList from '../Task/TaskList';\r\nimport UserList from '../User/UserList';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nclass Team extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                team: null,\r\n                organizations: [],\r\n                categories: [],\r\n                users: [],\r\n                options: [],\r\n                fields: {},\r\n                errors: {},\r\n                enableEdit: false,\r\n                addMember: false,\r\n                allowSave: false,\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                }\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n\r\n        this.deleteTeam = this.deleteTeam.bind(this);\r\n\r\n        this.getUserList();\r\n        this.getCategoryList();\r\n        this.getOrganizationList();\r\n        this.getTeam();\r\n    }\r\n\r\n    onChange(field, event) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n\r\n        fields[field] = event.target.value;\r\n        errors[field] = '';\r\n        \r\n        if(field === 'organization' || field === 'category') {\r\n            if(fields[field] === this.state.team[field].name) {\r\n                this.setState({fields, errors, allowSave: false});\r\n            } else {\r\n                this.setState({fields, errors, allowSave: true});\r\n            }\r\n        }\r\n        \r\n        if(fields[field] === this.state.team[field]) {\r\n            this.setState({fields, errors, allowSave: false});\r\n        } else {\r\n            this.setState({fields, errors, allowSave: true});\r\n        }\r\n    }\r\n\r\n    resetForm() {\r\n        let fields = this.state.fields;\r\n        fields['organization'] = this.state.team.organization.name;\r\n        fields['category'] = this.state.team.category.name;\r\n        fields['name'] = this.state.team.name;\r\n        fields['members'] = this.state.team.members;\r\n        fields['description'] = this.state.team.description;\r\n        fields['owner'] = this.state.team.owner;\r\n        fields['avatar_url'] = this.state.team.avatar_url;\r\n\r\n        this.setState({fields, errors: {}, \r\n            serverResponse: {\r\n                origin: null,\r\n                content: null\r\n            }\r\n        });\r\n    }\r\n\r\n    validateForm() {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        let isValid = true;\r\n        const {t} = this.props;\r\n\r\n        if(!fields['name']) {\r\n            isValid = false;\r\n            errors['name'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.name') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['name'] !== undefined) {\r\n            if(!fields['name'].match(/^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/)) {\r\n                let regex = /^[ążśźęćńółĄŻŚŹĘĆŃÓŁA-Za-z0-9!@#$%^&*()_+\\-=,./;'\\\\[\\]<>?:\"|{} ]{1,50}$/;\r\n                isValid = false;\r\n                errors['name'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        if(!fields['members'] || fields['members'] === 'none') {\r\n            isValid = false;\r\n            errors['members'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.members') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['category'] || fields['category'] === 'none') {\r\n            isValid = false;\r\n            errors['category'] = t('misc.phrases.field') + ' \\'' + t('content.category.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['organization'] || fields['organization'] === 'none') {\r\n            isValid = false;\r\n            errors['organization'] = t('misc.phrases.field') + ' \\'' + t('content.organization.title') + '\\' ' + t('commonErrors.formValidation.requiredDropDownSelection');\r\n        }\r\n\r\n        if(!fields['description']) {\r\n            isValid = false;\r\n            errors['description'] = t('misc.phrases.field') + ' \\'' + t('content.team.fields.description') + '\\' ' + t('commonErrors.formValidation.requiredFieldIsEmpty');\r\n        } else if(fields['description'] !== undefined) {\r\n            if(!fields['description'].match(/^.{1,500}$/gm)) {\r\n                let regex = /^.{1,500}$/gm;\r\n                isValid = false;\r\n                errors['description'] = t('commonErrors.formValidation.allowedCharsOnly') + regex;\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return isValid;\r\n    }\r\n\r\n    async getTeam() {\r\n        let fields = this.state.fields;\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/team/details', {\r\n                        ref: 'user',\r\n                        userId: this.state.auth.userId,\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response !== undefined && response.data.team !== null) {\r\n                            this.setState({team: response.data.team});\r\n                            fields['organization'] = this.state.team.organization.name;\r\n                            fields['category'] = this.state.team.category.name;\r\n                            fields['owner'] = this.state.team.owner;\r\n                            fields['name'] = this.state.team.name;\r\n                            fields['members'] = this.state.team.members;\r\n                            fields['description'] = this.state.team.description;\r\n                            fields['avatar_url'] = this.state.team.avatar_url;\r\n                            this.setState({fields});\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }) \r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/team/details', {\r\n                        ref: this.props.location.state.ref,\r\n                        userId: this.props.location.state.userId,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true})\r\n                    .then((response) => {\r\n                        if(response !== undefined && response.data.team !== null) {\r\n                            this.setState({team: response.data.team});\r\n                            fields['organization'] = this.state.team.organization.name;\r\n                            fields['category'] = this.state.team.category.name;\r\n                            fields['owner'] = this.state.team.owner;\r\n                            fields['name'] = this.state.team.name;\r\n                            fields['members'] = this.state.team.members;\r\n                            fields['description'] = this.state.team.description;\r\n                            fields['avatar_url'] = this.state.team.avatar_url;\r\n                            this.setState({fields});\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }) \r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/team/details', {\r\n                    ref: this.props.params.ref,\r\n                    userId: this.props.params.userId,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.team !== null) {\r\n                        this.setState({team: response.data.team});\r\n                        fields['organization'] = this.state.team.organization.name;\r\n                        fields['category'] = this.state.team.category.name;\r\n                        fields['owner'] = this.state.team.owner;\r\n                        fields['name'] = this.state.team.name;\r\n                        fields['members'] = this.state.team.members;\r\n                        fields['description'] = this.state.team.description;\r\n                        fields['avatar_url'] = this.state.team.avatar_url;\r\n                        this.setState({fields});\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }) \r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getCategoryList() {\r\n        try {\r\n            await axios.post('/category/list', { category_type: 'team'}, {headers: this.headers, withCredentials: true })\r\n            .then((response) => {\r\n                if(response.data.categories.length > 0 && response.data.categories !== null) {\r\n                    this.setState({categories: response.data.categories});\r\n                }   \r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n        \r\n    }\r\n\r\n    async getOrganizationList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/organization/list',\r\n                    {\r\n                        ref: 'user',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                            this.setState({organizations: response.data.organizations});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/organization/list',\r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                            this.setState({organizations: response.data.organizations});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/organization/list',\r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.organizations.length > 0 && response.data.organizations !== null) {\r\n                        this.setState({organizations: response.data.organizations});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async getUserList() {\r\n        if(this.props.params === undefined) {\r\n            if(this.props.location.state === undefined) {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: 'company',\r\n                        objId: this.state.auth.userId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            } else {\r\n                try {\r\n                    await axios.post('/user/list', \r\n                    {\r\n                        ref: this.props.location.state.ref,\r\n                        objId: this.props.location.state.objId\r\n                    }, {headers: this.headers, withCredentials: true })\r\n                    .then((response) => {\r\n                        if(response.data.users.length > 0 && response.data.users !== null) {\r\n                            this.setState({users: response.data.users});\r\n                        }   \r\n                    })\r\n                    .catch((error) => {\r\n                        if(error !== undefined && error.response !== undefined) {\r\n                            if(error.response.data.error === 'JwtTokenExpired') {\r\n                                removeJwtDataFromSessionStorage()\r\n                            } else {\r\n                                this.setState({\r\n                                    serverResponse: {\r\n                                        origin: error.response.data.origin,\r\n                                        content: error.response.data.error\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    });\r\n                } catch(e) {\r\n                    this.setState({serverResponse: {\r\n                        origin: 'axios',\r\n                        content: e.message\r\n                    }});\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                await axios.post('/user/list', \r\n                {\r\n                    ref: this.props.params.ref,\r\n                    objId: this.props.params.objId\r\n                }, {headers: this.headers, withCredentials: true })\r\n                .then((response) => {\r\n                    if(response.data.users.length > 0 && response.data.users !== null) {\r\n                        this.setState({users: response.data.users});\r\n                    }   \r\n                })\r\n                .catch((error) => {\r\n                    if(error !== undefined && error.response !== undefined) {\r\n                        if(error.response.data.error === 'JwtTokenExpired') {\r\n                            removeJwtDataFromSessionStorage()\r\n                        } else {\r\n                            this.setState({\r\n                                serverResponse: {\r\n                                    origin: error.response.data.origin,\r\n                                    content: error.response.data.error\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            } catch(e) {\r\n                this.setState({serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        }\r\n    }\r\n\r\n    async deleteTeam() {\r\n        const {t} = this.props;\r\n        try {\r\n            await axios.post('/team/delete',\r\n            {\r\n                userId: this.state.auth.userId,\r\n                teamId: this.state.team._id\r\n            }, {headers: this.headers, withCredentials: true})\r\n            .then((response) => {\r\n                if(response !== undefined && response.data.team !== null) {\r\n                    this.setState({team: response.data.team, serverResponse: t('content.team.actions.deleteTeam.actionResults.success')});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error !== undefined && error.response !== undefined) {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage()\r\n                    } else {\r\n                        this.setState({\r\n                            serverResponse: {\r\n                                origin: error.response.data.origin,\r\n                                content: error.response.data.error\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        } catch(e) {\r\n            this.setState({serverResponse: {\r\n                origin: 'axios',\r\n                content: e.message\r\n            }});\r\n        }\r\n    }\r\n\r\n\r\n    onFormSubmit = (event, errors) => {\r\n        event.preventDefault();\r\n        const fields = this.state.fields;\r\n        const {t} = this.props;\r\n        this.setState({serverResponse: {\r\n            origin: null,\r\n            content: null\r\n        }})\r\n\r\n        if(this.validateForm()) {\r\n            try {\r\n                axios.post('/team/update',\r\n                {  \r\n                    userId: this.state.auth.userId,\r\n                    teamId: this.state.team._id,\r\n                    teamObj: this.state.fields\r\n                }, {headers: this.headers, withCredentials: true})\r\n                .then((response) => {\r\n                    if(response !== undefined && response.data.team !== null) {\r\n                        this.setState({\r\n                            team: response.data.team,\r\n                            serverResponse: {\r\n                                origin: response.data.origin,\r\n                                content: t('content.team.actions.updateTeam.actionResults.success')\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    if(error.response.data.error === 'JwtTokenExpired') {\r\n                        removeJwtDataFromSessionStorage();\r\n                    } else {\r\n                        this.setState({serverResponse: {\r\n                            origin: error.response.data.origin,\r\n                            content: error.response.data.error\r\n                        }});\r\n                    }\r\n                })\r\n            } catch(e) {\r\n                this.setState({ serverResponse: {\r\n                    origin: 'axios',\r\n                    content: e.message\r\n                }});\r\n            }\r\n        } else {\r\n            let errors = document.querySelectorAll('.error-msg-span');\r\n            for(var i = 0; i < errors.length; i++) {\r\n                errors[i].style.display = 'block';\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {t} = this.props;\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            if(this.props.location.state !== undefined && this.props.location.state.objId && this.props.location.state.ref) {\r\n                return(\r\n                    <div>\r\n                        <h2>{t('content.team.fields.overview')}</h2>\r\n                        {this.state.team !== null ? (\r\n                            <div>\r\n                                <form id=\"form\" onSubmit={this.onFormSubmit}>\r\n                                    <table className=\"tab-table\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>{t('content.team.fields.name')}</th>\r\n                                                <th>{t('content.team.fields.category')}</th>\r\n                                                <th>{t('content.team.fields.owner')}</th>\r\n                                                <th>{t('content.team.fields.organization')}</th>\r\n                                                <th>{t('content.team.fields.members')}</th>\r\n                                                <th>{t('content.team.fields.avatarUrl')}</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                         <tbody>\r\n                                            <tr>\r\n                                                <td>\r\n                                                    <input placeholder={t('misc.actionDescription.insertName')} onChange={this.onChange.bind(this, 'name')} value={this.state.fields['name']} type=\"name\" className=\"\" id=\"name\" name=\"name\" disabled={!this.state.enableEdit}/>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <select defaultValue={this.state.team.category.name} value={this.state.fields['category']} onChange={this.onChange.bind(this, 'category')} type=\"category\" className=\"\" name=\"category\" disabled={!this.state.enableEdit}>\r\n                                                        <option selected  value={this.state.team.category.name}>{this.state.team.category.name}</option>\r\n                                                        {this.state.categories.length > 0 && (\r\n                                                            this.state.categories.map((category, index) => {\r\n                                                                if(category._id !== this.state.team.category._id) {\r\n                                                                    return <option value={category.name}>{category.name}</option>\r\n                                                                }\r\n                                                            })\r\n                                                        )}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <select defaultValue={this.state.team.owner._id} value={this.state.fields['owner']}  onChange={this.onChange.bind(this, 'owner')} type=\"owner\" className=\"\" name=\"owner\" disabled={!this.state.enableEdit}>\r\n                                                        <option selected value={this.state.team.owner._id}>{this.state.team.owner.username}</option>\r\n                                                        {this.state.team.members.length > 0 && (\r\n                                                            this.state.team.members.map((member, index) => {\r\n                                                                if(member._id !== this.state.team.owner._id) {\r\n                                                                    return <option value={member._id}>{member.username}</option>\r\n                                                                }\r\n                                                            })\r\n                                                        )}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td nowrap=\"nowrap\">\r\n                                                    <select defaultValue={this.state.team.organization.name} value={this.state.fields['organization']}  onChange={this.onChange.bind(this, 'organization')} type=\"organization\" className=\"\" name=\"organization\" disabled={!this.state.enableEdit}>\r\n                                                        <option selected value={this.state.team.organization.name}>{this.state.team.organization.name}</option>\r\n                                                        {this.state.organizations.length > 0 && (\r\n                                                            this.state.organizations.map((organization, index) => {\r\n                                                                if(organization._id !== this.state.team.organization._id) {\r\n                                                                    return <option value={organization.name}>{organization.name}</option>\r\n                                                                }\r\n                                                            })\r\n                                                        )}\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <Select \r\n                                                        options={this.state.users} \r\n                                                        isMulti\r\n                                                        value={this.state.fields['members']}\r\n                                                        onChange={(value) => { \r\n                                                            let fields = this.state.fields; \r\n                                                            fields['members'] = value; \r\n                                                            if(fields['members'] !== this.state.team.members) {\r\n                                                                this.setState({allowSave: true})\r\n                                                            }\r\n                                                            this.setState({fields})}}\r\n                                                        name=\"Members\"\r\n                                                        defaultValue={() => this.state.team.members.map((member) => {return [member.username]})}\r\n                                                        placeholder={t('misc.actionDescription.addMember')}\r\n                                                        getOptionLabel={(option) => option.username} \r\n                                                        getOptionValue={(option) => option._id} \r\n                                                        noOptionsMessage={() => t('commonErrors.noMembersAvailable')}\r\n                                                        isDisabled={!this.state.enableEdit}/>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <input onChange={this.onChange.bind(this, 'avatar_url')} value={this.state.fields['avatar_url']} type=\"avatar_url\" className=\"\" id=\"avatar_url\" name=\"avatar_url\" disabled={!this.state.enableEdit}/>\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"name\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"owner\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"category\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"organization\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"members\"]}</span></td>\r\n                                                <td><span className=\"error-msg-span\">{this.state.errors[\"avatar_url\"]}</span></td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                        <thead>\r\n                                            <tr><th colspan=\"6\">{t('content.team.fields.description')}</th></tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td colspan=\"6\">\r\n                                                    <JoditEditor\r\n                                                        ref={this.state.fields['description']}\r\n                                                        value={this.state.fields['description']}\r\n                                                        tabIndex={1} // tabIndex of textarea\r\n                                                        onChange={(value) => {\r\n                                                            let fields = this.state.fields; \r\n                                                            let errors = this.state.errors;\r\n                                                            fields['description'] = value; \r\n                                                            errors['description'] = '';\r\n                                                            this.setState({fields, errors, allowSave: true})}} />\r\n                                                </td>\r\n                                            </tr>\r\n                                            <tr><td><span className=\"error-msg-span\">{this.state.errors[\"description\"]}</span></td></tr>\r\n                                            <tr>\r\n                                                <th>{t('misc.fields.createdAt')}</th>\r\n                                                <td>{moment(this.state.team.created_at).format('YYYY-MM-DD | hh:mm:ss')}</td>\r\n                                                <th>{t('misc.fields.modifiedAt')}</th>\r\n                                                <td>{moment(this.state.team.modified_at).format('YYYY-MM-DD | hh:mm:ss')}</td>\r\n                                            </tr>\r\n                                            {this.state.serverResponse.content !== null ? (\r\n                                                this.state.team !== null ? (\r\n                                                    <tr>\r\n                                                        <td colspan=\"6\" align=\"center\">\r\n                                                            <span className=\"error-msg-span\" style={{display: \"block\", color: 'green'}} id=\"serverResponse\">{this.state.serverResponse.content}</span>                                                            \r\n                                                        </td>\r\n                                                    </tr>\r\n                                                ) : (\r\n                                                    <tr>\r\n                                                        <td colspan=\"6\" align=\"center\">\r\n                                                            <span className=\"error-msg-span\" style={{display: \"block\"}} id=\"serverResponse\">- {t('content.team.actions.updateTeam.errorMessages.dataValidation.' + this.state.serverResponse.content)} -</span>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            ) : (\r\n                                                null\r\n                                            )}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </form>\r\n                                {this.state.auth.userId === this.state.team.owner._id ? (\r\n                                    <div class=\"card-form-divider\">\r\n                                        <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                        <button className=\"card-form-button\" form=\"form\" type=\"submit\" hidden={!this.state.enableEdit} disabled={!this.state.allowSave}>{t('misc.actionDescription.save')}</button>\r\n                                        <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit}))}} hidden={this.state.enableEdit}>{t('misc.actionDescription.edit')}</button>\r\n                                        <button className=\"card-form-button\" onClick={() => {this.setState(prev => ({enableEdit: !prev.enableEdit})); this.resetForm()}} hidden={!this.state.enableEdit}>{t('misc.actionDescription.cancel')}</button>\r\n                                        <button className=\"card-form-button\" onClick={this.deleteTeam} hidden={!this.state.enableEdit}>{t('misc.actionDescription.delete')}</button>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div class=\"card-form-divider\">\r\n                                        <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                    </div>\r\n                                )}\r\n    \r\n                                <br /><hr className=\"tab-hr\" /><br />\r\n    \r\n                                <h3>{t('content.team.actions.selectTeam.members')}</h3>\r\n                                <UserList params={{ref: 'team', objId: this.state.team._id}} />\r\n    \r\n                                <h3>{t('content.team.actions.selectTeam.associatedProjects')}</h3>\r\n                                <ProjectList params={{ref: 'team', objId: this.state.team._id}} />\r\n    \r\n                                <h3>{t('content.team.actions.selectTeam.associatedTasks')}</h3>\r\n                                <TaskList params={{ref: 'team', objId: this.state.team._id}} />\r\n                            </div>\r\n                        ) : (\r\n                            <div>\r\n                                <table className=\"tab-table\">\r\n                                    <tr>\r\n                                        {this.state.serverResponse.content !== null ? (\r\n                                            <td colspan=\"6\" align=\"center\">{t('content.team.actions.selectTeam.errorMessages.dataValidation.' + this.state.serverResponse.content)}</td>\r\n                                        ) : (\r\n                                            <td colspan=\"6\" align=\"center\">-</td>\r\n                                        )}\r\n                                    </tr>\r\n                                </table>\r\n                                <div className=\"card-form-divider\">\r\n                                    <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return( \r\n                    <div align=\"center\">\r\n                        <h3>{t('content.team.actions.selectTeam.errorMessages.dataValidation.missingProps')}</h3>\r\n                        <Link to='/dashboard'><button className=\"card-form-button\">{t('misc.actionDescription.return')}</button></Link>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n    }    \r\n}\r\n\r\nconst TeamTranslation = withTranslation('common')(Team);\r\n\r\nexport default TeamTranslation;\r\n\r\n","D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\User.js",["182","183"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\UserAction.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Dashboard\\Recent.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Task\\Task.js",["184","185","186"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\CreateOrganization.js",["187","188","189","190","191","192"],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\OrganizationList.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\Organization\\Organization.js",[],"D:\\studia\\PRACA DYPLOMOWA\\hermes\\client\\src\\components\\User\\CreateUser.js",["193","194","195","196"],"import React from 'react';\r\nimport {withTranslation} from 'react-i18next';\r\nimport {Redirect} from 'react-router';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport {getJwtDataFromSessionStorage, removeJwtDataFromSessionStorage} from '../../middleware/jwtSessionStorage';\r\n\r\nimport '../../assets/css/register.css';\r\nimport '../../assets/css/style.css';\r\nimport '../../assets/css/errors.css';\r\n\r\nimport Register from '../Nav/Register';\r\n\r\nclass CreateUser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.jwt = getJwtDataFromSessionStorage();\r\n\r\n        if(this.jwt !== null) {\r\n            this.state = {\r\n                auth: {\r\n                    userId: this.jwt.userId,\r\n                    accessToken: this.jwt.accessToken\r\n                },\r\n                fields: {},\r\n                errors: {},\r\n                serverResponse: {\r\n                    origin: null,\r\n                    content: null\r\n                },\r\n            }\r\n\r\n            this.headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.state.auth.accessToken}`\r\n            };\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {t} = this.props;\r\n\r\n        if(this.jwt !== null && this.state.auth.userId !== null && this.state.auth.accessToken !== null) {\r\n            return(\r\n                <Register />\r\n            )\r\n        } else {\r\n            return(\r\n                <Redirect to=\r\n                    {{\r\n                        pathname: '/login',\r\n                        state: {\r\n                            authenticated: false,\r\n                            redirected: true\r\n                        }\r\n                    }}\r\n                />\r\n            ) \r\n        }\r\n    }\r\n}\r\n\r\nconst CreateUserTranslation = withTranslation('common')(CreateUser);\r\n\r\nexport default CreateUserTranslation;",{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":14,"column":8,"nodeType":"203","messageId":"204","endLine":14,"endColumn":18},{"ruleId":"201","severity":1,"message":"205","line":4,"column":9,"nodeType":"203","messageId":"204","endLine":4,"endColumn":37},{"ruleId":"201","severity":1,"message":"205","line":4,"column":9,"nodeType":"203","messageId":"204","endLine":4,"endColumn":37},{"ruleId":"201","severity":1,"message":"206","line":5,"column":39,"nodeType":"203","messageId":"204","endLine":5,"endColumn":65},{"ruleId":"207","severity":1,"message":"208","line":97,"column":35,"nodeType":"209","messageId":"210","endLine":97,"endColumn":37},{"ruleId":"211","severity":1,"message":"212","line":98,"column":147,"nodeType":"213","messageId":"214","endLine":98,"endColumn":148,"suggestions":"215"},{"ruleId":"211","severity":1,"message":"212","line":98,"column":172,"nodeType":"213","messageId":"214","endLine":98,"endColumn":173,"suggestions":"216"},{"ruleId":"207","severity":1,"message":"208","line":107,"column":35,"nodeType":"209","messageId":"210","endLine":107,"endColumn":37},{"ruleId":"201","severity":1,"message":"217","line":173,"column":16,"nodeType":"203","messageId":"204","endLine":173,"endColumn":17},{"ruleId":"201","severity":1,"message":"217","line":90,"column":16,"nodeType":"203","messageId":"204","endLine":90,"endColumn":17},{"ruleId":"218","severity":1,"message":"219","line":557,"column":105,"nodeType":"220","messageId":"221","endLine":557,"endColumn":107},{"ruleId":"218","severity":1,"message":"219","line":580,"column":93,"nodeType":"220","messageId":"221","endLine":580,"endColumn":95},{"ruleId":"201","severity":1,"message":"222","line":365,"column":15,"nodeType":"203","messageId":"204","endLine":365,"endColumn":21},{"ruleId":"201","severity":1,"message":"222","line":461,"column":15,"nodeType":"203","messageId":"204","endLine":461,"endColumn":21},{"ruleId":"201","severity":1,"message":"223","line":6,"column":8,"nodeType":"203","messageId":"204","endLine":6,"endColumn":14},{"ruleId":"211","severity":1,"message":"212","line":90,"column":49,"nodeType":"213","messageId":"214","endLine":90,"endColumn":50,"suggestions":"224"},{"ruleId":"211","severity":1,"message":"212","line":90,"column":74,"nodeType":"213","messageId":"214","endLine":90,"endColumn":75,"suggestions":"225"},{"ruleId":"211","severity":1,"message":"212","line":91,"column":40,"nodeType":"213","messageId":"214","endLine":91,"endColumn":41,"suggestions":"226"},{"ruleId":"211","severity":1,"message":"212","line":91,"column":65,"nodeType":"213","messageId":"214","endLine":91,"endColumn":66,"suggestions":"227"},{"ruleId":"211","severity":1,"message":"228","line":115,"column":58,"nodeType":"213","messageId":"214","endLine":115,"endColumn":59,"suggestions":"229"},{"ruleId":"211","severity":1,"message":"228","line":115,"column":111,"nodeType":"213","messageId":"214","endLine":115,"endColumn":112,"suggestions":"230"},{"ruleId":"211","severity":1,"message":"231","line":115,"column":118,"nodeType":"213","messageId":"214","endLine":115,"endColumn":119,"suggestions":"232"},{"ruleId":"211","severity":1,"message":"231","line":115,"column":120,"nodeType":"213","messageId":"214","endLine":115,"endColumn":121,"suggestions":"233"},{"ruleId":"211","severity":1,"message":"228","line":123,"column":61,"nodeType":"213","messageId":"214","endLine":123,"endColumn":62,"suggestions":"234"},{"ruleId":"211","severity":1,"message":"228","line":123,"column":114,"nodeType":"213","messageId":"214","endLine":123,"endColumn":115,"suggestions":"235"},{"ruleId":"211","severity":1,"message":"231","line":123,"column":121,"nodeType":"213","messageId":"214","endLine":123,"endColumn":122,"suggestions":"236"},{"ruleId":"211","severity":1,"message":"231","line":123,"column":123,"nodeType":"213","messageId":"214","endLine":123,"endColumn":124,"suggestions":"237"},{"ruleId":"201","severity":1,"message":"222","line":137,"column":15,"nodeType":"203","messageId":"204","endLine":137,"endColumn":21},{"ruleId":"201","severity":1,"message":"222","line":241,"column":15,"nodeType":"203","messageId":"204","endLine":241,"endColumn":21},{"ruleId":"201","severity":1,"message":"238","line":4,"column":8,"nodeType":"203","messageId":"204","endLine":4,"endColumn":13},{"ruleId":"201","severity":1,"message":"222","line":545,"column":15,"nodeType":"203","messageId":"204","endLine":545,"endColumn":21},{"ruleId":"218","severity":1,"message":"219","line":625,"column":105,"nodeType":"220","messageId":"221","endLine":625,"endColumn":107},{"ruleId":"218","severity":1,"message":"219","line":637,"column":105,"nodeType":"220","messageId":"221","endLine":637,"endColumn":107},{"ruleId":"218","severity":1,"message":"219","line":649,"column":112,"nodeType":"220","messageId":"221","endLine":649,"endColumn":114},{"ruleId":"211","severity":1,"message":"212","line":119,"column":147,"nodeType":"213","messageId":"214","endLine":119,"endColumn":148,"suggestions":"239"},{"ruleId":"211","severity":1,"message":"212","line":119,"column":172,"nodeType":"213","messageId":"214","endLine":119,"endColumn":173,"suggestions":"240"},{"ruleId":"218","severity":1,"message":"219","line":647,"column":105,"nodeType":"220","messageId":"221","endLine":647,"endColumn":107},{"ruleId":"218","severity":1,"message":"219","line":660,"column":106,"nodeType":"220","messageId":"221","endLine":660,"endColumn":108},{"ruleId":"218","severity":1,"message":"219","line":694,"column":96,"nodeType":"220","messageId":"221","endLine":694,"endColumn":98},{"ruleId":"201","severity":1,"message":"223","line":6,"column":8,"nodeType":"203","messageId":"204","endLine":6,"endColumn":14},{"ruleId":"211","severity":1,"message":"228","line":97,"column":61,"nodeType":"213","messageId":"214","endLine":97,"endColumn":62,"suggestions":"241"},{"ruleId":"211","severity":1,"message":"228","line":97,"column":114,"nodeType":"213","messageId":"214","endLine":97,"endColumn":115,"suggestions":"242"},{"ruleId":"211","severity":1,"message":"231","line":97,"column":121,"nodeType":"213","messageId":"214","endLine":97,"endColumn":122,"suggestions":"243"},{"ruleId":"211","severity":1,"message":"231","line":97,"column":123,"nodeType":"213","messageId":"214","endLine":97,"endColumn":124,"suggestions":"244"},{"ruleId":"201","severity":1,"message":"222","line":186,"column":15,"nodeType":"203","messageId":"204","endLine":186,"endColumn":21},{"ruleId":"201","severity":1,"message":"245","line":4,"column":9,"nodeType":"203","messageId":"204","endLine":4,"endColumn":13},{"ruleId":"201","severity":1,"message":"238","line":5,"column":8,"nodeType":"203","messageId":"204","endLine":5,"endColumn":13},{"ruleId":"201","severity":1,"message":"246","line":7,"column":39,"nodeType":"203","messageId":"204","endLine":7,"endColumn":70},{"ruleId":"201","severity":1,"message":"217","line":43,"column":16,"nodeType":"203","messageId":"204","endLine":43,"endColumn":17},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],"no-unused-vars","'UserAction' is defined but never used.","Identifier","unusedVar","'getJwtDataFromSessionStorage' is defined but never used.","'setJwtDataInSessionStorage' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["249","250"],["251","252"],"'t' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'fields' is assigned a value but never used.","'Select' is defined but never used.",["253","254"],["255","256"],["257","258"],["259","260"],"Unnecessary escape character: \\+.",["261","262"],["263","264"],"Unnecessary escape character: \\/.",["265","266"],["267","268"],["269","270"],["271","272"],["273","274"],["275","276"],"'axios' is defined but never used.",["277","278"],["279","280"],["281","282"],["283","284"],["285","286"],["287","288"],"'Link' is defined but never used.","'removeJwtDataFromSessionStorage' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"289","fix":"290","desc":"291"},{"messageId":"292","fix":"293","desc":"294"},{"messageId":"289","fix":"295","desc":"291"},{"messageId":"292","fix":"296","desc":"294"},{"messageId":"289","fix":"297","desc":"291"},{"messageId":"292","fix":"298","desc":"294"},{"messageId":"289","fix":"299","desc":"291"},{"messageId":"292","fix":"300","desc":"294"},{"messageId":"289","fix":"301","desc":"291"},{"messageId":"292","fix":"302","desc":"294"},{"messageId":"289","fix":"303","desc":"291"},{"messageId":"292","fix":"304","desc":"294"},{"messageId":"289","fix":"305","desc":"291"},{"messageId":"292","fix":"306","desc":"294"},{"messageId":"289","fix":"307","desc":"291"},{"messageId":"292","fix":"308","desc":"294"},{"messageId":"289","fix":"309","desc":"291"},{"messageId":"292","fix":"310","desc":"294"},{"messageId":"289","fix":"311","desc":"291"},{"messageId":"292","fix":"312","desc":"294"},{"messageId":"289","fix":"313","desc":"291"},{"messageId":"292","fix":"314","desc":"294"},{"messageId":"289","fix":"315","desc":"291"},{"messageId":"292","fix":"316","desc":"294"},{"messageId":"289","fix":"317","desc":"291"},{"messageId":"292","fix":"318","desc":"294"},{"messageId":"289","fix":"319","desc":"291"},{"messageId":"292","fix":"320","desc":"294"},{"messageId":"289","fix":"321","desc":"291"},{"messageId":"292","fix":"322","desc":"294"},{"messageId":"289","fix":"323","desc":"291"},{"messageId":"292","fix":"324","desc":"294"},{"messageId":"289","fix":"325","desc":"291"},{"messageId":"292","fix":"326","desc":"294"},{"messageId":"289","fix":"327","desc":"291"},{"messageId":"292","fix":"328","desc":"294"},{"messageId":"289","fix":"329","desc":"291"},{"messageId":"292","fix":"330","desc":"294"},{"messageId":"289","fix":"331","desc":"291"},{"messageId":"292","fix":"332","desc":"294"},"removeEscape",{"range":"333","text":"334"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"335","text":"336"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"337","text":"334"},{"range":"338","text":"336"},{"range":"339","text":"334"},{"range":"340","text":"336"},{"range":"341","text":"334"},{"range":"342","text":"336"},{"range":"343","text":"334"},{"range":"344","text":"336"},{"range":"345","text":"334"},{"range":"346","text":"336"},{"range":"347","text":"334"},{"range":"348","text":"336"},{"range":"349","text":"334"},{"range":"350","text":"336"},{"range":"351","text":"334"},{"range":"352","text":"336"},{"range":"353","text":"334"},{"range":"354","text":"336"},{"range":"355","text":"334"},{"range":"356","text":"336"},{"range":"357","text":"334"},{"range":"358","text":"336"},{"range":"359","text":"334"},{"range":"360","text":"336"},{"range":"361","text":"334"},{"range":"362","text":"336"},{"range":"363","text":"334"},{"range":"364","text":"336"},{"range":"365","text":"334"},{"range":"366","text":"336"},{"range":"367","text":"334"},{"range":"368","text":"336"},{"range":"369","text":"334"},{"range":"370","text":"336"},{"range":"371","text":"334"},{"range":"372","text":"336"},{"range":"373","text":"334"},{"range":"374","text":"336"},[3832,3833],"",[3832,3832],"\\",[3857,3858],[3857,3857],[3469,3470],[3469,3469],[3494,3495],[3494,3494],[3755,3756],[3755,3755],[3780,3781],[3780,3780],[5409,5410],[5409,5409],[5462,5463],[5462,5462],[5469,5470],[5469,5469],[5471,5472],[5471,5471],[5976,5977],[5976,5976],[6029,6030],[6029,6029],[6036,6037],[6036,6036],[6038,6039],[6038,6038],[4703,4704],[4703,4703],[4728,4729],[4728,4728],[3514,3515],[3514,3514],[3567,3568],[3567,3567],[3574,3575],[3574,3574],[3576,3577],[3576,3576]]